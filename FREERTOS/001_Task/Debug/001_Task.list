
001_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006f28  08006f28  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f28  08006f28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f28  08006f28  00016f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f2c  08006f2c  00016f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000596c  20000078  08006fa8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200059e4  08006fa8  000259e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014875  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030d1  00000000  00000000  00034960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00037a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fca  00000000  00000000  00038ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002991d  00000000  00000000  00039ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ec7  00000000  00000000  000637bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd409  00000000  00000000  0007a686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d78  00000000  00000000  00177a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0017d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d50 	.word	0x08006d50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006d50 	.word	0x08006d50

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200042c0 	.word	0x200042c0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fac3 	bl	80008a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f853 	bl	80003c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f000 f8a3 	bl	8000468 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /*Enable cycle counter for Cortex M4*/
  DWT_CTRL |= (1<<0);
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <main+0x94>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <main+0x94>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800032e:	481e      	ldr	r0, [pc, #120]	; (80003a8 <main+0x98>)
 8000330:	f003 fb0a 	bl	8003948 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000334:	f003 f91c 	bl	8003570 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

 status = xTaskCreate(task1_handler,"Task-1",200,"Hello from Task-1",2,&task1_Handle);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2302      	movs	r3, #2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <main+0x9c>)
 8000344:	22c8      	movs	r2, #200	; 0xc8
 8000346:	491a      	ldr	r1, [pc, #104]	; (80003b0 <main+0xa0>)
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <main+0xa4>)
 800034a:	f001 ff18 	bl	800217e <xTaskCreate>
 800034e:	6178      	str	r0, [r7, #20]

 configASSERT(status == pdPASS);
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d00a      	beq.n	800036c <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800035a:	f383 8811 	msr	BASEPRI, r3
 800035e:	f3bf 8f6f 	isb	sy
 8000362:	f3bf 8f4f 	dsb	sy
 8000366:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000368:	bf00      	nop
 800036a:	e7fe      	b.n	800036a <main+0x5a>

 status = xTaskCreate(task2_handler,"Task-2",200,"Hello from Task-2",2,&task2_Handle);
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	2302      	movs	r3, #2
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <main+0xa8>)
 8000376:	22c8      	movs	r2, #200	; 0xc8
 8000378:	4910      	ldr	r1, [pc, #64]	; (80003bc <main+0xac>)
 800037a:	4811      	ldr	r0, [pc, #68]	; (80003c0 <main+0xb0>)
 800037c:	f001 feff 	bl	800217e <xTaskCreate>
 8000380:	6178      	str	r0, [r7, #20]

 configASSERT(status == pdPASS);
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d00a      	beq.n	800039e <main+0x8e>
        __asm volatile
 8000388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800038c:	f383 8811 	msr	BASEPRI, r3
 8000390:	f3bf 8f6f 	isb	sy
 8000394:	f3bf 8f4f 	dsb	sy
 8000398:	60fb      	str	r3, [r7, #12]
    }
 800039a:	bf00      	nop
 800039c:	e7fe      	b.n	800039c <main+0x8c>

 /*starting the freertos scheduler*/
 vTaskStartScheduler();
 800039e:	f002 f869 	bl	8002474 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <main+0x92>
 80003a4:	e0001000 	.word	0xe0001000
 80003a8:	0007a120 	.word	0x0007a120
 80003ac:	08006d68 	.word	0x08006d68
 80003b0:	08006d7c 	.word	0x08006d7c
 80003b4:	08000559 	.word	0x08000559
 80003b8:	08006d84 	.word	0x08006d84
 80003bc:	08006d98 	.word	0x08006d98
 80003c0:	08000599 	.word	0x08000599

080003c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b096      	sub	sp, #88	; 0x58
 80003c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ca:	f107 0314 	add.w	r3, r7, #20
 80003ce:	2244      	movs	r2, #68	; 0x44
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f005 fec8 	bl	8006168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
 80003e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ea:	f000 fd4b 	bl	8000e84 <HAL_PWREx_ControlVoltageScaling>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f4:	f000 f902 	bl	80005fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f8:	2302      	movs	r3, #2
 80003fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000400:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000402:	2310      	movs	r3, #16
 8000404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000406:	2302      	movs	r3, #2
 8000408:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040a:	2302      	movs	r3, #2
 800040c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800040e:	2301      	movs	r3, #1
 8000410:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000412:	230a      	movs	r3, #10
 8000414:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000416:	2307      	movs	r3, #7
 8000418:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800041a:	2302      	movs	r3, #2
 800041c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800041e:	2302      	movs	r3, #2
 8000420:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fd82 	bl	8000f30 <HAL_RCC_OscConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000432:	f000 f8e3 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000436:	230f      	movs	r3, #15
 8000438:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043a:	2303      	movs	r3, #3
 800043c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	2104      	movs	r1, #4
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f94a 	bl	80016e8 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800045a:	f000 f8cf 	bl	80005fc <Error_Handler>
  }
}
 800045e:	bf00      	nop
 8000460:	3758      	adds	r7, #88	; 0x58
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08a      	sub	sp, #40	; 0x28
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047e:	4b34      	ldr	r3, [pc, #208]	; (8000550 <MX_GPIO_Init+0xe8>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	4a33      	ldr	r2, [pc, #204]	; (8000550 <MX_GPIO_Init+0xe8>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800048a:	4b31      	ldr	r3, [pc, #196]	; (8000550 <MX_GPIO_Init+0xe8>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	f003 0304 	and.w	r3, r3, #4
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000496:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <MX_GPIO_Init+0xe8>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	4a2d      	ldr	r2, [pc, #180]	; (8000550 <MX_GPIO_Init+0xe8>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a27      	ldr	r2, [pc, #156]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	4a21      	ldr	r2, [pc, #132]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004cc:	f043 0302 	orr.w	r3, r3, #2
 80004d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <MX_GPIO_Init+0xe8>)
 80004d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d6:	f003 0302 	and.w	r3, r3, #2
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 fca7 	bl	8000e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	4814      	ldr	r0, [pc, #80]	; (8000554 <MX_GPIO_Init+0xec>)
 8000502:	f000 faef 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000506:	230c      	movs	r3, #12
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000516:	2307      	movs	r3, #7
 8000518:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f000 fade 	bl	8000ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000528:	2320      	movs	r3, #32
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 facf 	bl	8000ae4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000546:	bf00      	nop
 8000548:	3728      	adds	r7, #40	; 0x28
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	48000800 	.word	0x48000800

08000558 <task1_handler>:

/* USER CODE BEGIN 4 */


static void task1_handler(void * parameters)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b09c      	sub	sp, #112	; 0x70
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		printf("%s\n",(char*)parameters);
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f005 fcdd 	bl	8005f20 <puts>

		snprintf(msg,100,"%s\n",(char*)parameters);
 8000566:	f107 000c 	add.w	r0, r7, #12
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <task1_handler+0x38>)
 800056e:	2164      	movs	r1, #100	; 0x64
 8000570:	f005 fcde 	bl	8005f30 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4618      	mov	r0, r3
 800057a:	f005 fb0b 	bl	8005b94 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <task1_handler+0x3c>)
 8000580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	f3bf 8f4f 	dsb	sy
 800058a:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)parameters);
 800058e:	e7e7      	b.n	8000560 <task1_handler+0x8>
 8000590:	08006da0 	.word	0x08006da0
 8000594:	e000ed04 	.word	0xe000ed04

08000598 <task2_handler>:
	}
}

static void task2_handler(void * parameters)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b09c      	sub	sp, #112	; 0x70
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		printf("%s\n",(char*)parameters);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f005 fcbd 	bl	8005f20 <puts>

		snprintf(msg,100,"%s\n",(char*)parameters);
 80005a6:	f107 000c 	add.w	r0, r7, #12
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <task2_handler+0x38>)
 80005ae:	2164      	movs	r1, #100	; 0x64
 80005b0:	f005 fcbe 	bl	8005f30 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 faeb 	bl	8005b94 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <task2_handler+0x3c>)
 80005c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	f3bf 8f4f 	dsb	sy
 80005ca:	f3bf 8f6f 	isb	sy
		printf("%s\n",(char*)parameters);
 80005ce:	e7e7      	b.n	80005a0 <task2_handler+0x8>
 80005d0:	08006da0 	.word	0x08006da0
 80005d4:	e000ed04 	.word	0xe000ed04

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ea:	f000 f979 	bl	80008e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40001000 	.word	0x40001000

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6613      	str	r3, [r2, #96]	; 0x60
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x44>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	6593      	str	r3, [r2, #88]	; 0x58
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_MspInit+0x44>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800063e:	f002 fc13 	bl	8002e68 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <HAL_InitTick+0xe0>)
 8000660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000662:	4a33      	ldr	r2, [pc, #204]	; (8000730 <HAL_InitTick+0xe0>)
 8000664:	f043 0310 	orr.w	r3, r3, #16
 8000668:	6593      	str	r3, [r2, #88]	; 0x58
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <HAL_InitTick+0xe0>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	f003 0310 	and.w	r3, r3, #16
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000676:	f107 0210 	add.w	r2, r7, #16
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4611      	mov	r1, r2
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f9df 	bl	8001a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000690:	f001 f9c2 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 8000694:	6378      	str	r0, [r7, #52]	; 0x34
 8000696:	e004      	b.n	80006a2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000698:	f001 f9be 	bl	8001a18 <HAL_RCC_GetPCLK1Freq>
 800069c:	4603      	mov	r3, r0
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a4:	4a23      	ldr	r2, [pc, #140]	; (8000734 <HAL_InitTick+0xe4>)
 80006a6:	fba2 2303 	umull	r2, r3, r2, r3
 80006aa:	0c9b      	lsrs	r3, r3, #18
 80006ac:	3b01      	subs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <HAL_InitTick+0xe8>)
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_InitTick+0xec>)
 80006b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <HAL_InitTick+0xe8>)
 80006b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006be:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <HAL_InitTick+0xe8>)
 80006c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_InitTick+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <HAL_InitTick+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_InitTick+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80006d6:	4818      	ldr	r0, [pc, #96]	; (8000738 <HAL_InitTick+0xe8>)
 80006d8:	f001 fa46 	bl	8001b68 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d11b      	bne.n	8000722 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <HAL_InitTick+0xe8>)
 80006ec:	f001 fa9e 	bl	8001c2c <HAL_TIM_Base_Start_IT>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d111      	bne.n	8000722 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006fe:	2036      	movs	r0, #54	; 0x36
 8000700:	f000 f9e2 	bl	8000ac8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2b0f      	cmp	r3, #15
 8000708:	d808      	bhi.n	800071c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800070a:	2200      	movs	r2, #0
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	2036      	movs	r0, #54	; 0x36
 8000710:	f000 f9be 	bl	8000a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000714:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <HAL_InitTick+0xf0>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	e002      	b.n	8000722 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800071c:	2301      	movs	r3, #1
 800071e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000722:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000726:	4618      	mov	r0, r3
 8000728:	3738      	adds	r7, #56	; 0x38
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	431bde83 	.word	0x431bde83
 8000738:	20000094 	.word	0x20000094
 800073c:	40001000 	.word	0x40001000
 8000740:	20000004 	.word	0x20000004

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <TIM6_DAC_IRQHandler+0x10>)
 8000776:	f001 fac9 	bl	8001d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000094 	.word	0x20000094

08000784 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e00a      	b.n	80007ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000796:	f3af 8000 	nop.w
 800079a:	4601      	mov	r1, r0
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	60ba      	str	r2, [r7, #8]
 80007a2:	b2ca      	uxtb	r2, r1
 80007a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	3301      	adds	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	dbf0      	blt.n	8000796 <_read+0x12>
  }

  return len;
 80007b4:	687b      	ldr	r3, [r7, #4]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <_close>:
  }
  return len;
}

int _close(int file)
{
 80007be:	b480      	push	{r7}
 80007c0:	b083      	sub	sp, #12
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007e6:	605a      	str	r2, [r3, #4]
  return 0;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <_isatty>:

int _isatty(int file)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <SystemInit+0x20>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <SystemInit+0x20>)
 8000834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800084c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000884 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000850:	f7ff ffea 	bl	8000828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480c      	ldr	r0, [pc, #48]	; (8000888 <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490d      	ldr	r1, [pc, #52]	; (800088c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0a      	ldr	r4, [pc, #40]	; (8000898 <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087a:	f005 fcb1 	bl	80061e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087e:	f7ff fd47 	bl	8000310 <main>

08000882 <LoopForever>:

LoopForever:
    b LoopForever
 8000882:	e7fe      	b.n	8000882 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000884:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800088c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000890:	08006f30 	.word	0x08006f30
  ldr r2, =_sbss
 8000894:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000898:	200059e4 	.word	0x200059e4

0800089c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800089c:	e7fe      	b.n	800089c <ADC1_2_IRQHandler>
	...

080008a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008a6:	2300      	movs	r3, #0
 80008a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_Init+0x3c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <HAL_Init+0x3c>)
 80008b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b6:	2003      	movs	r0, #3
 80008b8:	f000 f8df 	bl	8000a7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008bc:	200f      	movs	r0, #15
 80008be:	f7ff fec7 	bl	8000650 <HAL_InitTick>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	e001      	b.n	80008d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ce:	f7ff fe9b 	bl	8000608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	200000e0 	.word	0x200000e0

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200000e0 	.word	0x200000e0

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	2b00      	cmp	r3, #0
 8000994:	db0b      	blt.n	80009ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	f003 021f 	and.w	r2, r3, #31
 800099c:	4907      	ldr	r1, [pc, #28]	; (80009bc <__NVIC_EnableIRQ+0x38>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	2001      	movs	r0, #1
 80009a6:	fa00 f202 	lsl.w	r2, r0, r2
 80009aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff4c 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa2:	f7ff ff61 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000aa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	6978      	ldr	r0, [r7, #20]
 8000aae:	f7ff ffb1 	bl	8000a14 <NVIC_EncodePriority>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff80 	bl	80009c0 <__NVIC_SetPriority>
}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff54 	bl	8000984 <__NVIC_EnableIRQ>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b087      	sub	sp, #28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e17f      	b.n	8000df4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	fa01 f303 	lsl.w	r3, r1, r3
 8000b00:	4013      	ands	r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f000 8171 	beq.w	8000dee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d005      	beq.n	8000b24 <HAL_GPIO_Init+0x40>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d130      	bne.n	8000b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43db      	mvns	r3, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	f003 0201 	and.w	r2, r3, #1
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0303 	and.w	r3, r3, #3
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d118      	bne.n	8000bc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	f003 0201 	and.w	r2, r3, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d017      	beq.n	8000c00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d123      	bne.n	8000c54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0203 	and.w	r2, r3, #3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80ac 	beq.w	8000dee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca2:	4b5c      	ldr	r3, [pc, #368]	; (8000e14 <HAL_GPIO_Init+0x330>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <HAL_GPIO_Init+0x334>)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0303 	and.w	r3, r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cd8:	d025      	beq.n	8000d26 <HAL_GPIO_Init+0x242>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <HAL_GPIO_Init+0x338>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d01f      	beq.n	8000d22 <HAL_GPIO_Init+0x23e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <HAL_GPIO_Init+0x33c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d019      	beq.n	8000d1e <HAL_GPIO_Init+0x23a>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x340>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0x236>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x344>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00d      	beq.n	8000d16 <HAL_GPIO_Init+0x232>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4b      	ldr	r2, [pc, #300]	; (8000e2c <HAL_GPIO_Init+0x348>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d007      	beq.n	8000d12 <HAL_GPIO_Init+0x22e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4a      	ldr	r2, [pc, #296]	; (8000e30 <HAL_GPIO_Init+0x34c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d101      	bne.n	8000d0e <HAL_GPIO_Init+0x22a>
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	e00c      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d0e:	2307      	movs	r3, #7
 8000d10:	e00a      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d12:	2305      	movs	r3, #5
 8000d14:	e008      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x244>
 8000d26:	2300      	movs	r3, #0
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	f002 0203 	and.w	r2, r2, #3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d38:	4937      	ldr	r1, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x334>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d46:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d6a:	4a32      	ldr	r2, [pc, #200]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d70:	4b30      	ldr	r3, [pc, #192]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dbe:	4a1d      	ldr	r2, [pc, #116]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <HAL_GPIO_Init+0x350>)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae78 	bne.w	8000af4 <HAL_GPIO_Init+0x10>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	371c      	adds	r7, #28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800
 8000e24:	48000c00 	.word	0x48000c00
 8000e28:	48001000 	.word	0x48001000
 8000e2c:	48001400 	.word	0x48001400
 8000e30:	48001800 	.word	0x48001800
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	807b      	strh	r3, [r7, #2]
 8000e44:	4613      	mov	r3, r2
 8000e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e48:	787b      	ldrb	r3, [r7, #1]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e54:	e002      	b.n	8000e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40007000 	.word	0x40007000

08000e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e92:	d130      	bne.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ea0:	d038      	beq.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2232      	movs	r2, #50	; 0x32
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	0c9b      	lsrs	r3, r3, #18
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec8:	e002      	b.n	8000ed0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed2:	695b      	ldr	r3, [r3, #20]
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000edc:	d102      	bne.n	8000ee4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f2      	bne.n	8000eca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef0:	d110      	bne.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e00f      	b.n	8000f16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f02:	d007      	beq.n	8000f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40007000 	.word	0x40007000
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	431bde83 	.word	0x431bde83

08000f30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e3ca      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f42:	4b97      	ldr	r3, [pc, #604]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f4c:	4b94      	ldr	r3, [pc, #592]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80e4 	beq.w	800112c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <HAL_RCC_OscConfig+0x4a>
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	2b0c      	cmp	r3, #12
 8000f6e:	f040 808b 	bne.w	8001088 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	f040 8087 	bne.w	8001088 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f7a:	4b89      	ldr	r3, [pc, #548]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x62>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e3a2      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1a      	ldr	r2, [r3, #32]
 8000f96:	4b82      	ldr	r3, [pc, #520]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <HAL_RCC_OscConfig+0x7c>
 8000fa2:	4b7f      	ldr	r3, [pc, #508]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000faa:	e005      	b.n	8000fb8 <HAL_RCC_OscConfig+0x88>
 8000fac:	4b7c      	ldr	r3, [pc, #496]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d223      	bcs.n	8001004 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fd71 	bl	8001aa8 <RCC_SetFlashLatencyFromMSIRange>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e383      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd0:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a72      	ldr	r2, [pc, #456]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fd6:	f043 0308 	orr.w	r3, r3, #8
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	496d      	ldr	r1, [pc, #436]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fee:	4b6c      	ldr	r3, [pc, #432]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	4968      	ldr	r1, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	604b      	str	r3, [r1, #4]
 8001002:	e025      	b.n	8001050 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001004:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a65      	ldr	r2, [pc, #404]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4960      	ldr	r1, [pc, #384]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001022:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	495b      	ldr	r1, [pc, #364]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001032:	4313      	orrs	r3, r2
 8001034:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fd31 	bl	8001aa8 <RCC_SetFlashLatencyFromMSIRange>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e343      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001050:	f000 fc4a 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 8001054:	4602      	mov	r2, r0
 8001056:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	4950      	ldr	r1, [pc, #320]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 8001062:	5ccb      	ldrb	r3, [r1, r3]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	4a4e      	ldr	r2, [pc, #312]	; (80011a8 <HAL_RCC_OscConfig+0x278>)
 800106e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001070:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <HAL_RCC_OscConfig+0x27c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff faeb 	bl	8000650 <HAL_InitTick>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d052      	beq.n	800112a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	e327      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d032      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800109c:	f7ff fc34 	bl	8000908 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc30 	bl	8000908 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e310      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	4931      	ldr	r1, [pc, #196]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	492c      	ldr	r1, [pc, #176]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
 80010f4:	e01a      	b.n	800112c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001102:	f7ff fc01 	bl	8000908 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800110a:	f7ff fbfd 	bl	8000908 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e2dd      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800111c:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x1da>
 8001128:	e000      	b.n	800112c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800112a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d074      	beq.n	8001222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x21a>
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b0c      	cmp	r3, #12
 8001142:	d10e      	bne.n	8001162 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d10b      	bne.n	8001162 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d064      	beq.n	8001220 <HAL_RCC_OscConfig+0x2f0>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d160      	bne.n	8001220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e2ba      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116a:	d106      	bne.n	800117a <HAL_RCC_OscConfig+0x24a>
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	e026      	b.n	80011c8 <HAL_RCC_OscConfig+0x298>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001182:	d115      	bne.n	80011b0 <HAL_RCC_OscConfig+0x280>
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 800118a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a02      	ldr	r2, [pc, #8]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e014      	b.n	80011c8 <HAL_RCC_OscConfig+0x298>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	08006e70 	.word	0x08006e70
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000004 	.word	0x20000004
 80011b0:	4ba0      	ldr	r3, [pc, #640]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a9f      	ldr	r2, [pc, #636]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b9d      	ldr	r3, [pc, #628]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a9c      	ldr	r2, [pc, #624]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d013      	beq.n	80011f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb9a 	bl	8000908 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fb96 	bl	8000908 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e276      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ea:	4b92      	ldr	r3, [pc, #584]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x2a8>
 80011f6:	e014      	b.n	8001222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fb86 	bl	8000908 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fb82 	bl	8000908 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e262      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001212:	4b88      	ldr	r3, [pc, #544]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d1f0      	bne.n	8001200 <HAL_RCC_OscConfig+0x2d0>
 800121e:	e000      	b.n	8001222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d060      	beq.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d005      	beq.n	8001240 <HAL_RCC_OscConfig+0x310>
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	2b0c      	cmp	r3, #12
 8001238:	d119      	bne.n	800126e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d116      	bne.n	800126e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001240:	4b7c      	ldr	r3, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x328>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e23f      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b76      	ldr	r3, [pc, #472]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	061b      	lsls	r3, r3, #24
 8001266:	4973      	ldr	r1, [pc, #460]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126c:	e040      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d023      	beq.n	80012be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001276:	4b6f      	ldr	r3, [pc, #444]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6e      	ldr	r2, [pc, #440]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800127c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001282:	f7ff fb41 	bl	8000908 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128a:	f7ff fb3d 	bl	8000908 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e21d      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129c:	4b65      	ldr	r3, [pc, #404]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b62      	ldr	r3, [pc, #392]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	061b      	lsls	r3, r3, #24
 80012b6:	495f      	ldr	r1, [pc, #380]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e018      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a5c      	ldr	r2, [pc, #368]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb1d 	bl	8000908 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fb19 	bl	8000908 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e1f9      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d03c      	beq.n	8001376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d01c      	beq.n	800133e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001304:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130a:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001314:	f7ff faf8 	bl	8000908 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff faf4 	bl	8000908 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1d4      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ef      	beq.n	800131c <HAL_RCC_OscConfig+0x3ec>
 800133c:	e01b      	b.n	8001376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001344:	4a3b      	ldr	r2, [pc, #236]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001346:	f023 0301 	bic.w	r3, r3, #1
 800134a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134e:	f7ff fadb 	bl	8000908 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fad7 	bl	8000908 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1b7      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001368:	4b32      	ldr	r3, [pc, #200]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800136a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1ef      	bne.n	8001356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 80a6 	beq.w	80014d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10d      	bne.n	80013b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001398:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139e:	6593      	str	r3, [r2, #88]	; 0x58
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80013a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d118      	bne.n	80013ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fa9e 	bl	8000908 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d0:	f7ff fa9a 	bl	8000908 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e17a      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x508>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_OscConfig+0x4d8>
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001406:	e029      	b.n	800145c <HAL_RCC_OscConfig+0x52c>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b05      	cmp	r3, #5
 800140e:	d115      	bne.n	800143c <HAL_RCC_OscConfig+0x50c>
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	4a03      	ldr	r2, [pc, #12]	; (8001434 <HAL_RCC_OscConfig+0x504>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001430:	e014      	b.n	800145c <HAL_RCC_OscConfig+0x52c>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	4b9c      	ldr	r3, [pc, #624]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001442:	4a9b      	ldr	r2, [pc, #620]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800144c:	4b98      	ldr	r3, [pc, #608]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001452:	4a97      	ldr	r2, [pc, #604]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d016      	beq.n	8001492 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fa50 	bl	8000908 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fa4c 	bl	8000908 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e12a      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ed      	beq.n	800146c <HAL_RCC_OscConfig+0x53c>
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fa39 	bl	8000908 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fa35 	bl	8000908 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e113      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b0:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1ed      	bne.n	800149a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4b7a      	ldr	r3, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a79      	ldr	r2, [pc, #484]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80014ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80fe 	beq.w	80016d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	2b02      	cmp	r3, #2
 80014e0:	f040 80d0 	bne.w	8001684 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014e4:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d130      	bne.n	800155a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	3b01      	subs	r3, #1
 8001504:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d127      	bne.n	800155a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001514:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001516:	429a      	cmp	r2, r3
 8001518:	d11f      	bne.n	800155a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001524:	2a07      	cmp	r2, #7
 8001526:	bf14      	ite	ne
 8001528:	2201      	movne	r2, #1
 800152a:	2200      	moveq	r2, #0
 800152c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800152e:	4293      	cmp	r3, r2
 8001530:	d113      	bne.n	800155a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	3b01      	subs	r3, #1
 8001540:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d109      	bne.n	800155a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	3b01      	subs	r3, #1
 8001554:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001556:	429a      	cmp	r2, r3
 8001558:	d06e      	beq.n	8001638 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d069      	beq.n	8001634 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e0ad      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800157c:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001586:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001588:	f7ff f9be 	bl	8000908 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff f9ba 	bl	8000908 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e09a      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ae:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4b40      	ldr	r3, [pc, #256]	; (80016b4 <HAL_RCC_OscConfig+0x784>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015be:	3a01      	subs	r2, #1
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	4311      	orrs	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015c8:	0212      	lsls	r2, r2, #8
 80015ca:	4311      	orrs	r1, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015d0:	0852      	lsrs	r2, r2, #1
 80015d2:	3a01      	subs	r2, #1
 80015d4:	0552      	lsls	r2, r2, #21
 80015d6:	4311      	orrs	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015dc:	0852      	lsrs	r2, r2, #1
 80015de:	3a01      	subs	r2, #1
 80015e0:	0652      	lsls	r2, r2, #25
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015e8:	0912      	lsrs	r2, r2, #4
 80015ea:	0452      	lsls	r2, r2, #17
 80015ec:	430a      	orrs	r2, r1
 80015ee:	4930      	ldr	r1, [pc, #192]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2d      	ldr	r2, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800160a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800160c:	f7ff f97c 	bl	8000908 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff f978 	bl	8000908 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e058      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001632:	e050      	b.n	80016d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e04f      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d148      	bne.n	80016d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800165c:	f7ff f954 	bl	8000908 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f950 	bl	8000908 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e030      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x734>
 8001682:	e028      	b.n	80016d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d023      	beq.n	80016d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_RCC_OscConfig+0x780>)
 8001690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff f937 	bl	8000908 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169c:	e00c      	b.n	80016b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff f933 	bl	8000908 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d905      	bls.n	80016b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e013      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
 80016b0:	40021000 	.word	0x40021000
 80016b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_RCC_OscConfig+0x7b0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ec      	bne.n	800169e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_RCC_OscConfig+0x7b0>)
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	4905      	ldr	r1, [pc, #20]	; (80016e0 <HAL_RCC_OscConfig+0x7b0>)
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x7b4>)
 80016cc:	4013      	ands	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
 80016d0:	e001      	b.n	80016d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	feeefffc 	.word	0xfeeefffc

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0e7      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b75      	ldr	r3, [pc, #468]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d910      	bls.n	800172c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 0207 	bic.w	r2, r3, #7
 8001712:	4970      	ldr	r1, [pc, #448]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b6e      	ldr	r3, [pc, #440]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cf      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d010      	beq.n	800175a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001744:	429a      	cmp	r2, r3
 8001746:	d908      	bls.n	800175a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4960      	ldr	r1, [pc, #384]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d04c      	beq.n	8001800 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d121      	bne.n	80017be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0a6      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b54      	ldr	r3, [pc, #336]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d115      	bne.n	80017be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e09a      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e08e      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e086      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4943      	ldr	r1, [pc, #268]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017d0:	f7ff f89a 	bl	8000908 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff f896 	bl	8000908 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e06e      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d010      	beq.n	800182e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001818:	429a      	cmp	r2, r3
 800181a:	d208      	bcs.n	800182e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	492b      	ldr	r1, [pc, #172]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182e:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d210      	bcs.n	800185e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 0207 	bic.w	r2, r3, #7
 8001844:	4923      	ldr	r1, [pc, #140]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_RCC_ClockConfig+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e036      	b.n	80018cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	4918      	ldr	r1, [pc, #96]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4910      	ldr	r1, [pc, #64]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800189c:	f000 f824 	bl	80018e8 <HAL_RCC_GetSysClockFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	490b      	ldr	r1, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1f4>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1fc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fec5 	bl	8000650 <HAL_InitTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018ca:	7afb      	ldrb	r3, [r7, #11]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08006e70 	.word	0x08006e70
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f6:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x34>
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d121      	bne.n	800195a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d11e      	bne.n	800195a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800191c:	4b34      	ldr	r3, [pc, #208]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001928:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e005      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10d      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d102      	bne.n	8001966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	e004      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b08      	cmp	r3, #8
 800196a:	d101      	bne.n	8001970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_RCC_GetSysClockFreq+0x114>)
 800196e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d134      	bne.n	80019e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0xa6>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d003      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0xac>
 800198c:	e005      	b.n	800199a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001990:	617b      	str	r3, [r7, #20]
      break;
 8001992:	e005      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_GetSysClockFreq+0x114>)
 8001996:	617b      	str	r3, [r7, #20]
      break;
 8001998:	e002      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	617b      	str	r3, [r7, #20]
      break;
 800199e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	3301      	adds	r3, #1
 80019ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	fb03 f202 	mul.w	r2, r3, r2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	0e5b      	lsrs	r3, r3, #25
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	3301      	adds	r3, #1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019e0:	69bb      	ldr	r3, [r7, #24]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08006e88 	.word	0x08006e88
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200

08001a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a1c:	f7ff fff0 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a2e:	5ccb      	ldrb	r3, [r1, r3]
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	08006e80 	.word	0x08006e80

08001a44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	220f      	movs	r2, #15
 8001a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	08db      	lsrs	r3, r3, #3
 8001a7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_RCC_GetClockConfig+0x60>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0207 	and.w	r2, r3, #7
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ac0:	f7ff f9d2 	bl	8000e68 <HAL_PWREx_GetVoltageRange>
 8001ac4:	6178      	str	r0, [r7, #20]
 8001ac6:	e014      	b.n	8001af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	4a24      	ldr	r2, [pc, #144]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ae0:	f7ff f9c2 	bl	8000e68 <HAL_PWREx_GetVoltageRange>
 8001ae4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af8:	d10b      	bne.n	8001b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b80      	cmp	r3, #128	; 0x80
 8001afe:	d919      	bls.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2ba0      	cmp	r3, #160	; 0xa0
 8001b04:	d902      	bls.n	8001b0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b06:	2302      	movs	r3, #2
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	e013      	b.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	e010      	b.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b80      	cmp	r3, #128	; 0x80
 8001b16:	d902      	bls.n	8001b1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b18:	2303      	movs	r3, #3
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	e00a      	b.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b80      	cmp	r3, #128	; 0x80
 8001b22:	d102      	bne.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b24:	2302      	movs	r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	e004      	b.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b70      	cmp	r3, #112	; 0x70
 8001b2e:	d101      	bne.n	8001b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b30:	2301      	movs	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 0207 	bic.w	r2, r3, #7
 8001b3c:	4909      	ldr	r1, [pc, #36]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40022000 	.word	0x40022000

08001b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e049      	b.n	8001c0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f841 	bl	8001c16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	f000 f9da 	bl	8001f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d001      	beq.n	8001c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e04f      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a23      	ldr	r2, [pc, #140]	; (8001cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01d      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x76>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c6e:	d018      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x76>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1f      	ldr	r2, [pc, #124]	; (8001cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x76>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00e      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x76>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d009      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x76>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d004      	beq.n	8001ca2 <HAL_TIM_Base_Start_IT+0x76>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d115      	bne.n	8001cce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b06      	cmp	r3, #6
 8001cb2:	d015      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cba:	d011      	beq.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ccc:	e008      	b.n	8001ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e000      	b.n	8001ce2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40012c00 	.word	0x40012c00
 8001cf4:	40000400 	.word	0x40000400
 8001cf8:	40000800 	.word	0x40000800
 8001cfc:	40000c00 	.word	0x40000c00
 8001d00:	40013400 	.word	0x40013400
 8001d04:	40014000 	.word	0x40014000
 8001d08:	00010007 	.word	0x00010007

08001d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d020      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d01b      	beq.n	8001d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0202 	mvn.w	r2, #2
 8001d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8e4 	bl	8001f24 <HAL_TIM_IC_CaptureCallback>
 8001d5c:	e005      	b.n	8001d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8d6 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8e7 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d020      	beq.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01b      	beq.n	8001dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0204 	mvn.w	r2, #4
 8001d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f8be 	bl	8001f24 <HAL_TIM_IC_CaptureCallback>
 8001da8:	e005      	b.n	8001db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f8b0 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f8c1 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d020      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 0208 	mvn.w	r2, #8
 8001dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f898 	bl	8001f24 <HAL_TIM_IC_CaptureCallback>
 8001df4:	e005      	b.n	8001e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f88a 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f89b 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d020      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0210 	mvn.w	r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f872 	bl	8001f24 <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f864 	bl	8001f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f875 	bl	8001f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0201 	mvn.w	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7fe fbb0 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f906 	bl	80020a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8fe 	bl	80020bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f834 	bl	8001f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0320 	and.w	r3, r3, #32
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0220 	mvn.w	r2, #32
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8c6 	bl	8002094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <TIM_Base_SetConfig+0x114>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d013      	beq.n	8001fa0 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7e:	d00f      	beq.n	8001fa0 <TIM_Base_SetConfig+0x40>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <TIM_Base_SetConfig+0x118>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d00b      	beq.n	8001fa0 <TIM_Base_SetConfig+0x40>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3c      	ldr	r2, [pc, #240]	; (800207c <TIM_Base_SetConfig+0x11c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d007      	beq.n	8001fa0 <TIM_Base_SetConfig+0x40>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <TIM_Base_SetConfig+0x120>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <TIM_Base_SetConfig+0x40>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3a      	ldr	r2, [pc, #232]	; (8002084 <TIM_Base_SetConfig+0x124>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d108      	bne.n	8001fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2f      	ldr	r2, [pc, #188]	; (8002074 <TIM_Base_SetConfig+0x114>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01f      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d01b      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	; (8002078 <TIM_Base_SetConfig+0x118>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d017      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a2b      	ldr	r2, [pc, #172]	; (800207c <TIM_Base_SetConfig+0x11c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a2a      	ldr	r2, [pc, #168]	; (8002080 <TIM_Base_SetConfig+0x120>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a29      	ldr	r2, [pc, #164]	; (8002084 <TIM_Base_SetConfig+0x124>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00b      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <TIM_Base_SetConfig+0x128>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <TIM_Base_SetConfig+0x12c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0x9a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a26      	ldr	r2, [pc, #152]	; (8002090 <TIM_Base_SetConfig+0x130>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <TIM_Base_SetConfig+0x114>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00f      	beq.n	8002058 <TIM_Base_SetConfig+0xf8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <TIM_Base_SetConfig+0x124>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00b      	beq.n	8002058 <TIM_Base_SetConfig+0xf8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <TIM_Base_SetConfig+0x128>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <TIM_Base_SetConfig+0xf8>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a10      	ldr	r2, [pc, #64]	; (800208c <TIM_Base_SetConfig+0x12c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d003      	beq.n	8002058 <TIM_Base_SetConfig+0xf8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a0f      	ldr	r2, [pc, #60]	; (8002090 <TIM_Base_SetConfig+0x130>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d103      	bne.n	8002060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	615a      	str	r2, [r3, #20]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40012c00 	.word	0x40012c00
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800
 8002080:	40000c00 	.word	0x40000c00
 8002084:	40013400 	.word	0x40013400
 8002088:	40014000 	.word	0x40014000
 800208c:	40014400 	.word	0x40014400
 8002090:	40014800 	.word	0x40014800

08002094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f103 0208 	add.w	r2, r3, #8
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f103 0208 	add.w	r2, r3, #8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f103 0208 	add.w	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6892      	ldr	r2, [r2, #8]
 8002140:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6852      	ldr	r2, [r2, #4]
 800214a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	429a      	cmp	r2, r3
 8002154:	d103      	bne.n	800215e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800217e:	b580      	push	{r7, lr}
 8002180:	b08c      	sub	sp, #48	; 0x30
 8002182:	af04      	add	r7, sp, #16
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4618      	mov	r0, r3
 8002194:	f001 f812 	bl	80031bc <pvPortMalloc>
 8002198:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021a0:	2068      	movs	r0, #104	; 0x68
 80021a2:	f001 f80b 	bl	80031bc <pvPortMalloc>
 80021a6:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80021ae:	2268      	movs	r2, #104	; 0x68
 80021b0:	2100      	movs	r1, #0
 80021b2:	69f8      	ldr	r0, [r7, #28]
 80021b4:	f003 ffd8 	bl	8006168 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
 80021be:	e005      	b.n	80021cc <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f001 f8b5 	bl	8003330 <vPortFree>
 80021c6:	e001      	b.n	80021cc <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d013      	beq.n	80021fa <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021d2:	88fa      	ldrh	r2, [r7, #6]
 80021d4:	2300      	movs	r3, #0
 80021d6:	9303      	str	r3, [sp, #12]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	9302      	str	r3, [sp, #8]
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f80e 	bl	800220a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021ee:	69f8      	ldr	r0, [r7, #28]
 80021f0:	f000 f89a 	bl	8002328 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	e002      	b.n	8002200 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002200:	69bb      	ldr	r3, [r7, #24]
    }
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b088      	sub	sp, #32
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	21a5      	movs	r1, #165	; 0xa5
 8002224:	f003 ffa0 	bl	8006168 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002232:	3b01      	subs	r3, #1
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	f023 0307 	bic.w	r3, r3, #7
 8002240:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <prvInitialiseNewTask+0x58>
        __asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	617b      	str	r3, [r7, #20]
    }
 800225e:	bf00      	nop
 8002260:	e7fe      	b.n	8002260 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01e      	beq.n	80022a6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	e012      	b.n	8002294 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4413      	add	r3, r2
 8002274:	7819      	ldrb	r1, [r3, #0]
 8002276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	3334      	adds	r3, #52	; 0x34
 800227e:	460a      	mov	r2, r1
 8002280:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3301      	adds	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	2b09      	cmp	r3, #9
 8002298:	d9e9      	bls.n	800226e <prvInitialiseNewTask+0x64>
 800229a:	e000      	b.n	800229e <prvInitialiseNewTask+0x94>
            {
                break;
 800229c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d90a      	bls.n	80022c2 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	613b      	str	r3, [r7, #16]
    }
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d901      	bls.n	80022cc <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022c8:	2304      	movs	r3, #4
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d6:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	3304      	adds	r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff17 	bl	8002110 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e4:	3318      	adds	r3, #24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff12 	bl	8002110 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	f1c3 0205 	rsb	r2, r3, #5
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	69b8      	ldr	r0, [r7, #24]
 8002308:	f000 fc82 	bl	8002c10 <pxPortInitialiseStack>
 800230c:	4602      	mov	r2, r0
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800231e:	bf00      	nop
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002330:	f000 fe18 	bl	8002f64 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002334:	4b49      	ldr	r3, [pc, #292]	; (800245c <prvAddNewTaskToReadyList+0x134>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a48      	ldr	r2, [pc, #288]	; (800245c <prvAddNewTaskToReadyList+0x134>)
 800233c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <prvAddNewTaskToReadyList+0x138>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <prvAddNewTaskToReadyList+0x138>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800234c:	4b43      	ldr	r3, [pc, #268]	; (800245c <prvAddNewTaskToReadyList+0x134>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d110      	bne.n	8002376 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002354:	f000 fb8a 	bl	8002a6c <prvInitialiseTaskLists>
 8002358:	e00d      	b.n	8002376 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800235a:	4b42      	ldr	r3, [pc, #264]	; (8002464 <prvAddNewTaskToReadyList+0x13c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <prvAddNewTaskToReadyList+0x138>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	429a      	cmp	r2, r3
 800236e:	d802      	bhi.n	8002376 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002370:	4a3b      	ldr	r2, [pc, #236]	; (8002460 <prvAddNewTaskToReadyList+0x138>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002376:	4b3c      	ldr	r3, [pc, #240]	; (8002468 <prvAddNewTaskToReadyList+0x140>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <prvAddNewTaskToReadyList+0x140>)
 800237e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002380:	4b39      	ldr	r3, [pc, #228]	; (8002468 <prvAddNewTaskToReadyList+0x140>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <prvAddNewTaskToReadyList+0x94>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fa53 	bl	800583c <SEGGER_SYSVIEW_OnTaskCreate>
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	461d      	mov	r5, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461c      	mov	r4, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	1ae3      	subs	r3, r4, r3
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	462b      	mov	r3, r5
 80023b8:	f001 f992 	bl	80036e0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fac0 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <prvAddNewTaskToReadyList+0x144>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	4a26      	ldr	r2, [pc, #152]	; (800246c <prvAddNewTaskToReadyList+0x144>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	4925      	ldr	r1, [pc, #148]	; (8002470 <prvAddNewTaskToReadyList+0x148>)
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	3204      	adds	r2, #4
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4a15      	ldr	r2, [pc, #84]	; (8002470 <prvAddNewTaskToReadyList+0x148>)
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	4912      	ldr	r1, [pc, #72]	; (8002470 <prvAddNewTaskToReadyList+0x148>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <prvAddNewTaskToReadyList+0x148>)
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4403      	add	r3, r0
 8002440:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002442:	f000 fdbf 	bl	8002fc4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <prvAddNewTaskToReadyList+0x13c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <prvAddNewTaskToReadyList+0x138>)
 8002450:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bdb0      	pop	{r4, r5, r7, pc}
 800245a:	bf00      	nop
 800245c:	200001bc 	.word	0x200001bc
 8002460:	200000e4 	.word	0x200000e4
 8002464:	200001c8 	.word	0x200001c8
 8002468:	200001d8 	.word	0x200001d8
 800246c:	200001c4 	.word	0x200001c4
 8002470:	200000e8 	.word	0x200000e8

08002474 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <vTaskStartScheduler+0x98>)
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	2300      	movs	r3, #0
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002488:	4921      	ldr	r1, [pc, #132]	; (8002510 <vTaskStartScheduler+0x9c>)
 800248a:	4822      	ldr	r0, [pc, #136]	; (8002514 <vTaskStartScheduler+0xa0>)
 800248c:	f7ff fe77 	bl	800217e <xTaskCreate>
 8002490:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d124      	bne.n	80024e2 <vTaskStartScheduler+0x6e>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	60bb      	str	r3, [r7, #8]
    }
 80024aa:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80024ac:	4b1a      	ldr	r3, [pc, #104]	; (8002518 <vTaskStartScheduler+0xa4>)
 80024ae:	f04f 32ff 	mov.w	r2, #4294967295
 80024b2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <vTaskStartScheduler+0xa8>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <vTaskStartScheduler+0xac>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <vTaskStartScheduler+0xb0>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <vTaskStartScheduler+0x98>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d102      	bne.n	80024d2 <vTaskStartScheduler+0x5e>
 80024cc:	f003 f99a 	bl	8005804 <SEGGER_SYSVIEW_OnIdle>
 80024d0:	e004      	b.n	80024dc <vTaskStartScheduler+0x68>
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <vTaskStartScheduler+0xb0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 f9f2 	bl	80058c0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80024dc:	f000 fc22 	bl	8002d24 <xPortStartScheduler>
 80024e0:	e00e      	b.n	8002500 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d10a      	bne.n	8002500 <vTaskStartScheduler+0x8c>
        __asm volatile
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	607b      	str	r3, [r7, #4]
    }
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <vTaskStartScheduler+0xb4>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200001e0 	.word	0x200001e0
 8002510:	08006da4 	.word	0x08006da4
 8002514:	08002a49 	.word	0x08002a49
 8002518:	200001dc 	.word	0x200001dc
 800251c:	200001c8 	.word	0x200001c8
 8002520:	200001c0 	.word	0x200001c0
 8002524:	200000e4 	.word	0x200000e4
 8002528:	2000000c 	.word	0x2000000c

0800252c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <vTaskSuspendAll+0x18>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <vTaskSuspendAll+0x18>)
 8002538:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	200001e4 	.word	0x200001e4

08002548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002556:	4b6d      	ldr	r3, [pc, #436]	; (800270c <xTaskResumeAll+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <xTaskResumeAll+0x2c>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	607b      	str	r3, [r7, #4]
    }
 8002570:	bf00      	nop
 8002572:	e7fe      	b.n	8002572 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002574:	f000 fcf6 	bl	8002f64 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002578:	4b64      	ldr	r3, [pc, #400]	; (800270c <xTaskResumeAll+0x1c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3b01      	subs	r3, #1
 800257e:	4a63      	ldr	r2, [pc, #396]	; (800270c <xTaskResumeAll+0x1c4>)
 8002580:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002582:	4b62      	ldr	r3, [pc, #392]	; (800270c <xTaskResumeAll+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80b8 	bne.w	80026fc <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800258c:	4b60      	ldr	r3, [pc, #384]	; (8002710 <xTaskResumeAll+0x1c8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80b3 	beq.w	80026fc <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002596:	e08e      	b.n	80026b6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <xTaskResumeAll+0x1cc>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	6a12      	ldr	r2, [r2, #32]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	69d2      	ldr	r2, [r2, #28]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3318      	adds	r3, #24
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d103      	bne.n	80025ce <xTaskResumeAll+0x86>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	6a1a      	ldr	r2, [r3, #32]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1e5a      	subs	r2, r3, #1
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	68d2      	ldr	r2, [r2, #12]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3304      	adds	r3, #4
 8002600:	429a      	cmp	r2, r3
 8002602:	d103      	bne.n	800260c <xTaskResumeAll+0xc4>
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 f990 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2201      	movs	r2, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	4b3a      	ldr	r3, [pc, #232]	; (8002718 <xTaskResumeAll+0x1d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	4a39      	ldr	r2, [pc, #228]	; (8002718 <xTaskResumeAll+0x1d0>)
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263a:	4938      	ldr	r1, [pc, #224]	; (800271c <xTaskResumeAll+0x1d4>)
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	3304      	adds	r3, #4
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	3204      	adds	r2, #4
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <xTaskResumeAll+0x1d4>)
 800267a:	441a      	add	r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	4925      	ldr	r1, [pc, #148]	; (800271c <xTaskResumeAll+0x1d4>)
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	1c59      	adds	r1, r3, #1
 8002694:	4821      	ldr	r0, [pc, #132]	; (800271c <xTaskResumeAll+0x1d4>)
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4403      	add	r3, r0
 80026a0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <xTaskResumeAll+0x1d8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <xTaskResumeAll+0x1dc>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <xTaskResumeAll+0x1cc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f47f af6c 	bne.w	8002598 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026c6:	f000 fa87 	bl	8002bd8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <xTaskResumeAll+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026d6:	f000 f83b 	bl	8002750 <xTaskIncrementTick>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <xTaskResumeAll+0x1dc>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f1      	bne.n	80026d6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <xTaskResumeAll+0x1e0>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <xTaskResumeAll+0x1dc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80026fc:	f000 fc62 	bl	8002fc4 <vPortExitCritical>

    return xAlreadyYielded;
 8002700:	697b      	ldr	r3, [r7, #20]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200001e4 	.word	0x200001e4
 8002710:	200001bc 	.word	0x200001bc
 8002714:	2000017c 	.word	0x2000017c
 8002718:	200001c4 	.word	0x200001c4
 800271c:	200000e8 	.word	0x200000e8
 8002720:	200000e4 	.word	0x200000e4
 8002724:	200001d0 	.word	0x200001d0
 8002728:	200001cc 	.word	0x200001cc

0800272c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002732:	f000 fd03 	bl	800313c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <xTaskGetTickCountFromISR+0x20>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002740:	683b      	ldr	r3, [r7, #0]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200001c0 	.word	0x200001c0

08002750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800275a:	4b70      	ldr	r3, [pc, #448]	; (800291c <xTaskIncrementTick+0x1cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 80d1 	bne.w	8002906 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002764:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <xTaskIncrementTick+0x1d0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800276c:	4a6c      	ldr	r2, [pc, #432]	; (8002920 <xTaskIncrementTick+0x1d0>)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d120      	bne.n	80027ba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002778:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <xTaskIncrementTick+0x1d4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <xTaskIncrementTick+0x48>
        __asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	607b      	str	r3, [r7, #4]
    }
 8002794:	bf00      	nop
 8002796:	e7fe      	b.n	8002796 <xTaskIncrementTick+0x46>
 8002798:	4b62      	ldr	r3, [pc, #392]	; (8002924 <xTaskIncrementTick+0x1d4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	4b62      	ldr	r3, [pc, #392]	; (8002928 <xTaskIncrementTick+0x1d8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a60      	ldr	r2, [pc, #384]	; (8002924 <xTaskIncrementTick+0x1d4>)
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4a60      	ldr	r2, [pc, #384]	; (8002928 <xTaskIncrementTick+0x1d8>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b5f      	ldr	r3, [pc, #380]	; (800292c <xTaskIncrementTick+0x1dc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a5e      	ldr	r2, [pc, #376]	; (800292c <xTaskIncrementTick+0x1dc>)
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	f000 fa0f 	bl	8002bd8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027ba:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <xTaskIncrementTick+0x1e0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f0c0 80a5 	bcc.w	8002910 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <xTaskIncrementTick+0x1d4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d0:	4b57      	ldr	r3, [pc, #348]	; (8002930 <xTaskIncrementTick+0x1e0>)
 80027d2:	f04f 32ff 	mov.w	r2, #4294967295
 80027d6:	601a      	str	r2, [r3, #0]
                    break;
 80027d8:	e09a      	b.n	8002910 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027da:	4b52      	ldr	r3, [pc, #328]	; (8002924 <xTaskIncrementTick+0x1d4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80027ea:	6a3a      	ldr	r2, [r7, #32]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d203      	bcs.n	80027fa <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80027f2:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <xTaskIncrementTick+0x1e0>)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80027f8:	e08a      	b.n	8002910 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	68d2      	ldr	r2, [r2, #12]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	3304      	adds	r3, #4
 800281c:	429a      	cmp	r2, r3
 800281e:	d103      	bne.n	8002828 <xTaskIncrementTick+0xd8>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	1e5a      	subs	r2, r3, #1
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01e      	beq.n	800287e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	6a12      	ldr	r2, [r2, #32]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	69d2      	ldr	r2, [r2, #28]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	3318      	adds	r3, #24
 8002862:	429a      	cmp	r2, r3
 8002864:	d103      	bne.n	800286e <xTaskIncrementTick+0x11e>
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2200      	movs	r2, #0
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4618      	mov	r0, r3
 8002882:	f003 f85f 	bl	8005944 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	4b29      	ldr	r3, [pc, #164]	; (8002934 <xTaskIncrementTick+0x1e4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	4a27      	ldr	r2, [pc, #156]	; (8002934 <xTaskIncrementTick+0x1e4>)
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	4926      	ldr	r1, [pc, #152]	; (8002938 <xTaskIncrementTick+0x1e8>)
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3304      	adds	r3, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	3204      	adds	r2, #4
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4a17      	ldr	r2, [pc, #92]	; (8002938 <xTaskIncrementTick+0x1e8>)
 80028dc:	441a      	add	r2, r3
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e6:	4914      	ldr	r1, [pc, #80]	; (8002938 <xTaskIncrementTick+0x1e8>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1c59      	adds	r1, r3, #1
 80028f6:	4810      	ldr	r0, [pc, #64]	; (8002938 <xTaskIncrementTick+0x1e8>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4403      	add	r3, r0
 8002902:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002904:	e75f      	b.n	80027c6 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <xTaskIncrementTick+0x1ec>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <xTaskIncrementTick+0x1ec>)
 800290e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002912:	4618      	mov	r0, r3
 8002914:	3728      	adds	r7, #40	; 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	200001e4 	.word	0x200001e4
 8002920:	200001c0 	.word	0x200001c0
 8002924:	20000174 	.word	0x20000174
 8002928:	20000178 	.word	0x20000178
 800292c:	200001d4 	.word	0x200001d4
 8002930:	200001dc 	.word	0x200001dc
 8002934:	200001c4 	.word	0x200001c4
 8002938:	200000e8 	.word	0x200000e8
 800293c:	200001cc 	.word	0x200001cc

08002940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002946:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <vTaskSwitchContext+0xe8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <vTaskSwitchContext+0xec>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002954:	e064      	b.n	8002a20 <vTaskSwitchContext+0xe0>
        xYieldPending = pdFALSE;
 8002956:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <vTaskSwitchContext+0xec>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <vTaskSwitchContext+0xf0>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <vTaskSwitchContext+0xf0>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <vTaskSwitchContext+0xf4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d909      	bls.n	8002982 <vTaskSwitchContext+0x42>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800296e:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <vTaskSwitchContext+0xf0>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <vTaskSwitchContext+0xf4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1ad1      	subs	r1, r2, r3
 8002978:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <vTaskSwitchContext+0xf8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800297e:	440a      	add	r2, r1
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c
            ulTaskSwitchedInTime = ulTotalRunTime;
 8002982:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <vTaskSwitchContext+0xf0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <vTaskSwitchContext+0xf4>)
 8002988:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298a:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <vTaskSwitchContext+0xfc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002998:	7afb      	ldrb	r3, [r7, #11]
 800299a:	f1c3 031f 	rsb	r3, r3, #31
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	4927      	ldr	r1, [pc, #156]	; (8002a40 <vTaskSwitchContext+0x100>)
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <vTaskSwitchContext+0x8a>
        __asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	607b      	str	r3, [r7, #4]
    }
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <vTaskSwitchContext+0x88>
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <vTaskSwitchContext+0x100>)
 80029d6:	4413      	add	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	3308      	adds	r3, #8
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d104      	bne.n	80029fa <vTaskSwitchContext+0xba>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <vTaskSwitchContext+0xf8>)
 8002a02:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <vTaskSwitchContext+0xf8>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <vTaskSwitchContext+0x104>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d102      	bne.n	8002a16 <vTaskSwitchContext+0xd6>
 8002a10:	f002 fef8 	bl	8005804 <SEGGER_SYSVIEW_OnIdle>
}
 8002a14:	e004      	b.n	8002a20 <vTaskSwitchContext+0xe0>
        traceTASK_SWITCHED_IN();
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <vTaskSwitchContext+0xf8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 ff50 	bl	80058c0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200001e4 	.word	0x200001e4
 8002a2c:	200001d0 	.word	0x200001d0
 8002a30:	200001ec 	.word	0x200001ec
 8002a34:	200001e8 	.word	0x200001e8
 8002a38:	200000e4 	.word	0x200000e4
 8002a3c:	200001c4 	.word	0x200001c4
 8002a40:	200000e8 	.word	0x200000e8
 8002a44:	200001e0 	.word	0x200001e0

08002a48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a50:	f000 f84c 	bl	8002aec <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <prvIdleTask+0x20>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a64:	e7f4      	b.n	8002a50 <prvIdleTask+0x8>
 8002a66:	bf00      	nop
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	e00c      	b.n	8002a92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4a12      	ldr	r2, [pc, #72]	; (8002acc <prvInitialiseTaskLists+0x60>)
 8002a84:	4413      	add	r3, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fb22 	bl	80020d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d9ef      	bls.n	8002a78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002a9a:	f7ff fb19 	bl	80020d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a9e:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <prvInitialiseTaskLists+0x68>)
 8002aa0:	f7ff fb16 	bl	80020d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <prvInitialiseTaskLists+0x6c>)
 8002aa6:	f7ff fb13 	bl	80020d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002aaa:	480c      	ldr	r0, [pc, #48]	; (8002adc <prvInitialiseTaskLists+0x70>)
 8002aac:	f7ff fb10 	bl	80020d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ab0:	480b      	ldr	r0, [pc, #44]	; (8002ae0 <prvInitialiseTaskLists+0x74>)
 8002ab2:	f7ff fb0d 	bl	80020d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <prvInitialiseTaskLists+0x78>)
 8002ab8:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <prvInitialiseTaskLists+0x64>)
 8002aba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <prvInitialiseTaskLists+0x7c>)
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <prvInitialiseTaskLists+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200000e8 	.word	0x200000e8
 8002ad0:	2000014c 	.word	0x2000014c
 8002ad4:	20000160 	.word	0x20000160
 8002ad8:	2000017c 	.word	0x2000017c
 8002adc:	20000190 	.word	0x20000190
 8002ae0:	200001a8 	.word	0x200001a8
 8002ae4:	20000174 	.word	0x20000174
 8002ae8:	20000178 	.word	0x20000178

08002aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002af2:	e019      	b.n	8002b28 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002af4:	f000 fa36 	bl	8002f64 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <prvCheckTasksWaitingTermination+0x50>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fb10 	bl	800212a <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <prvCheckTasksWaitingTermination+0x54>)
 8002b12:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <prvCheckTasksWaitingTermination+0x58>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <prvCheckTasksWaitingTermination+0x58>)
 8002b1c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002b1e:	f000 fa51 	bl	8002fc4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f848 	bl	8002bb8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <prvCheckTasksWaitingTermination+0x58>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e1      	bne.n	8002af4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000190 	.word	0x20000190
 8002b40:	200001bc 	.word	0x200001bc
 8002b44:	200001a4 	.word	0x200001a4

08002b48 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002b54:	e005      	b.n	8002b62 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
            ulCount++;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2ba5      	cmp	r3, #165	; 0xa5
 8002b68:	d0f5      	beq.n	8002b56 <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	b29b      	uxth	r3, r3
    }
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <uxTaskGetStackHighWaterMark+0x14>
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <uxTaskGetStackHighWaterMark+0x34>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e000      	b.n	8002b96 <uxTaskGetStackHighWaterMark+0x16>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002b9e:	6938      	ldr	r0, [r7, #16]
 8002ba0:	f7ff ffd2 	bl	8002b48 <prvTaskCheckFreeStackSpace>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
    }
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200000e4 	.word	0x200000e4

08002bb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fbb3 	bl	8003330 <vPortFree>
            vPortFree( pxTCB );
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fbb0 	bl	8003330 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <prvResetNextTaskUnblockTime+0x30>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <prvResetNextTaskUnblockTime+0x34>)
 8002be8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002bee:	e005      	b.n	8002bfc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <prvResetNextTaskUnblockTime+0x30>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <prvResetNextTaskUnblockTime+0x34>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000174 	.word	0x20000174
 8002c0c:	200001dc 	.word	0x200001dc

08002c10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3b04      	subs	r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3b04      	subs	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f023 0201 	bic.w	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3b04      	subs	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c40:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <pxPortInitialiseStack+0x64>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3b14      	subs	r3, #20
 8002c4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3b04      	subs	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f06f 0202 	mvn.w	r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b20      	subs	r3, #32
 8002c64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	08002c79 	.word	0x08002c79

08002c78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <prvTaskExitError+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d00a      	beq.n	8002ca2 <prvTaskExitError+0x2a>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	60fb      	str	r3, [r7, #12]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <prvTaskExitError+0x28>
        __asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	60bb      	str	r3, [r7, #8]
    }
 8002cb4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002cb6:	bf00      	nop
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0fc      	beq.n	8002cb8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	20000010 	.word	0x20000010

08002cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <pxCurrentTCBConst2>)
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	f380 8809 	msr	PSP, r0
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	4770      	bx	lr
 8002cec:	f3af 8000 	nop.w

08002cf0 <pxCurrentTCBConst2>:
 8002cf0:	200000e4 	.word	0x200000e4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop

08002cf8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002cf8:	4808      	ldr	r0, [pc, #32]	; (8002d1c <prvPortStartFirstTask+0x24>)
 8002cfa:	6800      	ldr	r0, [r0, #0]
 8002cfc:	6800      	ldr	r0, [r0, #0]
 8002cfe:	f380 8808 	msr	MSP, r0
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f380 8814 	msr	CONTROL, r0
 8002d0a:	b662      	cpsie	i
 8002d0c:	b661      	cpsie	f
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	df00      	svc	0
 8002d18:	bf00      	nop
 8002d1a:	0000      	.short	0x0000
 8002d1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop

08002d24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d2a:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <xPortStartScheduler+0x120>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a46      	ldr	r2, [pc, #280]	; (8002e48 <xPortStartScheduler+0x124>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d10a      	bne.n	8002d4a <xPortStartScheduler+0x26>
        __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	613b      	str	r3, [r7, #16]
    }
 8002d46:	bf00      	nop
 8002d48:	e7fe      	b.n	8002d48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	; (8002e44 <xPortStartScheduler+0x120>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3f      	ldr	r2, [pc, #252]	; (8002e4c <xPortStartScheduler+0x128>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10a      	bne.n	8002d6a <xPortStartScheduler+0x46>
        __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	60fb      	str	r3, [r7, #12]
    }
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d6a:	4b39      	ldr	r3, [pc, #228]	; (8002e50 <xPortStartScheduler+0x12c>)
 8002d6c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <xPortStartScheduler+0x130>)
 8002d90:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <xPortStartScheduler+0x134>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d98:	e009      	b.n	8002dae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <xPortStartScheduler+0x134>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	4a2d      	ldr	r2, [pc, #180]	; (8002e58 <xPortStartScheduler+0x134>)
 8002da2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b80      	cmp	r3, #128	; 0x80
 8002db8:	d0ef      	beq.n	8002d9a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002dba:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <xPortStartScheduler+0x134>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d00a      	beq.n	8002ddc <xPortStartScheduler+0xb8>
        __asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	60bb      	str	r3, [r7, #8]
    }
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <xPortStartScheduler+0x134>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <xPortStartScheduler+0x134>)
 8002de4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <xPortStartScheduler+0x134>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dee:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <xPortStartScheduler+0x134>)
 8002df0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <xPortStartScheduler+0x138>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <xPortStartScheduler+0x138>)
 8002e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <xPortStartScheduler+0x138>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <xPortStartScheduler+0x138>)
 8002e0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e12:	f000 f963 	bl	80030dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e16:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <xPortStartScheduler+0x13c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e1c:	f000 f982 	bl	8003124 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <xPortStartScheduler+0x140>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <xPortStartScheduler+0x140>)
 8002e26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e2c:	f7ff ff64 	bl	8002cf8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e30:	f7ff fd86 	bl	8002940 <vTaskSwitchContext>
    prvTaskExitError();
 8002e34:	f7ff ff20 	bl	8002c78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00
 8002e48:	410fc271 	.word	0x410fc271
 8002e4c:	410fc270 	.word	0x410fc270
 8002e50:	e000e400 	.word	0xe000e400
 8002e54:	200001f0 	.word	0x200001f0
 8002e58:	200001f4 	.word	0x200001f4
 8002e5c:	e000ed20 	.word	0xe000ed20
 8002e60:	20000010 	.word	0x20000010
 8002e64:	e000ef34 	.word	0xe000ef34

08002e68 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <vInitPrioGroupValue+0xe4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a37      	ldr	r2, [pc, #220]	; (8002f50 <vInitPrioGroupValue+0xe8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d10a      	bne.n	8002e8e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	613b      	str	r3, [r7, #16]
    }
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e8e:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <vInitPrioGroupValue+0xe4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a30      	ldr	r2, [pc, #192]	; (8002f54 <vInitPrioGroupValue+0xec>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d10a      	bne.n	8002eae <vInitPrioGroupValue+0x46>
        __asm volatile
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	60fb      	str	r3, [r7, #12]
    }
 8002eaa:	bf00      	nop
 8002eac:	e7fe      	b.n	8002eac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eae:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <vInitPrioGroupValue+0xf0>)
 8002eb0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4b22      	ldr	r3, [pc, #136]	; (8002f5c <vInitPrioGroupValue+0xf4>)
 8002ed4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002edc:	e009      	b.n	8002ef2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002ee6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d0ef      	beq.n	8002ede <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002efe:	4b18      	ldr	r3, [pc, #96]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1c3 0307 	rsb	r3, r3, #7
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00a      	beq.n	8002f20 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	60bb      	str	r3, [r7, #8]
    }
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002f28:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <vInitPrioGroupValue+0xf8>)
 8002f34:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f3e:	bf00      	nop
 8002f40:	371c      	adds	r7, #28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00
 8002f50:	410fc271 	.word	0x410fc271
 8002f54:	410fc270 	.word	0x410fc270
 8002f58:	e000e400 	.word	0xe000e400
 8002f5c:	200001f0 	.word	0x200001f0
 8002f60:	200001f4 	.word	0x200001f4

08002f64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
        __asm volatile
 8002f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	607b      	str	r3, [r7, #4]
    }
 8002f7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <vPortEnterCritical+0x58>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10f      	bne.n	8002fb0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <vPortEnterCritical+0x5c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	603b      	str	r3, [r7, #0]
    }
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <vPortEnterCritical+0x4a>
    }
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	20000010 	.word	0x20000010
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <vPortExitCritical+0x50>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10a      	bne.n	8002fe8 <vPortExitCritical+0x24>
        __asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
    }
 8002fe4:	bf00      	nop
 8002fe6:	e7fe      	b.n	8002fe6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <vPortExitCritical+0x50>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <vPortExitCritical+0x50>)
 8002ff0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <vPortExitCritical+0x50>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <vPortExitCritical+0x42>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003004:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000010 	.word	0x20000010
	...

08003020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003020:	f3ef 8009 	mrs	r0, PSP
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <pxCurrentTCBConst>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f01e 0f10 	tst.w	lr, #16
 8003030:	bf08      	it	eq
 8003032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303a:	6010      	str	r0, [r2, #0]
 800303c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003044:	f380 8811 	msr	BASEPRI, r0
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f7ff fc76 	bl	8002940 <vTaskSwitchContext>
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f380 8811 	msr	BASEPRI, r0
 800305c:	bc09      	pop	{r0, r3}
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	6808      	ldr	r0, [r1, #0]
 8003062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003066:	f01e 0f10 	tst.w	lr, #16
 800306a:	bf08      	it	eq
 800306c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003070:	f380 8809 	msr	PSP, r0
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w

08003080 <pxCurrentTCBConst>:
 8003080:	200000e4 	.word	0x200000e4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop

08003088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
        __asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	607b      	str	r3, [r7, #4]
    }
 80030a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80030a2:	f002 fb35 	bl	8005710 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030a6:	f7ff fb53 	bl	8002750 <xTaskIncrementTick>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80030b0:	f002 fb8c 	bl	80057cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <SysTick_Handler+0x50>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e001      	b.n	80030c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80030be:	f002 fb69 	bl	8005794 <SEGGER_SYSVIEW_RecordExitISR>
 80030c2:	2300      	movs	r3, #0
 80030c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f383 8811 	msr	BASEPRI, r3
    }
 80030cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	e000ed04 	.word	0xe000ed04

080030dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <vPortSetupTimerInterrupt+0x34>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <vPortSetupTimerInterrupt+0x38>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <vPortSetupTimerInterrupt+0x3c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a0a      	ldr	r2, [pc, #40]	; (800311c <vPortSetupTimerInterrupt+0x40>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	099b      	lsrs	r3, r3, #6
 80030f8:	4a09      	ldr	r2, [pc, #36]	; (8003120 <vPortSetupTimerInterrupt+0x44>)
 80030fa:	3b01      	subs	r3, #1
 80030fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030fe:	4b04      	ldr	r3, [pc, #16]	; (8003110 <vPortSetupTimerInterrupt+0x34>)
 8003100:	2207      	movs	r2, #7
 8003102:	601a      	str	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000e010 	.word	0xe000e010
 8003114:	e000e018 	.word	0xe000e018
 8003118:	20000000 	.word	0x20000000
 800311c:	10624dd3 	.word	0x10624dd3
 8003120:	e000e014 	.word	0xe000e014

08003124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003134 <vPortEnableVFP+0x10>
 8003128:	6801      	ldr	r1, [r0, #0]
 800312a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800312e:	6001      	str	r1, [r0, #0]
 8003130:	4770      	bx	lr
 8003132:	0000      	.short	0x0000
 8003134:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop

0800313c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003142:	f3ef 8305 	mrs	r3, IPSR
 8003146:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	d914      	bls.n	8003178 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <vPortValidateInterruptPriority+0x70>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003158:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <vPortValidateInterruptPriority+0x74>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	7afa      	ldrb	r2, [r7, #11]
 800315e:	429a      	cmp	r2, r3
 8003160:	d20a      	bcs.n	8003178 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	607b      	str	r3, [r7, #4]
    }
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <vPortValidateInterruptPriority+0x78>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <vPortValidateInterruptPriority+0x7c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d90a      	bls.n	800319e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	603b      	str	r3, [r7, #0]
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <vPortValidateInterruptPriority+0x60>
    }
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000e3f0 	.word	0xe000e3f0
 80031b0:	200001f0 	.word	0x200001f0
 80031b4:	e000ed0c 	.word	0xe000ed0c
 80031b8:	200001f4 	.word	0x200001f4

080031bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80031c8:	f7ff f9b0 	bl	800252c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <pvPortMalloc+0x160>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031d4:	f000 f908 	bl	80033e8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80031de:	2208      	movs	r2, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	3308      	adds	r3, #8
 80031ea:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d804      	bhi.n	8003200 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	4413      	add	r3, r2
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	e001      	b.n	8003204 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	db70      	blt.n	80032ec <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d06d      	beq.n	80032ec <pvPortMalloc+0x130>
 8003210:	4b43      	ldr	r3, [pc, #268]	; (8003320 <pvPortMalloc+0x164>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	429a      	cmp	r2, r3
 8003218:	d868      	bhi.n	80032ec <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800321a:	4b42      	ldr	r3, [pc, #264]	; (8003324 <pvPortMalloc+0x168>)
 800321c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <pvPortMalloc+0x168>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003224:	e004      	b.n	8003230 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	429a      	cmp	r2, r3
 8003238:	d903      	bls.n	8003242 <pvPortMalloc+0x86>
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f1      	bne.n	8003226 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003242:	4b36      	ldr	r3, [pc, #216]	; (800331c <pvPortMalloc+0x160>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	429a      	cmp	r2, r3
 800324a:	d04f      	beq.n	80032ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2208      	movs	r2, #8
 8003252:	4413      	add	r3, r2
 8003254:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	1ad2      	subs	r2, r2, r3
 8003266:	2308      	movs	r3, #8
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	429a      	cmp	r2, r3
 800326c:	d91f      	bls.n	80032ae <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800326e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <pvPortMalloc+0xda>
        __asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	613b      	str	r3, [r7, #16]
    }
 8003292:	bf00      	nop
 8003294:	e7fe      	b.n	8003294 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	1ad2      	subs	r2, r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032a8:	6978      	ldr	r0, [r7, #20]
 80032aa:	f000 f8f9 	bl	80034a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <pvPortMalloc+0x164>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <pvPortMalloc+0x164>)
 80032ba:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <pvPortMalloc+0x164>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b19      	ldr	r3, [pc, #100]	; (8003328 <pvPortMalloc+0x16c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d203      	bcs.n	80032d0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032c8:	4b15      	ldr	r3, [pc, #84]	; (8003320 <pvPortMalloc+0x164>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a16      	ldr	r2, [pc, #88]	; (8003328 <pvPortMalloc+0x16c>)
 80032ce:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80032e2:	4b12      	ldr	r3, [pc, #72]	; (800332c <pvPortMalloc+0x170>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	4a10      	ldr	r2, [pc, #64]	; (800332c <pvPortMalloc+0x170>)
 80032ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80032ec:	f7ff f92c 	bl	8002548 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <pvPortMalloc+0x154>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60fb      	str	r3, [r7, #12]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <pvPortMalloc+0x152>
    return pvReturn;
 8003310:	69fb      	ldr	r3, [r7, #28]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20004200 	.word	0x20004200
 8003320:	20004204 	.word	0x20004204
 8003324:	200041f8 	.word	0x200041f8
 8003328:	20004208 	.word	0x20004208
 800332c:	2000420c 	.word	0x2000420c

08003330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d049      	beq.n	80033d6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003342:	2308      	movs	r3, #8
 8003344:	425b      	negs	r3, r3
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4413      	add	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	db0a      	blt.n	800336e <vPortFree+0x3e>
        __asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	60fb      	str	r3, [r7, #12]
    }
 800336a:	bf00      	nop
 800336c:	e7fe      	b.n	800336c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <vPortFree+0x5c>
        __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	60bb      	str	r3, [r7, #8]
    }
 8003388:	bf00      	nop
 800338a:	e7fe      	b.n	800338a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0fdb      	lsrs	r3, r3, #31
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01c      	beq.n	80033d6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d118      	bne.n	80033d6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80033b0:	f7ff f8bc 	bl	800252c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <vPortFree+0xb0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <vPortFree+0xb0>)
 80033c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033c2:	6938      	ldr	r0, [r7, #16]
 80033c4:	f000 f86c 	bl	80034a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <vPortFree+0xb4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <vPortFree+0xb4>)
 80033d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80033d2:	f7ff f8b9 	bl	8002548 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20004204 	.word	0x20004204
 80033e4:	20004210 	.word	0x20004210

080033e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <prvHeapInit+0xa4>)
 80033f6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00c      	beq.n	800341c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3307      	adds	r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0307 	bic.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <prvHeapInit+0xa4>)
 8003418:	4413      	add	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003420:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <prvHeapInit+0xa8>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <prvHeapInit+0xa8>)
 8003428:	2200      	movs	r2, #0
 800342a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4413      	add	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003434:	2208      	movs	r2, #8
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0307 	bic.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <prvHeapInit+0xac>)
 8003448:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <prvHeapInit+0xac>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2200      	movs	r2, #0
 8003450:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <prvHeapInit+0xac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	1ad2      	subs	r2, r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <prvHeapInit+0xac>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <prvHeapInit+0xb0>)
 8003476:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a07      	ldr	r2, [pc, #28]	; (800349c <prvHeapInit+0xb4>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	200001f8 	.word	0x200001f8
 8003490:	200041f8 	.word	0x200041f8
 8003494:	20004200 	.word	0x20004200
 8003498:	20004208 	.word	0x20004208
 800349c:	20004204 	.word	0x20004204

080034a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <prvInsertBlockIntoFreeList+0xac>)
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	e002      	b.n	80034b4 <prvInsertBlockIntoFreeList+0x14>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d8f7      	bhi.n	80034ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4413      	add	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d108      	bne.n	80034e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	441a      	add	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	441a      	add	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d118      	bne.n	8003528 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <prvInsertBlockIntoFreeList+0xb0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d00d      	beq.n	800351e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	e008      	b.n	8003530 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800351e:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <prvInsertBlockIntoFreeList+0xb0>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e003      	b.n	8003530 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d002      	beq.n	800353e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	200041f8 	.word	0x200041f8
 8003550:	20004200 	.word	0x20004200

08003554 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003558:	4803      	ldr	r0, [pc, #12]	; (8003568 <_cbSendSystemDesc+0x14>)
 800355a:	f002 f883 	bl	8005664 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800355e:	4803      	ldr	r0, [pc, #12]	; (800356c <_cbSendSystemDesc+0x18>)
 8003560:	f002 f880 	bl	8005664 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08006dac 	.word	0x08006dac
 800356c:	08006dec 	.word	0x08006dec

08003570 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <SEGGER_SYSVIEW_Conf+0x20>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <SEGGER_SYSVIEW_Conf+0x20>)
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <SEGGER_SYSVIEW_Conf+0x24>)
 800357e:	4a06      	ldr	r2, [pc, #24]	; (8003598 <SEGGER_SYSVIEW_Conf+0x28>)
 8003580:	f001 fcf4 	bl	8004f6c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003584:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003588:	f001 fd34 	bl	8004ff4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000000 	.word	0x20000000
 8003594:	08003555 	.word	0x08003555
 8003598:	08006eb8 	.word	0x08006eb8

0800359c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	b085      	sub	sp, #20
 80035a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	e048      	b.n	800363a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80035a8:	4929      	ldr	r1, [pc, #164]	; (8003650 <_cbSendTaskList+0xb4>)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fae1 	bl	8002b80 <uxTaskGetStackHighWaterMark>
 80035be:	4601      	mov	r1, r0
 80035c0:	4823      	ldr	r0, [pc, #140]	; (8003650 <_cbSendTaskList+0xb4>)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4403      	add	r3, r0
 80035ce:	3310      	adds	r3, #16
 80035d0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80035d2:	491f      	ldr	r1, [pc, #124]	; (8003650 <_cbSendTaskList+0xb4>)
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	491b      	ldr	r1, [pc, #108]	; (8003650 <_cbSendTaskList+0xb4>)
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3304      	adds	r3, #4
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	4c16      	ldr	r4, [pc, #88]	; (8003650 <_cbSendTaskList+0xb4>)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4423      	add	r3, r4
 8003602:	3308      	adds	r3, #8
 8003604:	681c      	ldr	r4, [r3, #0]
 8003606:	4d12      	ldr	r5, [pc, #72]	; (8003650 <_cbSendTaskList+0xb4>)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	442b      	add	r3, r5
 8003614:	330c      	adds	r3, #12
 8003616:	681d      	ldr	r5, [r3, #0]
 8003618:	4e0d      	ldr	r6, [pc, #52]	; (8003650 <_cbSendTaskList+0xb4>)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4433      	add	r3, r6
 8003626:	3310      	adds	r3, #16
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	462b      	mov	r3, r5
 800362e:	4622      	mov	r2, r4
 8003630:	f000 f8be 	bl	80037b0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3301      	adds	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <_cbSendTaskList+0xb8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	d3b1      	bcc.n	80035a8 <_cbSendTaskList+0xc>
  }
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800364e:	bf00      	nop
 8003650:	20004214 	.word	0x20004214
 8003654:	200042b4 	.word	0x200042b4

08003658 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003660:	f7ff f864 	bl	800272c <xTaskGetTickCountFromISR>
 8003664:	4603      	mov	r3, r0
 8003666:	2200      	movs	r2, #0
 8003668:	469a      	mov	sl, r3
 800366a:	4693      	mov	fp, r2
 800366c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	f04f 0a00 	mov.w	sl, #0
 800367c:	f04f 0b00 	mov.w	fp, #0
 8003680:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003684:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003688:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800368c:	4652      	mov	r2, sl
 800368e:	465b      	mov	r3, fp
 8003690:	1a14      	subs	r4, r2, r0
 8003692:	eb63 0501 	sbc.w	r5, r3, r1
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	00ab      	lsls	r3, r5, #2
 80036a0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80036a4:	00a2      	lsls	r2, r4, #2
 80036a6:	4614      	mov	r4, r2
 80036a8:	461d      	mov	r5, r3
 80036aa:	eb14 0800 	adds.w	r8, r4, r0
 80036ae:	eb45 0901 	adc.w	r9, r5, r1
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c6:	4690      	mov	r8, r2
 80036c8:	4699      	mov	r9, r3
 80036ca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80036ce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080036e0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80036ee:	2205      	movs	r2, #5
 80036f0:	492b      	ldr	r1, [pc, #172]	; (80037a0 <SYSVIEW_AddTask+0xc0>)
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f002 fd28 	bl	8006148 <memcmp>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d04b      	beq.n	8003796 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b07      	cmp	r3, #7
 8003704:	d903      	bls.n	800370e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003706:	4828      	ldr	r0, [pc, #160]	; (80037a8 <SYSVIEW_AddTask+0xc8>)
 8003708:	f002 fa58 	bl	8005bbc <SEGGER_SYSVIEW_Warn>
    return;
 800370c:	e044      	b.n	8003798 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4926      	ldr	r1, [pc, #152]	; (80037ac <SYSVIEW_AddTask+0xcc>)
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003722:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4921      	ldr	r1, [pc, #132]	; (80037ac <SYSVIEW_AddTask+0xcc>)
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3304      	adds	r3, #4
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	491b      	ldr	r1, [pc, #108]	; (80037ac <SYSVIEW_AddTask+0xcc>)
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	3308      	adds	r3, #8
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800374e:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4916      	ldr	r1, [pc, #88]	; (80037ac <SYSVIEW_AddTask+0xcc>)
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	330c      	adds	r3, #12
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4910      	ldr	r1, [pc, #64]	; (80037ac <SYSVIEW_AddTask+0xcc>)
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	3310      	adds	r3, #16
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	4a08      	ldr	r2, [pc, #32]	; (80037a4 <SYSVIEW_AddTask+0xc4>)
 8003782:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f80e 	bl	80037b0 <SYSVIEW_SendTaskInfo>
 8003794:	e000      	b.n	8003798 <SYSVIEW_AddTask+0xb8>
    return;
 8003796:	bf00      	nop

}
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	08006dfc 	.word	0x08006dfc
 80037a4:	200042b4 	.word	0x200042b4
 80037a8:	08006e04 	.word	0x08006e04
 80037ac:	20004214 	.word	0x20004214

080037b0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	2214      	movs	r2, #20
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fcce 	bl	8006168 <memset>
  TaskInfo.TaskID     = TaskID;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fe45 	bl	8005474 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <__NVIC_EnableIRQ>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	; (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800388a:	f002 f9f3 	bl	8005c74 <SEGGER_SYSVIEW_IsStarted>
 800388e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8003896:	f001 fc71 	bl	800517c <SEGGER_SYSVIEW_Start>
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80038ae:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <_cbOnUARTRx+0x3c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d806      	bhi.n	80038c4 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <_cbOnUARTRx+0x3c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <_cbOnUARTRx+0x3c>)
 80038c0:	701a      	strb	r2, [r3, #0]
    goto Done;
 80038c2:	e009      	b.n	80038d8 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80038c4:	f7ff ffde 	bl	8003884 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <_cbOnUARTRx+0x3c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4618      	mov	r0, r3
 80038ce:	1dfb      	adds	r3, r7, #7
 80038d0:	2201      	movs	r2, #1
 80038d2:	4619      	mov	r1, r3
 80038d4:	f000 fbde 	bl	8004094 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80038d8:	bf00      	nop
}
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20000014 	.word	0x20000014

080038e4 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <_cbOnUARTTx+0x5c>)
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d80f      	bhi.n	8003914 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <_cbOnUARTTx+0x5c>)
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <_cbOnUARTTx+0x60>)
 80038fc:	5c9a      	ldrb	r2, [r3, r2]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <_cbOnUARTTx+0x5c>)
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	3301      	adds	r3, #1
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <_cbOnUARTTx+0x5c>)
 800390c:	705a      	strb	r2, [r3, #1]
    r = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003912:	e00f      	b.n	8003934 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <_cbOnUARTTx+0x5c>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa0d 	bl	8003d3c <SEGGER_RTT_ReadUpBufferNoLock>
 8003922:	4603      	mov	r3, r0
 8003924:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	da02      	bge.n	8003932 <_cbOnUARTTx+0x4e>
    r = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e000      	b.n	8003934 <_cbOnUARTTx+0x50>
  }
Done:
 8003932:	bf00      	nop
  return r;
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000014 	.word	0x20000014
 8003944:	08006ec0 	.word	0x08006ec0

08003948 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <SEGGER_UART_init+0x1c>)
 8003952:	4905      	ldr	r1, [pc, #20]	; (8003968 <SEGGER_UART_init+0x20>)
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f865 	bl	8003a24 <HIF_UART_Init>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	080038a5 	.word	0x080038a5
 8003968:	080038e5 	.word	0x080038e5

0800396c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART2_ISR;                              // Examine status register
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <USART2_IRQHandler+0x80>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d011      	beq.n	80039a6 <USART2_IRQHandler+0x3a>
    v = USART2_RDR;                                      // Read data
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <USART2_IRQHandler+0x84>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 030b 	and.w	r3, r3, #11
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <USART2_IRQHandler+0x88>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <USART2_IRQHandler+0x88>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	79fa      	ldrb	r2, [r7, #7]
 80039a2:	4610      	mov	r0, r2
 80039a4:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01a      	beq.n	80039e6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <USART2_IRQHandler+0x8c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <USART2_IRQHandler+0x8c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	1dfa      	adds	r2, r7, #7
 80039be:	4610      	mov	r0, r2
 80039c0:	4798      	blx	r3
 80039c2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <USART2_IRQHandler+0x6c>
      USART2_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80039ca:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <USART2_IRQHandler+0x90>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <USART2_IRQHandler+0x90>)
 80039d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e006      	b.n	80039e6 <USART2_IRQHandler+0x7a>
    } else {
      USART2_ISR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80039d8:	4b04      	ldr	r3, [pc, #16]	; (80039ec <USART2_IRQHandler+0x80>)
 80039da:	681b      	ldr	r3, [r3, #0]
      USART2_TDR = v;  // Start transmission by writing to data register
 80039dc:	79fa      	ldrb	r2, [r7, #7]
 80039de:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <USART2_IRQHandler+0x94>)
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e000      	b.n	80039e6 <USART2_IRQHandler+0x7a>
      return;
 80039e4:	bf00      	nop
    }
  }
}
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	4000441c 	.word	0x4000441c
 80039f0:	40004424 	.word	0x40004424
 80039f4:	200042b8 	.word	0x200042b8
 80039f8:	200042bc 	.word	0x200042bc
 80039fc:	40004400 	.word	0x40004400
 8003a00:	40004428 	.word	0x40004428

08003a04 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  USART2_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40004400 	.word	0x40004400

08003a24 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR1 |= (1 <<  17);        // Enable USART2 clock
 8003a30:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <HIF_UART_Init+0xac>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <HIF_UART_Init+0xac>)
 8003a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3a:	6013      	str	r3, [r2, #0]
  RCC_AHB2ENR |= (1 <<  0);        // Enable IO port A clock
 8003a3c:	4b25      	ldr	r3, [pc, #148]	; (8003ad4 <HIF_UART_Init+0xb0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <HIF_UART_Init+0xb0>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6013      	str	r3, [r2, #0]

  GPIOA_AFRL |= (7<<28);
 8003a48:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <HIF_UART_Init+0xb4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <HIF_UART_Init+0xb4>)
 8003a4e:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8003a52:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  GPIOA_MODER |= (10<<4);
 8003a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003a5e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003a62:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART2_CR1 = 0
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HIF_UART_Init+0xb8>)
 8003a66:	f248 022d 	movw	r2, #32813	; 0x802d
 8003a6a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART2_CR2 = 0
 8003a6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <HIF_UART_Init+0xbc>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART2_CR3 = 0
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <HIF_UART_Init+0xc0>)
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HIF_UART_Init+0xc4>)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a96:	d302      	bcc.n	8003a9e <HIF_UART_Init+0x7a>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003a98:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a9c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HIF_UART_Init+0x8a>
    USART2_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	4a10      	ldr	r2, [pc, #64]	; (8003aec <HIF_UART_Init+0xc8>)
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003aae:	4a10      	ldr	r2, [pc, #64]	; (8003af0 <HIF_UART_Init+0xcc>)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HIF_UART_Init+0xd0>)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003aba:	2106      	movs	r1, #6
 8003abc:	2026      	movs	r0, #38	; 0x26
 8003abe:	f7ff feb7 	bl	8003830 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003ac2:	2026      	movs	r0, #38	; 0x26
 8003ac4:	f7ff fe96 	bl	80037f4 <__NVIC_EnableIRQ>
}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021058 	.word	0x40021058
 8003ad4:	4002104c 	.word	0x4002104c
 8003ad8:	48000020 	.word	0x48000020
 8003adc:	40004400 	.word	0x40004400
 8003ae0:	40004404 	.word	0x40004404
 8003ae4:	40004408 	.word	0x40004408
 8003ae8:	02625a00 	.word	0x02625a00
 8003aec:	4000440c 	.word	0x4000440c
 8003af0:	200042b8 	.word	0x200042b8
 8003af4:	200042bc 	.word	0x200042bc

08003af8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <_DoInit+0xa0>)
 8003b00:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003b02:	22a8      	movs	r2, #168	; 0xa8
 8003b04:	2100      	movs	r1, #0
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	f002 fb2e 	bl	8006168 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2203      	movs	r2, #3
 8003b16:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <_DoInit+0xa4>)
 8003b1c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <_DoInit+0xa8>)
 8003b22:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b2a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2200      	movs	r2, #0
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <_DoInit+0xa4>)
 8003b42:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <_DoInit+0xac>)
 8003b48:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b62:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	e00c      	b.n	8003b86 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1c3 030f 	rsb	r3, r3, #15
 8003b72:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <_DoInit+0xb0>)
 8003b74:	5cd1      	ldrb	r1, [r2, r3]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3301      	adds	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d9ef      	bls.n	8003b6c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003b8c:	f3bf 8f5f 	dmb	sy
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200042c0 	.word	0x200042c0
 8003b9c:	08006e54 	.word	0x08006e54
 8003ba0:	20004368 	.word	0x20004368
 8003ba4:	20004768 	.word	0x20004768
 8003ba8:	08006ec4 	.word	0x08006ec4

08003bac <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d905      	bls.n	8003bdc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e007      	b.n	8003bec <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	69b9      	ldr	r1, [r7, #24]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	1acb      	subs	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3b01      	subs	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	bf28      	it	cs
 8003bfa:	4613      	movcs	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4293      	cmp	r3, r2
 8003c04:	bf28      	it	cs
 8003c06:	4613      	movcs	r3, r2
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	f002 fb08 	bl	800622e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003c1e:	6a3a      	ldr	r2, [r7, #32]
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	4413      	add	r3, r2
 8003c24:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d101      	bne.n	8003c4c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c4c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1b2      	bne.n	8003bc2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3728      	adds	r7, #40	; 0x28
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b088      	sub	sp, #32
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d911      	bls.n	8003cae <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	6938      	ldr	r0, [r7, #16]
 8003c9a:	f002 fac8 	bl	800622e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003c9e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003cac:	e01f      	b.n	8003cee <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	4413      	add	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	6938      	ldr	r0, [r7, #16]
 8003cc2:	f002 fab4 	bl	800622e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	4413      	add	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6938      	ldr	r0, [r7, #16]
 8003ce0:	f002 faa5 	bl	800622e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003ce4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	60da      	str	r2, [r3, #12]
}
 8003cee:	bf00      	nop
 8003cf0:	3720      	adds	r7, #32
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003cf6:	b480      	push	{r7}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d808      	bhi.n	8003d24 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad2      	subs	r2, r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e004      	b.n	8003d2e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003d2e:	697b      	ldr	r3, [r7, #20]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003d48:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b53      	cmp	r3, #83	; 0x53
 8003d54:	d001      	beq.n	8003d5a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003d56:	f7ff fecf 	bl	8003af8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003d68:	4413      	add	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d92b      	bls.n	8003de0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4293      	cmp	r3, r2
 8003d98:	bf28      	it	cs
 8003d9a:	4613      	movcs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	4413      	add	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	6939      	ldr	r1, [r7, #16]
 8003dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dae:	f002 fa3e 	bl	800622e <memcpy>
    NumBytesRead += NumBytesRem;
 8003db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4413      	add	r3, r2
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d101      	bne.n	8003de0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4293      	cmp	r3, r2
 8003dee:	bf28      	it	cs
 8003df0:	4613      	movcs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	4413      	add	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	6939      	ldr	r1, [r7, #16]
 8003e08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e0a:	f002 fa10 	bl	800622e <memcpy>
    NumBytesRead += NumBytesRem;
 8003e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	4413      	add	r3, r2
 8003e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3730      	adds	r7, #48	; 0x30
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	200042c0 	.word	0x200042c0

08003e48 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003e54:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e56:	623b      	str	r3, [r7, #32]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b53      	cmp	r3, #83	; 0x53
 8003e60:	d001      	beq.n	8003e66 <SEGGER_RTT_ReadNoLock+0x1e>
 8003e62:	f7ff fe49 	bl	8003af8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	3360      	adds	r3, #96	; 0x60
 8003e72:	4a37      	ldr	r2, [pc, #220]	; (8003f50 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e74:	4413      	add	r3, r2
 8003e76:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d92b      	bls.n	8003eec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	bf28      	it	cs
 8003ea6:	4613      	movcs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	4413      	add	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	6939      	ldr	r1, [r7, #16]
 8003eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eba:	f002 f9b8 	bl	800622e <memcpy>
    NumBytesRead += NumBytesRem;
 8003ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4413      	add	r3, r2
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d101      	bne.n	8003eec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bf28      	it	cs
 8003efc:	4613      	movcs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d019      	beq.n	8003f3a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	4413      	add	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	6939      	ldr	r1, [r7, #16]
 8003f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f16:	f002 f98a 	bl	800622e <memcpy>
    NumBytesRead += NumBytesRem;
 8003f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	4413      	add	r3, r2
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	4413      	add	r3, r2
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f44:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3730      	adds	r7, #48	; 0x30
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200042c0 	.word	0x200042c0

08003f54 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	3360      	adds	r3, #96	; 0x60
 8003f70:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003f72:	4413      	add	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d029      	beq.n	8003fd2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d82e      	bhi.n	8003fe0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d013      	beq.n	8003fb2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003f8a:	e029      	b.n	8003fe0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7ff feb2 	bl	8003cf6 <_GetAvailWriteSpace>
 8003f92:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d202      	bcs.n	8003fa2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003fa0:	e021      	b.n	8003fe6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	69b9      	ldr	r1, [r7, #24]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f7ff fe5b 	bl	8003c66 <_WriteNoCheck>
    break;
 8003fb0:	e019      	b.n	8003fe6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	f7ff fe9f 	bl	8003cf6 <_GetAvailWriteSpace>
 8003fb8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bf28      	it	cs
 8003fc2:	4613      	movcs	r3, r2
 8003fc4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	69b9      	ldr	r1, [r7, #24]
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f7ff fe4b 	bl	8003c66 <_WriteNoCheck>
    break;
 8003fd0:	e009      	b.n	8003fe6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7ff fde8 	bl	8003bac <_WriteBlocking>
 8003fdc:	61f8      	str	r0, [r7, #28]
    break;
 8003fde:	e002      	b.n	8003fe6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
    break;
 8003fe4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200042c0 	.word	0x200042c0

08003ff4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	4a1f      	ldr	r2, [pc, #124]	; (8004090 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004012:	4413      	add	r3, r2
 8004014:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d029      	beq.n	8004072 <SEGGER_RTT_WriteNoLock+0x7e>
 800401e:	2b02      	cmp	r3, #2
 8004020:	d82e      	bhi.n	8004080 <SEGGER_RTT_WriteNoLock+0x8c>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <SEGGER_RTT_WriteNoLock+0x38>
 8004026:	2b01      	cmp	r3, #1
 8004028:	d013      	beq.n	8004052 <SEGGER_RTT_WriteNoLock+0x5e>
 800402a:	e029      	b.n	8004080 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7ff fe62 	bl	8003cf6 <_GetAvailWriteSpace>
 8004032:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d202      	bcs.n	8004042 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004040:	e021      	b.n	8004086 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	69b9      	ldr	r1, [r7, #24]
 800404a:	6978      	ldr	r0, [r7, #20]
 800404c:	f7ff fe0b 	bl	8003c66 <_WriteNoCheck>
    break;
 8004050:	e019      	b.n	8004086 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff fe4f 	bl	8003cf6 <_GetAvailWriteSpace>
 8004058:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4293      	cmp	r3, r2
 8004060:	bf28      	it	cs
 8004062:	4613      	movcs	r3, r2
 8004064:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	6978      	ldr	r0, [r7, #20]
 800406c:	f7ff fdfb 	bl	8003c66 <_WriteNoCheck>
    break;
 8004070:	e009      	b.n	8004086 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	69b9      	ldr	r1, [r7, #24]
 8004076:	6978      	ldr	r0, [r7, #20]
 8004078:	f7ff fd98 	bl	8003bac <_WriteBlocking>
 800407c:	61f8      	str	r0, [r7, #28]
    break;
 800407e:	e002      	b.n	8004086 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004080:	2300      	movs	r3, #0
 8004082:	61fb      	str	r3, [r7, #28]
    break;
 8004084:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004086:	69fb      	ldr	r3, [r7, #28]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	200042c0 	.word	0x200042c0

08004094 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80040a0:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <SEGGER_RTT_WriteDownBuffer+0x48>)
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b53      	cmp	r3, #83	; 0x53
 80040ac:	d001      	beq.n	80040b2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80040ae:	f7ff fd23 	bl	8003af8 <_DoInit>
  SEGGER_RTT_LOCK();
 80040b2:	f3ef 8311 	mrs	r3, BASEPRI
 80040b6:	f04f 0120 	mov.w	r1, #32
 80040ba:	f381 8811 	msr	BASEPRI, r1
 80040be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ff45 	bl	8003f54 <SEGGER_RTT_WriteDownBufferNoLock>
 80040ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80040d2:	697b      	ldr	r3, [r7, #20]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	200042c0 	.word	0x200042c0

080040e0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <SEGGER_RTT_Write+0x48>)
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b53      	cmp	r3, #83	; 0x53
 80040f8:	d001      	beq.n	80040fe <SEGGER_RTT_Write+0x1e>
 80040fa:	f7ff fcfd 	bl	8003af8 <_DoInit>
  SEGGER_RTT_LOCK();
 80040fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004102:	f04f 0120 	mov.w	r1, #32
 8004106:	f381 8811 	msr	BASEPRI, r1
 800410a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff ff6f 	bl	8003ff4 <SEGGER_RTT_WriteNoLock>
 8004116:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800411e:	697b      	ldr	r3, [r7, #20]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3720      	adds	r7, #32
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200042c0 	.word	0x200042c0

0800412c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800413a:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b53      	cmp	r3, #83	; 0x53
 8004146:	d001      	beq.n	800414c <SEGGER_RTT_AllocUpBuffer+0x20>
 8004148:	f7ff fcd6 	bl	8003af8 <_DoInit>
  SEGGER_RTT_LOCK();
 800414c:	f3ef 8311 	mrs	r3, BASEPRI
 8004150:	f04f 0120 	mov.w	r1, #32
 8004154:	f381 8811 	msr	BASEPRI, r1
 8004158:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800415a:	4b35      	ldr	r3, [pc, #212]	; (8004230 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800415c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004162:	6939      	ldr	r1, [r7, #16]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	440b      	add	r3, r1
 8004172:	3304      	adds	r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3301      	adds	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	429a      	cmp	r2, r3
 8004188:	dbeb      	blt.n	8004162 <SEGGER_RTT_AllocUpBuffer+0x36>
 800418a:	e000      	b.n	800418e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800418c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	da3f      	bge.n	8004218 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80041ac:	6939      	ldr	r1, [r7, #16]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	3304      	adds	r3, #4
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80041c2:	6939      	ldr	r1, [r7, #16]
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	4613      	mov	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	3320      	adds	r3, #32
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80041d6:	6939      	ldr	r1, [r7, #16]
 80041d8:	69fa      	ldr	r2, [r7, #28]
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	440b      	add	r3, r1
 80041e4:	3328      	adds	r3, #40	; 0x28
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80041ea:	6939      	ldr	r1, [r7, #16]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	3324      	adds	r3, #36	; 0x24
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	440b      	add	r3, r1
 800420c:	332c      	adds	r3, #44	; 0x2c
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004212:	f3bf 8f5f 	dmb	sy
 8004216:	e002      	b.n	800421e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004224:	69fb      	ldr	r3, [r7, #28]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200042c0 	.word	0x200042c0

08004234 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004242:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b53      	cmp	r3, #83	; 0x53
 800424e:	d001      	beq.n	8004254 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004250:	f7ff fc52 	bl	8003af8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004254:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004256:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d82c      	bhi.n	80042b8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800425e:	f3ef 8311 	mrs	r3, BASEPRI
 8004262:	f04f 0120 	mov.w	r1, #32
 8004266:	f381 8811 	msr	BASEPRI, r1
 800426a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	3360      	adds	r3, #96	; 0x60
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042a8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
 80042b6:	e002      	b.n	80042be <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3728      	adds	r7, #40	; 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	200042c0 	.word	0x200042c0

080042cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	60fa      	str	r2, [r7, #12]
 80042e2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d90a      	bls.n	8004300 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80042ee:	e007      	b.n	8004300 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	1c53      	adds	r3, r2, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1c59      	adds	r1, r3, #1
 80042fa:	60f9      	str	r1, [r7, #12]
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	1e5a      	subs	r2, r3, #1
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <_EncodeStr+0x46>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ee      	bne.n	80042f0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3307      	adds	r3, #7
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800434a:	4b34      	ldr	r3, [pc, #208]	; (800441c <_HandleIncomingPacket+0xd8>)
 800434c:	7e1b      	ldrb	r3, [r3, #24]
 800434e:	4618      	mov	r0, r3
 8004350:	1cfb      	adds	r3, r7, #3
 8004352:	2201      	movs	r2, #1
 8004354:	4619      	mov	r1, r3
 8004356:	f7ff fd77 	bl	8003e48 <SEGGER_RTT_ReadNoLock>
 800435a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d057      	beq.n	8004412 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d031      	beq.n	80043cc <_HandleIncomingPacket+0x88>
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	dc40      	bgt.n	80043ee <_HandleIncomingPacket+0xaa>
 800436c:	2b07      	cmp	r3, #7
 800436e:	dc15      	bgt.n	800439c <_HandleIncomingPacket+0x58>
 8004370:	2b00      	cmp	r3, #0
 8004372:	dd3c      	ble.n	80043ee <_HandleIncomingPacket+0xaa>
 8004374:	3b01      	subs	r3, #1
 8004376:	2b06      	cmp	r3, #6
 8004378:	d839      	bhi.n	80043ee <_HandleIncomingPacket+0xaa>
 800437a:	a201      	add	r2, pc, #4	; (adr r2, 8004380 <_HandleIncomingPacket+0x3c>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	080043a3 	.word	0x080043a3
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043af 	.word	0x080043af
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043c7 	.word	0x080043c7
 800439c:	2b7f      	cmp	r3, #127	; 0x7f
 800439e:	d033      	beq.n	8004408 <_HandleIncomingPacket+0xc4>
 80043a0:	e025      	b.n	80043ee <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80043a2:	f000 feeb 	bl	800517c <SEGGER_SYSVIEW_Start>
      break;
 80043a6:	e034      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80043a8:	f000 ffa4 	bl	80052f4 <SEGGER_SYSVIEW_Stop>
      break;
 80043ac:	e031      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80043ae:	f001 f97d 	bl	80056ac <SEGGER_SYSVIEW_RecordSystime>
      break;
 80043b2:	e02e      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80043b4:	f001 f942 	bl	800563c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80043b8:	e02b      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80043ba:	f000 ffc1 	bl	8005340 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80043be:	e028      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80043c0:	f001 fbaa 	bl	8005b18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80043c4:	e025      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80043c6:	f001 fb89 	bl	8005adc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80043ca:	e022      	b.n	8004412 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043cc:	4b13      	ldr	r3, [pc, #76]	; (800441c <_HandleIncomingPacket+0xd8>)
 80043ce:	7e1b      	ldrb	r3, [r3, #24]
 80043d0:	4618      	mov	r0, r3
 80043d2:	1cfb      	adds	r3, r7, #3
 80043d4:	2201      	movs	r2, #1
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7ff fd36 	bl	8003e48 <SEGGER_RTT_ReadNoLock>
 80043dc:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 faee 	bl	80059c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80043ec:	e00e      	b.n	800440c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	da0c      	bge.n	8004410 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043f6:	4b09      	ldr	r3, [pc, #36]	; (800441c <_HandleIncomingPacket+0xd8>)
 80043f8:	7e1b      	ldrb	r3, [r3, #24]
 80043fa:	4618      	mov	r0, r3
 80043fc:	1cfb      	adds	r3, r7, #3
 80043fe:	2201      	movs	r2, #1
 8004400:	4619      	mov	r1, r3
 8004402:	f7ff fd21 	bl	8003e48 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004406:	e003      	b.n	8004410 <_HandleIncomingPacket+0xcc>
      break;
 8004408:	bf00      	nop
 800440a:	e002      	b.n	8004412 <_HandleIncomingPacket+0xce>
      break;
 800440c:	bf00      	nop
 800440e:	e000      	b.n	8004412 <_HandleIncomingPacket+0xce>
      break;
 8004410:	bf00      	nop
    }
  }
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20005780 	.word	0x20005780

08004420 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004426:	2301      	movs	r3, #1
 8004428:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 800443a:	e00b      	b.n	8004454 <_TrySendOverflowPacket+0x34>
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	b2da      	uxtb	r2, r3
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	1c59      	adds	r1, r3, #1
 8004444:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	09db      	lsrs	r3, r3, #7
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b7f      	cmp	r3, #127	; 0x7f
 8004458:	d8f0      	bhi.n	800443c <_TrySendOverflowPacket+0x1c>
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800446a:	4b26      	ldr	r3, [pc, #152]	; (8004504 <_TrySendOverflowPacket+0xe4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	e00b      	b.n	800449c <_TrySendOverflowPacket+0x7c>
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	1c59      	adds	r1, r3, #1
 800448c:	6279      	str	r1, [r7, #36]	; 0x24
 800448e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	09db      	lsrs	r3, r3, #7
 800449a:	623b      	str	r3, [r7, #32]
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b7f      	cmp	r3, #127	; 0x7f
 80044a0:	d8f0      	bhi.n	8004484 <_TrySendOverflowPacket+0x64>
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	627a      	str	r2, [r7, #36]	; 0x24
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80044b2:	4b13      	ldr	r3, [pc, #76]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	4618      	mov	r0, r3
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7fb fe84 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80044c8:	4603      	mov	r3, r0
 80044ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80044cc:	f7ff fa9a 	bl	8003a04 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	e004      	b.n	80044f4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	3301      	adds	r3, #1
 80044f0:	4a03      	ldr	r2, [pc, #12]	; (8004500 <_TrySendOverflowPacket+0xe0>)
 80044f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80044f4:	693b      	ldr	r3, [r7, #16]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3730      	adds	r7, #48	; 0x30
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20005780 	.word	0x20005780
 8004504:	e0001004 	.word	0xe0001004

08004508 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004514:	4b96      	ldr	r3, [pc, #600]	; (8004770 <_SendPacket+0x268>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d010      	beq.n	800453e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800451c:	4b94      	ldr	r3, [pc, #592]	; (8004770 <_SendPacket+0x268>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8130 	beq.w	8004786 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004526:	4b92      	ldr	r3, [pc, #584]	; (8004770 <_SendPacket+0x268>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d109      	bne.n	8004542 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800452e:	f7ff ff77 	bl	8004420 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004532:	4b8f      	ldr	r3, [pc, #572]	; (8004770 <_SendPacket+0x268>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	f040 8127 	bne.w	800478a <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 800453c:	e001      	b.n	8004542 <_SendPacket+0x3a>
    goto Send;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <_SendPacket+0x3c>
Send:
 8004542:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b1f      	cmp	r3, #31
 8004548:	d809      	bhi.n	800455e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800454a:	4b89      	ldr	r3, [pc, #548]	; (8004770 <_SendPacket+0x268>)
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	f040 8118 	bne.w	800478e <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b17      	cmp	r3, #23
 8004562:	d807      	bhi.n	8004574 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3b01      	subs	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e0c4      	b.n	80046fe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b7f      	cmp	r3, #127	; 0x7f
 8004580:	d912      	bls.n	80045a8 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	09da      	lsrs	r2, r3, #7
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	3a01      	subs	r2, #1
 800459a:	60fa      	str	r2, [r7, #12]
 800459c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e006      	b.n	80045b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b7e      	cmp	r3, #126	; 0x7e
 80045ba:	d807      	bhi.n	80045cc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3b01      	subs	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e098      	b.n	80046fe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d2:	d212      	bcs.n	80045fa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	09da      	lsrs	r2, r3, #7
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3b01      	subs	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	3a01      	subs	r2, #1
 80045ec:	60fa      	str	r2, [r7, #12]
 80045ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e081      	b.n	80046fe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004600:	d21d      	bcs.n	800463e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0b9a      	lsrs	r2, r3, #14
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3b01      	subs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	b2db      	uxtb	r3, r3
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	3a01      	subs	r2, #1
 800461c:	60fa      	str	r2, [r7, #12]
 800461e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004622:	b2da      	uxtb	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	3a01      	subs	r2, #1
 8004630:	60fa      	str	r2, [r7, #12]
 8004632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e05f      	b.n	80046fe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004644:	d228      	bcs.n	8004698 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0d5a      	lsrs	r2, r3, #21
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3b01      	subs	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0b9b      	lsrs	r3, r3, #14
 800465a:	b2db      	uxtb	r3, r3
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	3a01      	subs	r2, #1
 8004660:	60fa      	str	r2, [r7, #12]
 8004662:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004666:	b2da      	uxtb	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	09db      	lsrs	r3, r3, #7
 8004670:	b2db      	uxtb	r3, r3
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	3a01      	subs	r2, #1
 8004676:	60fa      	str	r2, [r7, #12]
 8004678:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	3a01      	subs	r2, #1
 800468a:	60fa      	str	r2, [r7, #12]
 800468c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e032      	b.n	80046fe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	0f1a      	lsrs	r2, r3, #28
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3b01      	subs	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	0d5b      	lsrs	r3, r3, #21
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	3a01      	subs	r2, #1
 80046b2:	60fa      	str	r2, [r7, #12]
 80046b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	0b9b      	lsrs	r3, r3, #14
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	3a01      	subs	r2, #1
 80046c8:	60fa      	str	r2, [r7, #12]
 80046ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	09db      	lsrs	r3, r3, #7
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	3a01      	subs	r2, #1
 80046de:	60fa      	str	r2, [r7, #12]
 80046e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	3a01      	subs	r2, #1
 80046f2:	60fa      	str	r2, [r7, #12]
 80046f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <_SendPacket+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <_SendPacket+0x268>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	623b      	str	r3, [r7, #32]
 8004716:	e00b      	b.n	8004730 <_SendPacket+0x228>
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	6279      	str	r1, [r7, #36]	; 0x24
 8004722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	09db      	lsrs	r3, r3, #7
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2b7f      	cmp	r3, #127	; 0x7f
 8004734:	d8f0      	bhi.n	8004718 <_SendPacket+0x210>
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	627a      	str	r2, [r7, #36]	; 0x24
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <_SendPacket+0x268>)
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	4618      	mov	r0, r3
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	461a      	mov	r2, r3
 8004754:	68f9      	ldr	r1, [r7, #12]
 8004756:	f7fb fd3b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800475a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800475c:	f7ff f952 	bl	8003a04 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004766:	4a02      	ldr	r2, [pc, #8]	; (8004770 <_SendPacket+0x268>)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	60d3      	str	r3, [r2, #12]
 800476c:	e010      	b.n	8004790 <_SendPacket+0x288>
 800476e:	bf00      	nop
 8004770:	20005780 	.word	0x20005780
 8004774:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004778:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <_SendPacket+0x2d8>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	3301      	adds	r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <_SendPacket+0x2d8>)
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	e004      	b.n	8004790 <_SendPacket+0x288>
    goto SendDone;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <_SendPacket+0x288>
      goto SendDone;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <_SendPacket+0x288>
      goto SendDone;
 800478e:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004790:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <_SendPacket+0x2d8>)
 8004792:	7e1b      	ldrb	r3, [r3, #24]
 8004794:	4619      	mov	r1, r3
 8004796:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <_SendPacket+0x2dc>)
 8004798:	460b      	mov	r3, r1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	440b      	add	r3, r1
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	336c      	adds	r3, #108	; 0x6c
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <_SendPacket+0x2d8>)
 80047a8:	7e1b      	ldrb	r3, [r3, #24]
 80047aa:	4618      	mov	r0, r3
 80047ac:	490d      	ldr	r1, [pc, #52]	; (80047e4 <_SendPacket+0x2dc>)
 80047ae:	4603      	mov	r3, r0
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	4403      	add	r3, r0
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	3370      	adds	r3, #112	; 0x70
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d00b      	beq.n	80047d8 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <_SendPacket+0x2d8>)
 80047c2:	789b      	ldrb	r3, [r3, #2]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <_SendPacket+0x2d8>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80047ce:	f7ff fdb9 	bl	8004344 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80047d2:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <_SendPacket+0x2d8>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80047d8:	bf00      	nop
 80047da:	3728      	adds	r7, #40	; 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20005780 	.word	0x20005780
 80047e4:	200042c0 	.word	0x200042c0

080047e8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	2b80      	cmp	r3, #128	; 0x80
 8004800:	d80a      	bhi.n	8004818 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6051      	str	r1, [r2, #4]
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b80      	cmp	r3, #128	; 0x80
 800481e:	d15a      	bne.n	80048d6 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	623b      	str	r3, [r7, #32]
 8004840:	e00b      	b.n	800485a <_StoreChar+0x72>
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1c59      	adds	r1, r3, #1
 800484a:	6279      	str	r1, [r7, #36]	; 0x24
 800484c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	2b7f      	cmp	r3, #127	; 0x7f
 800485e:	d8f0      	bhi.n	8004842 <_StoreChar+0x5a>
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	627a      	str	r2, [r7, #36]	; 0x24
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	61fb      	str	r3, [r7, #28]
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	e00b      	b.n	8004892 <_StoreChar+0xaa>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	61f9      	str	r1, [r7, #28]
 8004884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b7f      	cmp	r3, #127	; 0x7f
 8004896:	d8f0      	bhi.n	800487a <_StoreChar+0x92>
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	61fa      	str	r2, [r7, #28]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	221a      	movs	r2, #26
 80048ae:	6939      	ldr	r1, [r7, #16]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fe29 	bl	8004508 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fd36 	bl	800432c <_PreparePacket>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
  }
}
 80048d6:	bf00      	nop
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80048f2:	2301      	movs	r3, #1
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80048fa:	e007      	b.n	800490c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	623b      	str	r3, [r7, #32]
    Width++;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	429a      	cmp	r2, r3
 8004912:	d2f3      	bcs.n	80048fc <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	429a      	cmp	r2, r3
 800491a:	d901      	bls.n	8004920 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d11f      	bne.n	800496a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <_PrintUnsigned+0x66>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <_PrintUnsigned+0x66>
        c = '0';
 8004940:	2330      	movs	r3, #48	; 0x30
 8004942:	76fb      	strb	r3, [r7, #27]
 8004944:	e001      	b.n	800494a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004946:	2320      	movs	r3, #32
 8004948:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800494a:	e007      	b.n	800495c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	3b01      	subs	r3, #1
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004952:	7efb      	ldrb	r3, [r7, #27]
 8004954:	4619      	mov	r1, r3
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff ff46 	bl	80047e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <_PrintUnsigned+0x8a>
 8004962:	69fa      	ldr	r2, [r7, #28]
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	429a      	cmp	r2, r3
 8004968:	d3f0      	bcc.n	800494c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d903      	bls.n	8004978 <_PrintUnsigned+0x98>
      NumDigits--;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	3b01      	subs	r3, #1
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	e009      	b.n	800498c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d200      	bcs.n	800498c <_PrintUnsigned+0xac>
        break;
 800498a:	e005      	b.n	8004998 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004996:	e7e8      	b.n	800496a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a6:	fb02 f303 	mul.w	r3, r2, r3
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <_PrintUnsigned+0x128>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff14 	bl	80047e8 <_StoreChar>
    Digit /= Base;
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e3      	bne.n	8004998 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80049d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00e      	beq.n	80049fe <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049e0:	e006      	b.n	80049f0 <_PrintUnsigned+0x110>
        FieldWidth--;
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	3b01      	subs	r3, #1
 80049e6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80049e8:	2120      	movs	r1, #32
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff fefc 	bl	80047e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <_PrintUnsigned+0x11e>
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3f1      	bcc.n	80049e2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80049fe:	bf00      	nop
 8004a00:	3728      	adds	r7, #40	; 0x28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	08006ee4 	.word	0x08006ee4

08004a0c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bfb8      	it	lt
 8004a20:	425b      	neglt	r3, r3
 8004a22:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004a28:	e007      	b.n	8004a3a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a32:	613b      	str	r3, [r7, #16]
    Width++;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	3301      	adds	r3, #1
 8004a38:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	daf3      	bge.n	8004a2a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d901      	bls.n	8004a4e <_PrintInt+0x42>
    Width = NumDigits;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <_PrintInt+0x5e>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db04      	blt.n	8004a64 <_PrintInt+0x58>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <_PrintInt+0x5e>
    FieldWidth--;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <_PrintInt+0x6e>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <_PrintInt+0x9c>
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d111      	bne.n	8004aa8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00e      	beq.n	8004aa8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a8a:	e006      	b.n	8004a9a <_PrintInt+0x8e>
        FieldWidth--;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004a92:	2120      	movs	r1, #32
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7ff fea7 	bl	80047e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <_PrintInt+0x9c>
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3f1      	bcc.n	8004a8c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da07      	bge.n	8004abe <_PrintInt+0xb2>
    v = -v;
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004ab4:	212d      	movs	r1, #45	; 0x2d
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fe96 	bl	80047e8 <_StoreChar>
 8004abc:	e008      	b.n	8004ad0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004ac8:	212b      	movs	r1, #43	; 0x2b
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff fe8c 	bl	80047e8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d019      	beq.n	8004b0e <_PrintInt+0x102>
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d114      	bne.n	8004b0e <_PrintInt+0x102>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d111      	bne.n	8004b0e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004af0:	e006      	b.n	8004b00 <_PrintInt+0xf4>
        FieldWidth--;
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004af8:	2130      	movs	r1, #48	; 0x30
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fe74 	bl	80047e8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <_PrintInt+0x102>
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3f1      	bcc.n	8004af2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff fedf 	bl	80048e0 <_PrintUnsigned>
}
 8004b22:	bf00      	nop
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b098      	sub	sp, #96	; 0x60
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004b38:	f3ef 8311 	mrs	r3, BASEPRI
 8004b3c:	f04f 0120 	mov.w	r1, #32
 8004b40:	f381 8811 	msr	BASEPRI, r1
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	48b7      	ldr	r0, [pc, #732]	; (8004e24 <_VPrintTarget+0x2f8>)
 8004b48:	f7ff fbf0 	bl	800432c <_PreparePacket>
 8004b4c:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004b4e:	4bb5      	ldr	r3, [pc, #724]	; (8004e24 <_VPrintTarget+0x2f8>)
 8004b50:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004b72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 81a8 	beq.w	8004ecc <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b80:	2b25      	cmp	r3, #37	; 0x25
 8004b82:	f040 8195 	bne.w	8004eb0 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004b86:	2300      	movs	r3, #0
 8004b88:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004b96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b9a:	3b23      	subs	r3, #35	; 0x23
 8004b9c:	2b0d      	cmp	r3, #13
 8004b9e:	d83f      	bhi.n	8004c20 <_VPrintTarget+0xf4>
 8004ba0:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <_VPrintTarget+0x7c>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004c11 	.word	0x08004c11
 8004bac:	08004c21 	.word	0x08004c21
 8004bb0:	08004c21 	.word	0x08004c21
 8004bb4:	08004c21 	.word	0x08004c21
 8004bb8:	08004c21 	.word	0x08004c21
 8004bbc:	08004c21 	.word	0x08004c21
 8004bc0:	08004c21 	.word	0x08004c21
 8004bc4:	08004c21 	.word	0x08004c21
 8004bc8:	08004c01 	.word	0x08004c01
 8004bcc:	08004c21 	.word	0x08004c21
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004c21 	.word	0x08004c21
 8004bd8:	08004c21 	.word	0x08004c21
 8004bdc:	08004bf1 	.word	0x08004bf1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3301      	adds	r3, #1
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e01a      	b.n	8004c26 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf2:	f043 0302 	orr.w	r3, r3, #2
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	e012      	b.n	8004c26 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c02:	f043 0304 	orr.w	r3, r3, #4
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e00a      	b.n	8004c26 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c12:	f043 0308 	orr.w	r3, r3, #8
 8004c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e002      	b.n	8004c26 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004c20:	2300      	movs	r3, #0
 8004c22:	653b      	str	r3, [r7, #80]	; 0x50
 8004c24:	bf00      	nop
        }
      } while (v);
 8004c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1b0      	bne.n	8004b8e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c3c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c3e:	d912      	bls.n	8004c66 <_VPrintTarget+0x13a>
 8004c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c44:	2b39      	cmp	r3, #57	; 0x39
 8004c46:	d80e      	bhi.n	8004c66 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	461a      	mov	r2, r3
 8004c5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c5e:	4413      	add	r3, r2
 8004c60:	3b30      	subs	r3, #48	; 0x30
 8004c62:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004c64:	e7e4      	b.n	8004c30 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004c66:	2300      	movs	r3, #0
 8004c68:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004c72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c76:	2b2e      	cmp	r3, #46	; 0x2e
 8004c78:	d11d      	bne.n	8004cb6 <_VPrintTarget+0x18a>
        sFormat++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004c88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8004c8e:	d912      	bls.n	8004cb6 <_VPrintTarget+0x18a>
 8004c90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c94:	2b39      	cmp	r3, #57	; 0x39
 8004c96:	d80e      	bhi.n	8004cb6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cae:	4413      	add	r3, r2
 8004cb0:	3b30      	subs	r3, #48	; 0x30
 8004cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004cb4:	e7e4      	b.n	8004c80 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cc2:	2b6c      	cmp	r3, #108	; 0x6c
 8004cc4:	d003      	beq.n	8004cce <_VPrintTarget+0x1a2>
 8004cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cca:	2b68      	cmp	r3, #104	; 0x68
 8004ccc:	d107      	bne.n	8004cde <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004cdc:	e7ef      	b.n	8004cbe <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004cde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ce2:	2b25      	cmp	r3, #37	; 0x25
 8004ce4:	f000 80d8 	beq.w	8004e98 <_VPrintTarget+0x36c>
 8004ce8:	2b25      	cmp	r3, #37	; 0x25
 8004cea:	f2c0 80dc 	blt.w	8004ea6 <_VPrintTarget+0x37a>
 8004cee:	2b78      	cmp	r3, #120	; 0x78
 8004cf0:	f300 80d9 	bgt.w	8004ea6 <_VPrintTarget+0x37a>
 8004cf4:	2b58      	cmp	r3, #88	; 0x58
 8004cf6:	f2c0 80d6 	blt.w	8004ea6 <_VPrintTarget+0x37a>
 8004cfa:	3b58      	subs	r3, #88	; 0x58
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f200 80d2 	bhi.w	8004ea6 <_VPrintTarget+0x37a>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <_VPrintTarget+0x1dc>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004dff 	.word	0x08004dff
 8004d0c:	08004ea7 	.word	0x08004ea7
 8004d10:	08004ea7 	.word	0x08004ea7
 8004d14:	08004ea7 	.word	0x08004ea7
 8004d18:	08004ea7 	.word	0x08004ea7
 8004d1c:	08004ea7 	.word	0x08004ea7
 8004d20:	08004ea7 	.word	0x08004ea7
 8004d24:	08004ea7 	.word	0x08004ea7
 8004d28:	08004ea7 	.word	0x08004ea7
 8004d2c:	08004ea7 	.word	0x08004ea7
 8004d30:	08004ea7 	.word	0x08004ea7
 8004d34:	08004d8d 	.word	0x08004d8d
 8004d38:	08004db3 	.word	0x08004db3
 8004d3c:	08004ea7 	.word	0x08004ea7
 8004d40:	08004ea7 	.word	0x08004ea7
 8004d44:	08004ea7 	.word	0x08004ea7
 8004d48:	08004ea7 	.word	0x08004ea7
 8004d4c:	08004ea7 	.word	0x08004ea7
 8004d50:	08004ea7 	.word	0x08004ea7
 8004d54:	08004ea7 	.word	0x08004ea7
 8004d58:	08004ea7 	.word	0x08004ea7
 8004d5c:	08004ea7 	.word	0x08004ea7
 8004d60:	08004ea7 	.word	0x08004ea7
 8004d64:	08004ea7 	.word	0x08004ea7
 8004d68:	08004e73 	.word	0x08004e73
 8004d6c:	08004ea7 	.word	0x08004ea7
 8004d70:	08004ea7 	.word	0x08004ea7
 8004d74:	08004e29 	.word	0x08004e29
 8004d78:	08004ea7 	.word	0x08004ea7
 8004d7c:	08004dd9 	.word	0x08004dd9
 8004d80:	08004ea7 	.word	0x08004ea7
 8004d84:	08004ea7 	.word	0x08004ea7
 8004d88:	08004dff 	.word	0x08004dff
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	1d19      	adds	r1, r3, #4
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6011      	str	r1, [r2, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8004da0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004da4:	f107 0310 	add.w	r3, r7, #16
 8004da8:	4611      	mov	r1, r2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fd1c 	bl	80047e8 <_StoreChar>
        break;
 8004db0:	e07a      	b.n	8004ea8 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004dc0:	f107 0010 	add.w	r0, r7, #16
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dce:	220a      	movs	r2, #10
 8004dd0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004dd2:	f7ff fe1b 	bl	8004a0c <_PrintInt>
        break;
 8004dd6:	e067      	b.n	8004ea8 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1d19      	adds	r1, r3, #4
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6011      	str	r1, [r2, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004de8:	f107 0010 	add.w	r0, r7, #16
 8004dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df6:	220a      	movs	r2, #10
 8004df8:	f7ff fd72 	bl	80048e0 <_PrintUnsigned>
        break;
 8004dfc:	e054      	b.n	8004ea8 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1d19      	adds	r1, r3, #4
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6011      	str	r1, [r2, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004e0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e0e:	f107 0010 	add.w	r0, r7, #16
 8004e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	f7ff fd5f 	bl	80048e0 <_PrintUnsigned>
        break;
 8004e22:	e041      	b.n	8004ea8 <_VPrintTarget+0x37c>
 8004e24:	200057b0 	.word	0x200057b0
      case 's':
        s = va_arg(*pParamList, const char*);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	1d19      	adds	r1, r3, #4
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6011      	str	r1, [r2, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8004e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <_VPrintTarget+0x314>
          s = "(null)";
 8004e3c:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <_VPrintTarget+0x43c>)
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8004e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8004e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8004e4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004e56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004e5a:	f107 0310 	add.w	r3, r7, #16
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fcc1 	bl	80047e8 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6a:	d9e9      	bls.n	8004e40 <_VPrintTarget+0x314>
        break;
 8004e6c:	e01c      	b.n	8004ea8 <_VPrintTarget+0x37c>
            break;
 8004e6e:	bf00      	nop
        break;
 8004e70:	e01a      	b.n	8004ea8 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	1d19      	adds	r1, r3, #4
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6011      	str	r1, [r2, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004e80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e82:	f107 0010 	add.w	r0, r7, #16
 8004e86:	2300      	movs	r3, #0
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	2308      	movs	r3, #8
 8004e90:	2210      	movs	r2, #16
 8004e92:	f7ff fd25 	bl	80048e0 <_PrintUnsigned>
        break;
 8004e96:	e007      	b.n	8004ea8 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004e98:	f107 0310 	add.w	r3, r7, #16
 8004e9c:	2125      	movs	r1, #37	; 0x25
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fca2 	bl	80047e8 <_StoreChar>
        break;
 8004ea4:	e000      	b.n	8004ea8 <_VPrintTarget+0x37c>
      default:
        break;
 8004ea6:	bf00      	nop
      }
      sFormat++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	e007      	b.n	8004ec0 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004eb0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004eb4:	f107 0310 	add.w	r3, r7, #16
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fc94 	bl	80047e8 <_StoreChar>
    }
  } while (*sFormat);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f47f ae4d 	bne.w	8004b64 <_VPrintTarget+0x38>
 8004eca:	e000      	b.n	8004ece <_VPrintTarget+0x3a2>
      break;
 8004ecc:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d041      	beq.n	8004f58 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ee4:	e00b      	b.n	8004efe <_VPrintTarget+0x3d2>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	1c59      	adds	r1, r3, #1
 8004eee:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004ef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	09db      	lsrs	r3, r3, #7
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b7f      	cmp	r3, #127	; 0x7f
 8004f02:	d8f0      	bhi.n	8004ee6 <_VPrintTarget+0x3ba>
 8004f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f12:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
 8004f18:	2300      	movs	r3, #0
 8004f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f1c:	e00b      	b.n	8004f36 <_VPrintTarget+0x40a>
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	6379      	str	r1, [r7, #52]	; 0x34
 8004f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	09db      	lsrs	r3, r3, #7
 8004f34:	633b      	str	r3, [r7, #48]	; 0x30
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3a:	d8f0      	bhi.n	8004f1e <_VPrintTarget+0x3f2>
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	637a      	str	r2, [r7, #52]	; 0x34
 8004f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4a:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	221a      	movs	r2, #26
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fad8 	bl	8004508 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004f5e:	bf00      	nop
 8004f60:	3758      	adds	r7, #88	; 0x58
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	08006e60 	.word	0x08006e60

08004f6c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f80:	4917      	ldr	r1, [pc, #92]	; (8004fe0 <SEGGER_SYSVIEW_Init+0x74>)
 8004f82:	4818      	ldr	r0, [pc, #96]	; (8004fe4 <SEGGER_SYSVIEW_Init+0x78>)
 8004f84:	f7ff f8d2 	bl	800412c <SEGGER_RTT_AllocUpBuffer>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f8e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004f90:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f92:	785a      	ldrb	r2, [r3, #1]
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f96:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004f98:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004f9a:	7e1b      	ldrb	r3, [r3, #24]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	4a11      	ldr	r2, [pc, #68]	; (8004fec <SEGGER_SYSVIEW_Init+0x80>)
 8004fa6:	490f      	ldr	r1, [pc, #60]	; (8004fe4 <SEGGER_SYSVIEW_Init+0x78>)
 8004fa8:	f7ff f944 	bl	8004234 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004fac:	4b0e      	ldr	r3, [pc, #56]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <SEGGER_SYSVIEW_Init+0x84>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fb8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004fba:	4a0b      	ldr	r2, [pc, #44]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004fc0:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004fc6:	4a08      	ldr	r2, [pc, #32]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004fcc:	4a06      	ldr	r2, [pc, #24]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20004778 	.word	0x20004778
 8004fe4:	08006e68 	.word	0x08006e68
 8004fe8:	20005780 	.word	0x20005780
 8004fec:	20005778 	.word	0x20005778
 8004ff0:	e0001004 	.word	0xe0001004

08004ff4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6113      	str	r3, [r2, #16]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20005780 	.word	0x20005780

08005014 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800501c:	f3ef 8311 	mrs	r3, BASEPRI
 8005020:	f04f 0120 	mov.w	r1, #32
 8005024:	f381 8811 	msr	BASEPRI, r1
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	4808      	ldr	r0, [pc, #32]	; (800504c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800502c:	f7ff f97e 	bl	800432c <_PreparePacket>
 8005030:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68b8      	ldr	r0, [r7, #8]
 8005038:	f7ff fa66 	bl	8004508 <_SendPacket>
  RECORD_END();
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f383 8811 	msr	BASEPRI, r3
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200057b0 	.word	0x200057b0

08005050 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800505a:	f3ef 8311 	mrs	r3, BASEPRI
 800505e:	f04f 0120 	mov.w	r1, #32
 8005062:	f381 8811 	msr	BASEPRI, r1
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	4816      	ldr	r0, [pc, #88]	; (80050c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800506a:	f7ff f95f 	bl	800432c <_PreparePacket>
 800506e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e00b      	b.n	8005096 <SEGGER_SYSVIEW_RecordU32+0x46>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	61f9      	str	r1, [r7, #28]
 8005088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b7f      	cmp	r3, #127	; 0x7f
 800509a:	d8f0      	bhi.n	800507e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	61fa      	str	r2, [r7, #28]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	6938      	ldr	r0, [r7, #16]
 80050b2:	f7ff fa29 	bl	8004508 <_SendPacket>
  RECORD_END();
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f383 8811 	msr	BASEPRI, r3
}
 80050bc:	bf00      	nop
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	200057b0 	.word	0x200057b0

080050c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050d4:	f3ef 8311 	mrs	r3, BASEPRI
 80050d8:	f04f 0120 	mov.w	r1, #32
 80050dc:	f381 8811 	msr	BASEPRI, r1
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	4825      	ldr	r0, [pc, #148]	; (8005178 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80050e4:	f7ff f922 	bl	800432c <_PreparePacket>
 80050e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f6:	e00b      	b.n	8005110 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510c:	09db      	lsrs	r3, r3, #7
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	2b7f      	cmp	r3, #127	; 0x7f
 8005114:	d8f0      	bhi.n	80050f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800511c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	623b      	str	r3, [r7, #32]
 800512e:	e00b      	b.n	8005148 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	b2da      	uxtb	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	1c59      	adds	r1, r3, #1
 8005138:	6279      	str	r1, [r7, #36]	; 0x24
 800513a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	09db      	lsrs	r3, r3, #7
 8005146:	623b      	str	r3, [r7, #32]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b7f      	cmp	r3, #127	; 0x7f
 800514c:	d8f0      	bhi.n	8005130 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	627a      	str	r2, [r7, #36]	; 0x24
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	6979      	ldr	r1, [r7, #20]
 8005162:	69b8      	ldr	r0, [r7, #24]
 8005164:	f7ff f9d0 	bl	8004508 <_SendPacket>
  RECORD_END();
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f383 8811 	msr	BASEPRI, r3
}
 800516e:	bf00      	nop
 8005170:	3730      	adds	r7, #48	; 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200057b0 	.word	0x200057b0

0800517c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b08c      	sub	sp, #48	; 0x30
 8005180:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005182:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005184:	2201      	movs	r2, #1
 8005186:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005188:	f3ef 8311 	mrs	r3, BASEPRI
 800518c:	f04f 0120 	mov.w	r1, #32
 8005190:	f381 8811 	msr	BASEPRI, r1
 8005194:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005196:	4b54      	ldr	r3, [pc, #336]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	220a      	movs	r2, #10
 800519c:	4953      	ldr	r1, [pc, #332]	; (80052ec <SEGGER_SYSVIEW_Start+0x170>)
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fb f816 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80051aa:	f7fe fc2b 	bl	8003a04 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80051ae:	200a      	movs	r0, #10
 80051b0:	f7ff ff30 	bl	8005014 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051b4:	f3ef 8311 	mrs	r3, BASEPRI
 80051b8:	f04f 0120 	mov.w	r1, #32
 80051bc:	f381 8811 	msr	BASEPRI, r1
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	484b      	ldr	r0, [pc, #300]	; (80052f0 <SEGGER_SYSVIEW_Start+0x174>)
 80051c4:	f7ff f8b2 	bl	800432c <_PreparePacket>
 80051c8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d2:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d8:	e00b      	b.n	80051f2 <SEGGER_SYSVIEW_Start+0x76>
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	1c59      	adds	r1, r3, #1
 80051e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	09db      	lsrs	r3, r3, #7
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	2b7f      	cmp	r3, #127	; 0x7f
 80051f6:	d8f0      	bhi.n	80051da <SEGGER_SYSVIEW_Start+0x5e>
 80051f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	e00b      	b.n	800522c <SEGGER_SYSVIEW_Start+0xb0>
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	6279      	str	r1, [r7, #36]	; 0x24
 800521e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	09db      	lsrs	r3, r3, #7
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	2b7f      	cmp	r3, #127	; 0x7f
 8005230:	d8f0      	bhi.n	8005214 <SEGGER_SYSVIEW_Start+0x98>
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	627a      	str	r2, [r7, #36]	; 0x24
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e00b      	b.n	8005266 <SEGGER_SYSVIEW_Start+0xea>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	61f9      	str	r1, [r7, #28]
 8005258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b7f      	cmp	r3, #127	; 0x7f
 800526a:	d8f0      	bhi.n	800524e <SEGGER_SYSVIEW_Start+0xd2>
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	61fa      	str	r2, [r7, #28]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e00b      	b.n	800529e <SEGGER_SYSVIEW_Start+0x122>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1c59      	adds	r1, r3, #1
 800528e:	6179      	str	r1, [r7, #20]
 8005290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	09db      	lsrs	r3, r3, #7
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b7f      	cmp	r3, #127	; 0x7f
 80052a2:	d8f0      	bhi.n	8005286 <SEGGER_SYSVIEW_Start+0x10a>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	617a      	str	r2, [r7, #20]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052b4:	2218      	movs	r2, #24
 80052b6:	6839      	ldr	r1, [r7, #0]
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff f925 	bl	8004508 <_SendPacket>
      RECORD_END();
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052c4:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <SEGGER_SYSVIEW_Start+0x16c>)
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80052d2:	f000 f9eb 	bl	80056ac <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80052d6:	f000 f9b1 	bl	800563c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80052da:	f000 fc1d 	bl	8005b18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80052de:	bf00      	nop
 80052e0:	3730      	adds	r7, #48	; 0x30
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20005780 	.word	0x20005780
 80052ec:	08006ed8 	.word	0x08006ed8
 80052f0:	200057b0 	.word	0x200057b0

080052f4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052fa:	f3ef 8311 	mrs	r3, BASEPRI
 80052fe:	f04f 0120 	mov.w	r1, #32
 8005302:	f381 8811 	msr	BASEPRI, r1
 8005306:	607b      	str	r3, [r7, #4]
 8005308:	480b      	ldr	r0, [pc, #44]	; (8005338 <SEGGER_SYSVIEW_Stop+0x44>)
 800530a:	f7ff f80f 	bl	800432c <_PreparePacket>
 800530e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005310:	4b0a      	ldr	r3, [pc, #40]	; (800533c <SEGGER_SYSVIEW_Stop+0x48>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005318:	220b      	movs	r2, #11
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f7ff f8f3 	bl	8004508 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <SEGGER_SYSVIEW_Stop+0x48>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f383 8811 	msr	BASEPRI, r3
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200057b0 	.word	0x200057b0
 800533c:	20005780 	.word	0x20005780

08005340 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	; 0x30
 8005344:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005346:	f3ef 8311 	mrs	r3, BASEPRI
 800534a:	f04f 0120 	mov.w	r1, #32
 800534e:	f381 8811 	msr	BASEPRI, r1
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	4845      	ldr	r0, [pc, #276]	; (800546c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005356:	f7fe ffe9 	bl	800432c <_PreparePacket>
 800535a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005364:	4b42      	ldr	r3, [pc, #264]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	e00b      	b.n	8005384 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	b2da      	uxtb	r2, r3
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	2b7f      	cmp	r3, #127	; 0x7f
 8005388:	d8f0      	bhi.n	800536c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	4b34      	ldr	r3, [pc, #208]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	e00b      	b.n	80053be <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	6279      	str	r1, [r7, #36]	; 0x24
 80053b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	09db      	lsrs	r3, r3, #7
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b7f      	cmp	r3, #127	; 0x7f
 80053c2:	d8f0      	bhi.n	80053a6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	627a      	str	r2, [r7, #36]	; 0x24
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e00b      	b.n	80053f8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	61f9      	str	r1, [r7, #28]
 80053ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	61fa      	str	r2, [r7, #28]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	2300      	movs	r3, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e00b      	b.n	8005430 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	6179      	str	r1, [r7, #20]
 8005422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	09db      	lsrs	r3, r3, #7
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	2b7f      	cmp	r3, #127	; 0x7f
 8005434:	d8f0      	bhi.n	8005418 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	617a      	str	r2, [r7, #20]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005446:	2218      	movs	r2, #24
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f7ff f85c 	bl	8004508 <_SendPacket>
  RECORD_END();
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800545e:	4b04      	ldr	r3, [pc, #16]	; (8005470 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	4798      	blx	r3
  }
}
 8005464:	bf00      	nop
 8005466:	3730      	adds	r7, #48	; 0x30
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200057b0 	.word	0x200057b0
 8005470:	20005780 	.word	0x20005780

08005474 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b092      	sub	sp, #72	; 0x48
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800547c:	f3ef 8311 	mrs	r3, BASEPRI
 8005480:	f04f 0120 	mov.w	r1, #32
 8005484:	f381 8811 	msr	BASEPRI, r1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	486a      	ldr	r0, [pc, #424]	; (8005634 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800548c:	f7fe ff4e 	bl	800432c <_PreparePacket>
 8005490:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	647b      	str	r3, [r7, #68]	; 0x44
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b66      	ldr	r3, [pc, #408]	; (8005638 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	643b      	str	r3, [r7, #64]	; 0x40
 80054a6:	e00b      	b.n	80054c0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ae:	1c59      	adds	r1, r3, #1
 80054b0:	6479      	str	r1, [r7, #68]	; 0x44
 80054b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054bc:	09db      	lsrs	r3, r3, #7
 80054be:	643b      	str	r3, [r7, #64]	; 0x40
 80054c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c2:	2b7f      	cmp	r3, #127	; 0x7f
 80054c4:	d8f0      	bhi.n	80054a8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80054c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	647a      	str	r2, [r7, #68]	; 0x44
 80054cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e0:	e00b      	b.n	80054fa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80054ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b7f      	cmp	r3, #127	; 0x7f
 80054fe:	d8f0      	bhi.n	80054e2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2220      	movs	r2, #32
 8005516:	4619      	mov	r1, r3
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7fe fed7 	bl	80042cc <_EncodeStr>
 800551e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005520:	2209      	movs	r2, #9
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f7fe ffef 	bl	8004508 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
 800553e:	e00b      	b.n	8005558 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	b2da      	uxtb	r2, r3
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	1c59      	adds	r1, r3, #1
 8005548:	6379      	str	r1, [r7, #52]	; 0x34
 800554a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	09db      	lsrs	r3, r3, #7
 8005556:	633b      	str	r3, [r7, #48]	; 0x30
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	2b7f      	cmp	r3, #127	; 0x7f
 800555c:	d8f0      	bhi.n	8005540 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	637a      	str	r2, [r7, #52]	; 0x34
 8005564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
 8005578:	e00b      	b.n	8005592 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	62bb      	str	r3, [r7, #40]	; 0x28
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	d8f0      	bhi.n	800557a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	e00b      	b.n	80055cc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	6279      	str	r1, [r7, #36]	; 0x24
 80055be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	09db      	lsrs	r3, r3, #7
 80055ca:	623b      	str	r3, [r7, #32]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b7f      	cmp	r3, #127	; 0x7f
 80055d0:	d8f0      	bhi.n	80055b4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	627a      	str	r2, [r7, #36]	; 0x24
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e00b      	b.n	8005604 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	61f9      	str	r1, [r7, #28]
 80055f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	09db      	lsrs	r3, r3, #7
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b7f      	cmp	r3, #127	; 0x7f
 8005608:	d8f0      	bhi.n	80055ec <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	61fa      	str	r2, [r7, #28]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800561a:	2215      	movs	r2, #21
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	6938      	ldr	r0, [r7, #16]
 8005620:	f7fe ff72 	bl	8004508 <_SendPacket>
  RECORD_END();
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f383 8811 	msr	BASEPRI, r3
}
 800562a:	bf00      	nop
 800562c:	3748      	adds	r7, #72	; 0x48
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200057b0 	.word	0x200057b0
 8005638:	20005780 	.word	0x20005780

0800563c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005652:	4b03      	ldr	r3, [pc, #12]	; (8005660 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4798      	blx	r3
  }
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20005780 	.word	0x20005780

08005664 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800566c:	f3ef 8311 	mrs	r3, BASEPRI
 8005670:	f04f 0120 	mov.w	r1, #32
 8005674:	f381 8811 	msr	BASEPRI, r1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	480b      	ldr	r0, [pc, #44]	; (80056a8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800567c:	f7fe fe56 	bl	800432c <_PreparePacket>
 8005680:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005682:	2280      	movs	r2, #128	; 0x80
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f7fe fe20 	bl	80042cc <_EncodeStr>
 800568c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800568e:	220e      	movs	r2, #14
 8005690:	68f9      	ldr	r1, [r7, #12]
 8005692:	6938      	ldr	r0, [r7, #16]
 8005694:	f7fe ff38 	bl	8004508 <_SendPacket>
  RECORD_END();
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f383 8811 	msr	BASEPRI, r3
}
 800569e:	bf00      	nop
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	200057b0 	.word	0x200057b0

080056ac <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80056ac:	b590      	push	{r4, r7, lr}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01a      	beq.n	80056f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80056c4:	4b10      	ldr	r3, [pc, #64]	; (8005708 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4798      	blx	r3
 80056cc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056d0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80056d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	000a      	movs	r2, r1
 80056e0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80056e2:	4613      	mov	r3, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4621      	mov	r1, r4
 80056e8:	200d      	movs	r0, #13
 80056ea:	f7ff fced 	bl	80050c8 <SEGGER_SYSVIEW_RecordU32x2>
 80056ee:	e006      	b.n	80056fe <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80056f0:	4b06      	ldr	r3, [pc, #24]	; (800570c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4619      	mov	r1, r3
 80056f6:	200c      	movs	r0, #12
 80056f8:	f7ff fcaa 	bl	8005050 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bd90      	pop	{r4, r7, pc}
 8005706:	bf00      	nop
 8005708:	20005780 	.word	0x20005780
 800570c:	e0001004 	.word	0xe0001004

08005710 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005716:	f3ef 8311 	mrs	r3, BASEPRI
 800571a:	f04f 0120 	mov.w	r1, #32
 800571e:	f381 8811 	msr	BASEPRI, r1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	4819      	ldr	r0, [pc, #100]	; (800578c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005726:	f7fe fe01 	bl	800432c <_PreparePacket>
 800572a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005738:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	b2da      	uxtb	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	6179      	str	r1, [r7, #20]
 800574e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b7f      	cmp	r3, #127	; 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	617a      	str	r2, [r7, #20]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005772:	2202      	movs	r2, #2
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	68b8      	ldr	r0, [r7, #8]
 8005778:	f7fe fec6 	bl	8004508 <_SendPacket>
  RECORD_END();
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f383 8811 	msr	BASEPRI, r3
}
 8005782:	bf00      	nop
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200057b0 	.word	0x200057b0
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800579a:	f3ef 8311 	mrs	r3, BASEPRI
 800579e:	f04f 0120 	mov.w	r1, #32
 80057a2:	f381 8811 	msr	BASEPRI, r1
 80057a6:	607b      	str	r3, [r7, #4]
 80057a8:	4807      	ldr	r0, [pc, #28]	; (80057c8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80057aa:	f7fe fdbf 	bl	800432c <_PreparePacket>
 80057ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80057b0:	2203      	movs	r2, #3
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f7fe fea7 	bl	8004508 <_SendPacket>
  RECORD_END();
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f383 8811 	msr	BASEPRI, r3
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200057b0 	.word	0x200057b0

080057cc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057d2:	f3ef 8311 	mrs	r3, BASEPRI
 80057d6:	f04f 0120 	mov.w	r1, #32
 80057da:	f381 8811 	msr	BASEPRI, r1
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	4807      	ldr	r0, [pc, #28]	; (8005800 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80057e2:	f7fe fda3 	bl	800432c <_PreparePacket>
 80057e6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80057e8:	2212      	movs	r2, #18
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6838      	ldr	r0, [r7, #0]
 80057ee:	f7fe fe8b 	bl	8004508 <_SendPacket>
  RECORD_END();
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f383 8811 	msr	BASEPRI, r3
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200057b0 	.word	0x200057b0

08005804 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800580a:	f3ef 8311 	mrs	r3, BASEPRI
 800580e:	f04f 0120 	mov.w	r1, #32
 8005812:	f381 8811 	msr	BASEPRI, r1
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	4807      	ldr	r0, [pc, #28]	; (8005838 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800581a:	f7fe fd87 	bl	800432c <_PreparePacket>
 800581e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005820:	2211      	movs	r2, #17
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6838      	ldr	r0, [r7, #0]
 8005826:	f7fe fe6f 	bl	8004508 <_SendPacket>
  RECORD_END();
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f383 8811 	msr	BASEPRI, r3
}
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	200057b0 	.word	0x200057b0

0800583c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005844:	f3ef 8311 	mrs	r3, BASEPRI
 8005848:	f04f 0120 	mov.w	r1, #32
 800584c:	f381 8811 	msr	BASEPRI, r1
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	4819      	ldr	r0, [pc, #100]	; (80058b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005854:	f7fe fd6a 	bl	800432c <_PreparePacket>
 8005858:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e00b      	b.n	800588a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	61f9      	str	r1, [r7, #28]
 800587c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b7f      	cmp	r3, #127	; 0x7f
 800588e:	d8f0      	bhi.n	8005872 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	61fa      	str	r2, [r7, #28]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80058a0:	2208      	movs	r2, #8
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	6938      	ldr	r0, [r7, #16]
 80058a6:	f7fe fe2f 	bl	8004508 <_SendPacket>
  RECORD_END();
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f383 8811 	msr	BASEPRI, r3
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	200057b0 	.word	0x200057b0
 80058bc:	20005780 	.word	0x20005780

080058c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058c8:	f3ef 8311 	mrs	r3, BASEPRI
 80058cc:	f04f 0120 	mov.w	r1, #32
 80058d0:	f381 8811 	msr	BASEPRI, r1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	4819      	ldr	r0, [pc, #100]	; (800593c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80058d8:	f7fe fd28 	bl	800432c <_PreparePacket>
 80058dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058e2:	4b17      	ldr	r3, [pc, #92]	; (8005940 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	e00b      	b.n	800590e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	1c59      	adds	r1, r3, #1
 80058fe:	61f9      	str	r1, [r7, #28]
 8005900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	09db      	lsrs	r3, r3, #7
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	2b7f      	cmp	r3, #127	; 0x7f
 8005912:	d8f0      	bhi.n	80058f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	61fa      	str	r2, [r7, #28]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005924:	2204      	movs	r2, #4
 8005926:	68f9      	ldr	r1, [r7, #12]
 8005928:	6938      	ldr	r0, [r7, #16]
 800592a:	f7fe fded 	bl	8004508 <_SendPacket>
  RECORD_END();
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f383 8811 	msr	BASEPRI, r3
}
 8005934:	bf00      	nop
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200057b0 	.word	0x200057b0
 8005940:	20005780 	.word	0x20005780

08005944 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800594c:	f3ef 8311 	mrs	r3, BASEPRI
 8005950:	f04f 0120 	mov.w	r1, #32
 8005954:	f381 8811 	msr	BASEPRI, r1
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	4819      	ldr	r0, [pc, #100]	; (80059c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800595c:	f7fe fce6 	bl	800432c <_PreparePacket>
 8005960:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005966:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e00b      	b.n	8005992 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	1c59      	adds	r1, r3, #1
 8005982:	61f9      	str	r1, [r7, #28]
 8005984:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	09db      	lsrs	r3, r3, #7
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b7f      	cmp	r3, #127	; 0x7f
 8005996:	d8f0      	bhi.n	800597a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	61fa      	str	r2, [r7, #28]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80059a8:	2206      	movs	r2, #6
 80059aa:	68f9      	ldr	r1, [r7, #12]
 80059ac:	6938      	ldr	r0, [r7, #16]
 80059ae:	f7fe fdab 	bl	8004508 <_SendPacket>
  RECORD_END();
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f383 8811 	msr	BASEPRI, r3
}
 80059b8:	bf00      	nop
 80059ba:	3720      	adds	r7, #32
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200057b0 	.word	0x200057b0
 80059c4:	20005780 	.word	0x20005780

080059c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	; 0x30
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80059d2:	4b40      	ldr	r3, [pc, #256]	; (8005ad4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d077      	beq.n	8005aca <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80059da:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80059e0:	2300      	movs	r3, #0
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e4:	e008      	b.n	80059f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	3301      	adds	r3, #1
 80059f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d3f2      	bcc.n	80059e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005a00:	e000      	b.n	8005a04 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005a02:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d055      	beq.n	8005ab6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a0e:	f04f 0120 	mov.w	r1, #32
 8005a12:	f381 8811 	msr	BASEPRI, r1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	482f      	ldr	r0, [pc, #188]	; (8005ad8 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005a1a:	f7fe fc87 	bl	800432c <_PreparePacket>
 8005a1e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	623b      	str	r3, [r7, #32]
 8005a2c:	e00b      	b.n	8005a46 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	6279      	str	r1, [r7, #36]	; 0x24
 8005a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	09db      	lsrs	r3, r3, #7
 8005a44:	623b      	str	r3, [r7, #32]
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b7f      	cmp	r3, #127	; 0x7f
 8005a4a:	d8f0      	bhi.n	8005a2e <SEGGER_SYSVIEW_SendModule+0x66>
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	627a      	str	r2, [r7, #36]	; 0x24
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e00b      	b.n	8005a80 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	1c59      	adds	r1, r3, #1
 8005a70:	61f9      	str	r1, [r7, #28]
 8005a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	09db      	lsrs	r3, r3, #7
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b7f      	cmp	r3, #127	; 0x7f
 8005a84:	d8f0      	bhi.n	8005a68 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	61fa      	str	r2, [r7, #28]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7fe fc14 	bl	80042cc <_EncodeStr>
 8005aa4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005aa6:	2216      	movs	r2, #22
 8005aa8:	68f9      	ldr	r1, [r7, #12]
 8005aaa:	6938      	ldr	r0, [r7, #16]
 8005aac:	f7fe fd2c 	bl	8004508 <_SendPacket>
      RECORD_END();
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d006      	beq.n	8005aca <SEGGER_SYSVIEW_SendModule+0x102>
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4798      	blx	r3
    }
  }
}
 8005aca:	bf00      	nop
 8005acc:	3730      	adds	r7, #48	; 0x30
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	200057a8 	.word	0x200057a8
 8005ad8:	200057b0 	.word	0x200057b0

08005adc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00f      	beq.n	8005b0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1f2      	bne.n	8005af0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200057a8 	.word	0x200057a8

08005b18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b22:	f04f 0120 	mov.w	r1, #32
 8005b26:	f381 8811 	msr	BASEPRI, r1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	4817      	ldr	r0, [pc, #92]	; (8005b8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005b2e:	f7fe fbfd 	bl	800432c <_PreparePacket>
 8005b32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	e00b      	b.n	8005b5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	6179      	str	r1, [r7, #20]
 8005b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	09db      	lsrs	r3, r3, #7
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b60:	d8f0      	bhi.n	8005b44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	617a      	str	r2, [r7, #20]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005b72:	221b      	movs	r2, #27
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	68b8      	ldr	r0, [r7, #8]
 8005b78:	f7fe fcc6 	bl	8004508 <_SendPacket>
  RECORD_END();
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f383 8811 	msr	BASEPRI, r3
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200057b0 	.word	0x200057b0
 8005b90:	200057ac 	.word	0x200057ac

08005b94 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005b94:	b40f      	push	{r0, r1, r2, r3}
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	6938      	ldr	r0, [r7, #16]
 8005baa:	f7fe ffbf 	bl	8004b2c <_VPrintTarget>
  va_end(ParamList);
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb8:	b004      	add	sp, #16
 8005bba:	4770      	bx	lr

08005bbc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	; 0x28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc8:	f04f 0120 	mov.w	r1, #32
 8005bcc:	f381 8811 	msr	BASEPRI, r1
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	4827      	ldr	r0, [pc, #156]	; (8005c70 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005bd4:	f7fe fbaa 	bl	800432c <_PreparePacket>
 8005bd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bda:	2280      	movs	r2, #128	; 0x80
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	6938      	ldr	r0, [r7, #16]
 8005be0:	f7fe fb74 	bl	80042cc <_EncodeStr>
 8005be4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bea:	2301      	movs	r3, #1
 8005bec:	623b      	str	r3, [r7, #32]
 8005bee:	e00b      	b.n	8005c08 <SEGGER_SYSVIEW_Warn+0x4c>
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	6279      	str	r1, [r7, #36]	; 0x24
 8005bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	09db      	lsrs	r3, r3, #7
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0c:	d8f0      	bhi.n	8005bf0 <SEGGER_SYSVIEW_Warn+0x34>
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	627a      	str	r2, [r7, #36]	; 0x24
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e00b      	b.n	8005c40 <SEGGER_SYSVIEW_Warn+0x84>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	1c59      	adds	r1, r3, #1
 8005c30:	61f9      	str	r1, [r7, #28]
 8005c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c36:	b2d2      	uxtb	r2, r2
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	09db      	lsrs	r3, r3, #7
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b7f      	cmp	r3, #127	; 0x7f
 8005c44:	d8f0      	bhi.n	8005c28 <SEGGER_SYSVIEW_Warn+0x6c>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	61fa      	str	r2, [r7, #28]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c56:	221a      	movs	r2, #26
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	6938      	ldr	r0, [r7, #16]
 8005c5c:	f7fe fc54 	bl	8004508 <_SendPacket>
  RECORD_END();
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f383 8811 	msr	BASEPRI, r3
}
 8005c66:	bf00      	nop
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	200057b0 	.word	0x200057b0

08005c74 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005c78:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c7a:	7e1b      	ldrb	r3, [r3, #24]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005c80:	460b      	mov	r3, r1
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	440b      	add	r3, r1
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	336c      	adds	r3, #108	; 0x6c
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b0e      	ldr	r3, [pc, #56]	; (8005cc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005c90:	7e1b      	ldrb	r3, [r3, #24]
 8005c92:	4618      	mov	r0, r3
 8005c94:	490d      	ldr	r1, [pc, #52]	; (8005ccc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005c96:	4603      	mov	r3, r0
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	4403      	add	r3, r0
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3370      	adds	r3, #112	; 0x70
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d00b      	beq.n	8005cc0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005caa:	789b      	ldrb	r3, [r3, #2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005cb6:	f7fe fb45 	bl	8004344 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005cba:	4b03      	ldr	r3, [pc, #12]	; (8005cc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005cc0:	4b01      	ldr	r3, [pc, #4]	; (8005cc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20005780 	.word	0x20005780
 8005ccc:	200042c0 	.word	0x200042c0

08005cd0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	f7fe f9fc 	bl	80040e0 <SEGGER_RTT_Write>
  return len;
 8005ce8:	683b      	ldr	r3, [r7, #0]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <std>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8005cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d02:	6083      	str	r3, [r0, #8]
 8005d04:	8181      	strh	r1, [r0, #12]
 8005d06:	6643      	str	r3, [r0, #100]	; 0x64
 8005d08:	81c2      	strh	r2, [r0, #14]
 8005d0a:	6183      	str	r3, [r0, #24]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	2208      	movs	r2, #8
 8005d10:	305c      	adds	r0, #92	; 0x5c
 8005d12:	f000 fa29 	bl	8006168 <memset>
 8005d16:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <std+0x58>)
 8005d18:	6263      	str	r3, [r4, #36]	; 0x24
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <std+0x5c>)
 8005d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	; (8005d54 <std+0x60>)
 8005d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d22:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <std+0x64>)
 8005d24:	6323      	str	r3, [r4, #48]	; 0x30
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <std+0x68>)
 8005d28:	6224      	str	r4, [r4, #32]
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	d006      	beq.n	8005d3c <std+0x48>
 8005d2e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005d32:	4294      	cmp	r4, r2
 8005d34:	d002      	beq.n	8005d3c <std+0x48>
 8005d36:	33d0      	adds	r3, #208	; 0xd0
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d105      	bne.n	8005d48 <std+0x54>
 8005d3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f000 ba70 	b.w	8006228 <__retarget_lock_init_recursive>
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08005f99 	.word	0x08005f99
 8005d50:	08005fbb 	.word	0x08005fbb
 8005d54:	08005ff3 	.word	0x08005ff3
 8005d58:	08006017 	.word	0x08006017
 8005d5c:	20005894 	.word	0x20005894

08005d60 <stdio_exit_handler>:
 8005d60:	4a02      	ldr	r2, [pc, #8]	; (8005d6c <stdio_exit_handler+0xc>)
 8005d62:	4903      	ldr	r1, [pc, #12]	; (8005d70 <stdio_exit_handler+0x10>)
 8005d64:	4803      	ldr	r0, [pc, #12]	; (8005d74 <stdio_exit_handler+0x14>)
 8005d66:	f000 b869 	b.w	8005e3c <_fwalk_sglue>
 8005d6a:	bf00      	nop
 8005d6c:	2000001c 	.word	0x2000001c
 8005d70:	08006b19 	.word	0x08006b19
 8005d74:	20000028 	.word	0x20000028

08005d78 <cleanup_stdio>:
 8005d78:	6841      	ldr	r1, [r0, #4]
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	; (8005dac <cleanup_stdio+0x34>)
 8005d7c:	4299      	cmp	r1, r3
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	4604      	mov	r4, r0
 8005d82:	d001      	beq.n	8005d88 <cleanup_stdio+0x10>
 8005d84:	f000 fec8 	bl	8006b18 <_fflush_r>
 8005d88:	68a1      	ldr	r1, [r4, #8]
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <cleanup_stdio+0x38>)
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	d002      	beq.n	8005d96 <cleanup_stdio+0x1e>
 8005d90:	4620      	mov	r0, r4
 8005d92:	f000 fec1 	bl	8006b18 <_fflush_r>
 8005d96:	68e1      	ldr	r1, [r4, #12]
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <cleanup_stdio+0x3c>)
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	d004      	beq.n	8005da8 <cleanup_stdio+0x30>
 8005d9e:	4620      	mov	r0, r4
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f000 beb8 	b.w	8006b18 <_fflush_r>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	20005894 	.word	0x20005894
 8005db0:	200058fc 	.word	0x200058fc
 8005db4:	20005964 	.word	0x20005964

08005db8 <global_stdio_init.part.0>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <global_stdio_init.part.0+0x30>)
 8005dbc:	4c0b      	ldr	r4, [pc, #44]	; (8005dec <global_stdio_init.part.0+0x34>)
 8005dbe:	4a0c      	ldr	r2, [pc, #48]	; (8005df0 <global_stdio_init.part.0+0x38>)
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2104      	movs	r1, #4
 8005dc8:	f7ff ff94 	bl	8005cf4 <std>
 8005dcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2109      	movs	r1, #9
 8005dd4:	f7ff ff8e 	bl	8005cf4 <std>
 8005dd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ddc:	2202      	movs	r2, #2
 8005dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de2:	2112      	movs	r1, #18
 8005de4:	f7ff bf86 	b.w	8005cf4 <std>
 8005de8:	200059cc 	.word	0x200059cc
 8005dec:	20005894 	.word	0x20005894
 8005df0:	08005d61 	.word	0x08005d61

08005df4 <__sfp_lock_acquire>:
 8005df4:	4801      	ldr	r0, [pc, #4]	; (8005dfc <__sfp_lock_acquire+0x8>)
 8005df6:	f000 ba18 	b.w	800622a <__retarget_lock_acquire_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	200059d5 	.word	0x200059d5

08005e00 <__sfp_lock_release>:
 8005e00:	4801      	ldr	r0, [pc, #4]	; (8005e08 <__sfp_lock_release+0x8>)
 8005e02:	f000 ba13 	b.w	800622c <__retarget_lock_release_recursive>
 8005e06:	bf00      	nop
 8005e08:	200059d5 	.word	0x200059d5

08005e0c <__sinit>:
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	4604      	mov	r4, r0
 8005e10:	f7ff fff0 	bl	8005df4 <__sfp_lock_acquire>
 8005e14:	6a23      	ldr	r3, [r4, #32]
 8005e16:	b11b      	cbz	r3, 8005e20 <__sinit+0x14>
 8005e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1c:	f7ff bff0 	b.w	8005e00 <__sfp_lock_release>
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <__sinit+0x28>)
 8005e22:	6223      	str	r3, [r4, #32]
 8005e24:	4b04      	ldr	r3, [pc, #16]	; (8005e38 <__sinit+0x2c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f5      	bne.n	8005e18 <__sinit+0xc>
 8005e2c:	f7ff ffc4 	bl	8005db8 <global_stdio_init.part.0>
 8005e30:	e7f2      	b.n	8005e18 <__sinit+0xc>
 8005e32:	bf00      	nop
 8005e34:	08005d79 	.word	0x08005d79
 8005e38:	200059cc 	.word	0x200059cc

08005e3c <_fwalk_sglue>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4607      	mov	r7, r0
 8005e42:	4688      	mov	r8, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	2600      	movs	r6, #0
 8005e48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e4c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e50:	d505      	bpl.n	8005e5e <_fwalk_sglue+0x22>
 8005e52:	6824      	ldr	r4, [r4, #0]
 8005e54:	2c00      	cmp	r4, #0
 8005e56:	d1f7      	bne.n	8005e48 <_fwalk_sglue+0xc>
 8005e58:	4630      	mov	r0, r6
 8005e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e5e:	89ab      	ldrh	r3, [r5, #12]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d907      	bls.n	8005e74 <_fwalk_sglue+0x38>
 8005e64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <_fwalk_sglue+0x38>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4638      	mov	r0, r7
 8005e70:	47c0      	blx	r8
 8005e72:	4306      	orrs	r6, r0
 8005e74:	3568      	adds	r5, #104	; 0x68
 8005e76:	e7e9      	b.n	8005e4c <_fwalk_sglue+0x10>

08005e78 <_puts_r>:
 8005e78:	6a03      	ldr	r3, [r0, #32]
 8005e7a:	b570      	push	{r4, r5, r6, lr}
 8005e7c:	6884      	ldr	r4, [r0, #8]
 8005e7e:	4605      	mov	r5, r0
 8005e80:	460e      	mov	r6, r1
 8005e82:	b90b      	cbnz	r3, 8005e88 <_puts_r+0x10>
 8005e84:	f7ff ffc2 	bl	8005e0c <__sinit>
 8005e88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e8a:	07db      	lsls	r3, r3, #31
 8005e8c:	d405      	bmi.n	8005e9a <_puts_r+0x22>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	0598      	lsls	r0, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_puts_r+0x22>
 8005e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e96:	f000 f9c8 	bl	800622a <__retarget_lock_acquire_recursive>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	0719      	lsls	r1, r3, #28
 8005e9e:	d513      	bpl.n	8005ec8 <_puts_r+0x50>
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	b18b      	cbz	r3, 8005ec8 <_puts_r+0x50>
 8005ea4:	3e01      	subs	r6, #1
 8005ea6:	68a3      	ldr	r3, [r4, #8]
 8005ea8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eac:	3b01      	subs	r3, #1
 8005eae:	60a3      	str	r3, [r4, #8]
 8005eb0:	b9e9      	cbnz	r1, 8005eee <_puts_r+0x76>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da2e      	bge.n	8005f14 <_puts_r+0x9c>
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	210a      	movs	r1, #10
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f8af 	bl	800601e <__swbuf_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d007      	beq.n	8005ed4 <_puts_r+0x5c>
 8005ec4:	250a      	movs	r5, #10
 8005ec6:	e007      	b.n	8005ed8 <_puts_r+0x60>
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f000 f8e4 	bl	8006098 <__swsetup_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d0e7      	beq.n	8005ea4 <_puts_r+0x2c>
 8005ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8005ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eda:	07da      	lsls	r2, r3, #31
 8005edc:	d405      	bmi.n	8005eea <_puts_r+0x72>
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_puts_r+0x72>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee6:	f000 f9a1 	bl	800622c <__retarget_lock_release_recursive>
 8005eea:	4628      	mov	r0, r5
 8005eec:	bd70      	pop	{r4, r5, r6, pc}
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da04      	bge.n	8005efc <_puts_r+0x84>
 8005ef2:	69a2      	ldr	r2, [r4, #24]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	dc06      	bgt.n	8005f06 <_puts_r+0x8e>
 8005ef8:	290a      	cmp	r1, #10
 8005efa:	d004      	beq.n	8005f06 <_puts_r+0x8e>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	6022      	str	r2, [r4, #0]
 8005f02:	7019      	strb	r1, [r3, #0]
 8005f04:	e7cf      	b.n	8005ea6 <_puts_r+0x2e>
 8005f06:	4622      	mov	r2, r4
 8005f08:	4628      	mov	r0, r5
 8005f0a:	f000 f888 	bl	800601e <__swbuf_r>
 8005f0e:	3001      	adds	r0, #1
 8005f10:	d1c9      	bne.n	8005ea6 <_puts_r+0x2e>
 8005f12:	e7df      	b.n	8005ed4 <_puts_r+0x5c>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	250a      	movs	r5, #10
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	6022      	str	r2, [r4, #0]
 8005f1c:	701d      	strb	r5, [r3, #0]
 8005f1e:	e7db      	b.n	8005ed8 <_puts_r+0x60>

08005f20 <puts>:
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <puts+0xc>)
 8005f22:	4601      	mov	r1, r0
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	f7ff bfa7 	b.w	8005e78 <_puts_r>
 8005f2a:	bf00      	nop
 8005f2c:	20000074 	.word	0x20000074

08005f30 <sniprintf>:
 8005f30:	b40c      	push	{r2, r3}
 8005f32:	b530      	push	{r4, r5, lr}
 8005f34:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <sniprintf+0x64>)
 8005f36:	1e0c      	subs	r4, r1, #0
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	b09d      	sub	sp, #116	; 0x74
 8005f3c:	da08      	bge.n	8005f50 <sniprintf+0x20>
 8005f3e:	238b      	movs	r3, #139	; 0x8b
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	f04f 30ff 	mov.w	r0, #4294967295
 8005f46:	b01d      	add	sp, #116	; 0x74
 8005f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f4c:	b002      	add	sp, #8
 8005f4e:	4770      	bx	lr
 8005f50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005f54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f58:	bf14      	ite	ne
 8005f5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f5e:	4623      	moveq	r3, r4
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	9307      	str	r3, [sp, #28]
 8005f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f68:	9002      	str	r0, [sp, #8]
 8005f6a:	9006      	str	r0, [sp, #24]
 8005f6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f72:	ab21      	add	r3, sp, #132	; 0x84
 8005f74:	a902      	add	r1, sp, #8
 8005f76:	4628      	mov	r0, r5
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	f000 fab9 	bl	80064f0 <_svfiprintf_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	bfbc      	itt	lt
 8005f82:	238b      	movlt	r3, #139	; 0x8b
 8005f84:	602b      	strlt	r3, [r5, #0]
 8005f86:	2c00      	cmp	r4, #0
 8005f88:	d0dd      	beq.n	8005f46 <sniprintf+0x16>
 8005f8a:	9b02      	ldr	r3, [sp, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e7d9      	b.n	8005f46 <sniprintf+0x16>
 8005f92:	bf00      	nop
 8005f94:	20000074 	.word	0x20000074

08005f98 <__sread>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa0:	f000 f90c 	bl	80061bc <_read_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	bfab      	itete	ge
 8005fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005faa:	89a3      	ldrhlt	r3, [r4, #12]
 8005fac:	181b      	addge	r3, r3, r0
 8005fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fb2:	bfac      	ite	ge
 8005fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fb6:	81a3      	strhlt	r3, [r4, #12]
 8005fb8:	bd10      	pop	{r4, pc}

08005fba <__swrite>:
 8005fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbe:	461f      	mov	r7, r3
 8005fc0:	898b      	ldrh	r3, [r1, #12]
 8005fc2:	05db      	lsls	r3, r3, #23
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	4616      	mov	r6, r2
 8005fca:	d505      	bpl.n	8005fd8 <__swrite+0x1e>
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f000 f8e0 	bl	8006198 <_lseek_r>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	4632      	mov	r2, r6
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	4628      	mov	r0, r5
 8005fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fee:	f7ff be6f 	b.w	8005cd0 <_write_r>

08005ff2 <__sseek>:
 8005ff2:	b510      	push	{r4, lr}
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ffa:	f000 f8cd 	bl	8006198 <_lseek_r>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	bf15      	itete	ne
 8006004:	6560      	strne	r0, [r4, #84]	; 0x54
 8006006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800600a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800600e:	81a3      	strheq	r3, [r4, #12]
 8006010:	bf18      	it	ne
 8006012:	81a3      	strhne	r3, [r4, #12]
 8006014:	bd10      	pop	{r4, pc}

08006016 <__sclose>:
 8006016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601a:	f000 b8ad 	b.w	8006178 <_close_r>

0800601e <__swbuf_r>:
 800601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006020:	460e      	mov	r6, r1
 8006022:	4614      	mov	r4, r2
 8006024:	4605      	mov	r5, r0
 8006026:	b118      	cbz	r0, 8006030 <__swbuf_r+0x12>
 8006028:	6a03      	ldr	r3, [r0, #32]
 800602a:	b90b      	cbnz	r3, 8006030 <__swbuf_r+0x12>
 800602c:	f7ff feee 	bl	8005e0c <__sinit>
 8006030:	69a3      	ldr	r3, [r4, #24]
 8006032:	60a3      	str	r3, [r4, #8]
 8006034:	89a3      	ldrh	r3, [r4, #12]
 8006036:	071a      	lsls	r2, r3, #28
 8006038:	d525      	bpl.n	8006086 <__swbuf_r+0x68>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	b31b      	cbz	r3, 8006086 <__swbuf_r+0x68>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	1a98      	subs	r0, r3, r2
 8006044:	6963      	ldr	r3, [r4, #20]
 8006046:	b2f6      	uxtb	r6, r6
 8006048:	4283      	cmp	r3, r0
 800604a:	4637      	mov	r7, r6
 800604c:	dc04      	bgt.n	8006058 <__swbuf_r+0x3a>
 800604e:	4621      	mov	r1, r4
 8006050:	4628      	mov	r0, r5
 8006052:	f000 fd61 	bl	8006b18 <_fflush_r>
 8006056:	b9e0      	cbnz	r0, 8006092 <__swbuf_r+0x74>
 8006058:	68a3      	ldr	r3, [r4, #8]
 800605a:	3b01      	subs	r3, #1
 800605c:	60a3      	str	r3, [r4, #8]
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	701e      	strb	r6, [r3, #0]
 8006066:	6962      	ldr	r2, [r4, #20]
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	429a      	cmp	r2, r3
 800606c:	d004      	beq.n	8006078 <__swbuf_r+0x5a>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	07db      	lsls	r3, r3, #31
 8006072:	d506      	bpl.n	8006082 <__swbuf_r+0x64>
 8006074:	2e0a      	cmp	r6, #10
 8006076:	d104      	bne.n	8006082 <__swbuf_r+0x64>
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f000 fd4c 	bl	8006b18 <_fflush_r>
 8006080:	b938      	cbnz	r0, 8006092 <__swbuf_r+0x74>
 8006082:	4638      	mov	r0, r7
 8006084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 f805 	bl	8006098 <__swsetup_r>
 800608e:	2800      	cmp	r0, #0
 8006090:	d0d5      	beq.n	800603e <__swbuf_r+0x20>
 8006092:	f04f 37ff 	mov.w	r7, #4294967295
 8006096:	e7f4      	b.n	8006082 <__swbuf_r+0x64>

08006098 <__swsetup_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <__swsetup_r+0xac>)
 800609c:	4605      	mov	r5, r0
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	460c      	mov	r4, r1
 80060a2:	b118      	cbz	r0, 80060ac <__swsetup_r+0x14>
 80060a4:	6a03      	ldr	r3, [r0, #32]
 80060a6:	b90b      	cbnz	r3, 80060ac <__swsetup_r+0x14>
 80060a8:	f7ff feb0 	bl	8005e0c <__sinit>
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060b2:	0718      	lsls	r0, r3, #28
 80060b4:	d422      	bmi.n	80060fc <__swsetup_r+0x64>
 80060b6:	06d9      	lsls	r1, r3, #27
 80060b8:	d407      	bmi.n	80060ca <__swsetup_r+0x32>
 80060ba:	2309      	movs	r3, #9
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060c2:	81a3      	strh	r3, [r4, #12]
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	e034      	b.n	8006134 <__swsetup_r+0x9c>
 80060ca:	0758      	lsls	r0, r3, #29
 80060cc:	d512      	bpl.n	80060f4 <__swsetup_r+0x5c>
 80060ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d0:	b141      	cbz	r1, 80060e4 <__swsetup_r+0x4c>
 80060d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d6:	4299      	cmp	r1, r3
 80060d8:	d002      	beq.n	80060e0 <__swsetup_r+0x48>
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 f8b6 	bl	800624c <_free_r>
 80060e0:	2300      	movs	r3, #0
 80060e2:	6363      	str	r3, [r4, #52]	; 0x34
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	2300      	movs	r3, #0
 80060ee:	6063      	str	r3, [r4, #4]
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f043 0308 	orr.w	r3, r3, #8
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	b94b      	cbnz	r3, 8006114 <__swsetup_r+0x7c>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610a:	d003      	beq.n	8006114 <__swsetup_r+0x7c>
 800610c:	4621      	mov	r1, r4
 800610e:	4628      	mov	r0, r5
 8006110:	f000 fd50 	bl	8006bb4 <__smakebuf_r>
 8006114:	89a0      	ldrh	r0, [r4, #12]
 8006116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800611a:	f010 0301 	ands.w	r3, r0, #1
 800611e:	d00a      	beq.n	8006136 <__swsetup_r+0x9e>
 8006120:	2300      	movs	r3, #0
 8006122:	60a3      	str	r3, [r4, #8]
 8006124:	6963      	ldr	r3, [r4, #20]
 8006126:	425b      	negs	r3, r3
 8006128:	61a3      	str	r3, [r4, #24]
 800612a:	6923      	ldr	r3, [r4, #16]
 800612c:	b943      	cbnz	r3, 8006140 <__swsetup_r+0xa8>
 800612e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006132:	d1c4      	bne.n	80060be <__swsetup_r+0x26>
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	0781      	lsls	r1, r0, #30
 8006138:	bf58      	it	pl
 800613a:	6963      	ldrpl	r3, [r4, #20]
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	e7f4      	b.n	800612a <__swsetup_r+0x92>
 8006140:	2000      	movs	r0, #0
 8006142:	e7f7      	b.n	8006134 <__swsetup_r+0x9c>
 8006144:	20000074 	.word	0x20000074

08006148 <memcmp>:
 8006148:	b510      	push	{r4, lr}
 800614a:	3901      	subs	r1, #1
 800614c:	4402      	add	r2, r0
 800614e:	4290      	cmp	r0, r2
 8006150:	d101      	bne.n	8006156 <memcmp+0xe>
 8006152:	2000      	movs	r0, #0
 8006154:	e005      	b.n	8006162 <memcmp+0x1a>
 8006156:	7803      	ldrb	r3, [r0, #0]
 8006158:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800615c:	42a3      	cmp	r3, r4
 800615e:	d001      	beq.n	8006164 <memcmp+0x1c>
 8006160:	1b18      	subs	r0, r3, r4
 8006162:	bd10      	pop	{r4, pc}
 8006164:	3001      	adds	r0, #1
 8006166:	e7f2      	b.n	800614e <memcmp+0x6>

08006168 <memset>:
 8006168:	4402      	add	r2, r0
 800616a:	4603      	mov	r3, r0
 800616c:	4293      	cmp	r3, r2
 800616e:	d100      	bne.n	8006172 <memset+0xa>
 8006170:	4770      	bx	lr
 8006172:	f803 1b01 	strb.w	r1, [r3], #1
 8006176:	e7f9      	b.n	800616c <memset+0x4>

08006178 <_close_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d06      	ldr	r5, [pc, #24]	; (8006194 <_close_r+0x1c>)
 800617c:	2300      	movs	r3, #0
 800617e:	4604      	mov	r4, r0
 8006180:	4608      	mov	r0, r1
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	f7fa fb1b 	bl	80007be <_close>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_close_r+0x1a>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_close_r+0x1a>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	200059d0 	.word	0x200059d0

08006198 <_lseek_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d07      	ldr	r5, [pc, #28]	; (80061b8 <_lseek_r+0x20>)
 800619c:	4604      	mov	r4, r0
 800619e:	4608      	mov	r0, r1
 80061a0:	4611      	mov	r1, r2
 80061a2:	2200      	movs	r2, #0
 80061a4:	602a      	str	r2, [r5, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	f7fa fb30 	bl	800080c <_lseek>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_lseek_r+0x1e>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_lseek_r+0x1e>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	200059d0 	.word	0x200059d0

080061bc <_read_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d07      	ldr	r5, [pc, #28]	; (80061dc <_read_r+0x20>)
 80061c0:	4604      	mov	r4, r0
 80061c2:	4608      	mov	r0, r1
 80061c4:	4611      	mov	r1, r2
 80061c6:	2200      	movs	r2, #0
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	f7fa fada 	bl	8000784 <_read>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_read_r+0x1e>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_read_r+0x1e>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	200059d0 	.word	0x200059d0

080061e0 <__libc_init_array>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4d0d      	ldr	r5, [pc, #52]	; (8006218 <__libc_init_array+0x38>)
 80061e4:	4c0d      	ldr	r4, [pc, #52]	; (800621c <__libc_init_array+0x3c>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	2600      	movs	r6, #0
 80061ec:	42a6      	cmp	r6, r4
 80061ee:	d109      	bne.n	8006204 <__libc_init_array+0x24>
 80061f0:	4d0b      	ldr	r5, [pc, #44]	; (8006220 <__libc_init_array+0x40>)
 80061f2:	4c0c      	ldr	r4, [pc, #48]	; (8006224 <__libc_init_array+0x44>)
 80061f4:	f000 fdac 	bl	8006d50 <_init>
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	2600      	movs	r6, #0
 80061fe:	42a6      	cmp	r6, r4
 8006200:	d105      	bne.n	800620e <__libc_init_array+0x2e>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	f855 3b04 	ldr.w	r3, [r5], #4
 8006208:	4798      	blx	r3
 800620a:	3601      	adds	r6, #1
 800620c:	e7ee      	b.n	80061ec <__libc_init_array+0xc>
 800620e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006212:	4798      	blx	r3
 8006214:	3601      	adds	r6, #1
 8006216:	e7f2      	b.n	80061fe <__libc_init_array+0x1e>
 8006218:	08006f28 	.word	0x08006f28
 800621c:	08006f28 	.word	0x08006f28
 8006220:	08006f28 	.word	0x08006f28
 8006224:	08006f2c 	.word	0x08006f2c

08006228 <__retarget_lock_init_recursive>:
 8006228:	4770      	bx	lr

0800622a <__retarget_lock_acquire_recursive>:
 800622a:	4770      	bx	lr

0800622c <__retarget_lock_release_recursive>:
 800622c:	4770      	bx	lr

0800622e <memcpy>:
 800622e:	440a      	add	r2, r1
 8006230:	4291      	cmp	r1, r2
 8006232:	f100 33ff 	add.w	r3, r0, #4294967295
 8006236:	d100      	bne.n	800623a <memcpy+0xc>
 8006238:	4770      	bx	lr
 800623a:	b510      	push	{r4, lr}
 800623c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006244:	4291      	cmp	r1, r2
 8006246:	d1f9      	bne.n	800623c <memcpy+0xe>
 8006248:	bd10      	pop	{r4, pc}
	...

0800624c <_free_r>:
 800624c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800624e:	2900      	cmp	r1, #0
 8006250:	d044      	beq.n	80062dc <_free_r+0x90>
 8006252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006256:	9001      	str	r0, [sp, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f1a1 0404 	sub.w	r4, r1, #4
 800625e:	bfb8      	it	lt
 8006260:	18e4      	addlt	r4, r4, r3
 8006262:	f000 f8df 	bl	8006424 <__malloc_lock>
 8006266:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <_free_r+0x94>)
 8006268:	9801      	ldr	r0, [sp, #4]
 800626a:	6813      	ldr	r3, [r2, #0]
 800626c:	b933      	cbnz	r3, 800627c <_free_r+0x30>
 800626e:	6063      	str	r3, [r4, #4]
 8006270:	6014      	str	r4, [r2, #0]
 8006272:	b003      	add	sp, #12
 8006274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006278:	f000 b8da 	b.w	8006430 <__malloc_unlock>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d908      	bls.n	8006292 <_free_r+0x46>
 8006280:	6825      	ldr	r5, [r4, #0]
 8006282:	1961      	adds	r1, r4, r5
 8006284:	428b      	cmp	r3, r1
 8006286:	bf01      	itttt	eq
 8006288:	6819      	ldreq	r1, [r3, #0]
 800628a:	685b      	ldreq	r3, [r3, #4]
 800628c:	1949      	addeq	r1, r1, r5
 800628e:	6021      	streq	r1, [r4, #0]
 8006290:	e7ed      	b.n	800626e <_free_r+0x22>
 8006292:	461a      	mov	r2, r3
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b10b      	cbz	r3, 800629c <_free_r+0x50>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d9fa      	bls.n	8006292 <_free_r+0x46>
 800629c:	6811      	ldr	r1, [r2, #0]
 800629e:	1855      	adds	r5, r2, r1
 80062a0:	42a5      	cmp	r5, r4
 80062a2:	d10b      	bne.n	80062bc <_free_r+0x70>
 80062a4:	6824      	ldr	r4, [r4, #0]
 80062a6:	4421      	add	r1, r4
 80062a8:	1854      	adds	r4, r2, r1
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	6011      	str	r1, [r2, #0]
 80062ae:	d1e0      	bne.n	8006272 <_free_r+0x26>
 80062b0:	681c      	ldr	r4, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	6053      	str	r3, [r2, #4]
 80062b6:	440c      	add	r4, r1
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	e7da      	b.n	8006272 <_free_r+0x26>
 80062bc:	d902      	bls.n	80062c4 <_free_r+0x78>
 80062be:	230c      	movs	r3, #12
 80062c0:	6003      	str	r3, [r0, #0]
 80062c2:	e7d6      	b.n	8006272 <_free_r+0x26>
 80062c4:	6825      	ldr	r5, [r4, #0]
 80062c6:	1961      	adds	r1, r4, r5
 80062c8:	428b      	cmp	r3, r1
 80062ca:	bf04      	itt	eq
 80062cc:	6819      	ldreq	r1, [r3, #0]
 80062ce:	685b      	ldreq	r3, [r3, #4]
 80062d0:	6063      	str	r3, [r4, #4]
 80062d2:	bf04      	itt	eq
 80062d4:	1949      	addeq	r1, r1, r5
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	6054      	str	r4, [r2, #4]
 80062da:	e7ca      	b.n	8006272 <_free_r+0x26>
 80062dc:	b003      	add	sp, #12
 80062de:	bd30      	pop	{r4, r5, pc}
 80062e0:	200059d8 	.word	0x200059d8

080062e4 <sbrk_aligned>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4e0e      	ldr	r6, [pc, #56]	; (8006320 <sbrk_aligned+0x3c>)
 80062e8:	460c      	mov	r4, r1
 80062ea:	6831      	ldr	r1, [r6, #0]
 80062ec:	4605      	mov	r5, r0
 80062ee:	b911      	cbnz	r1, 80062f6 <sbrk_aligned+0x12>
 80062f0:	f000 fcd8 	bl	8006ca4 <_sbrk_r>
 80062f4:	6030      	str	r0, [r6, #0]
 80062f6:	4621      	mov	r1, r4
 80062f8:	4628      	mov	r0, r5
 80062fa:	f000 fcd3 	bl	8006ca4 <_sbrk_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d00a      	beq.n	8006318 <sbrk_aligned+0x34>
 8006302:	1cc4      	adds	r4, r0, #3
 8006304:	f024 0403 	bic.w	r4, r4, #3
 8006308:	42a0      	cmp	r0, r4
 800630a:	d007      	beq.n	800631c <sbrk_aligned+0x38>
 800630c:	1a21      	subs	r1, r4, r0
 800630e:	4628      	mov	r0, r5
 8006310:	f000 fcc8 	bl	8006ca4 <_sbrk_r>
 8006314:	3001      	adds	r0, #1
 8006316:	d101      	bne.n	800631c <sbrk_aligned+0x38>
 8006318:	f04f 34ff 	mov.w	r4, #4294967295
 800631c:	4620      	mov	r0, r4
 800631e:	bd70      	pop	{r4, r5, r6, pc}
 8006320:	200059dc 	.word	0x200059dc

08006324 <_malloc_r>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	1ccd      	adds	r5, r1, #3
 800632a:	f025 0503 	bic.w	r5, r5, #3
 800632e:	3508      	adds	r5, #8
 8006330:	2d0c      	cmp	r5, #12
 8006332:	bf38      	it	cc
 8006334:	250c      	movcc	r5, #12
 8006336:	2d00      	cmp	r5, #0
 8006338:	4607      	mov	r7, r0
 800633a:	db01      	blt.n	8006340 <_malloc_r+0x1c>
 800633c:	42a9      	cmp	r1, r5
 800633e:	d905      	bls.n	800634c <_malloc_r+0x28>
 8006340:	230c      	movs	r3, #12
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	2600      	movs	r6, #0
 8006346:	4630      	mov	r0, r6
 8006348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006420 <_malloc_r+0xfc>
 8006350:	f000 f868 	bl	8006424 <__malloc_lock>
 8006354:	f8d8 3000 	ldr.w	r3, [r8]
 8006358:	461c      	mov	r4, r3
 800635a:	bb5c      	cbnz	r4, 80063b4 <_malloc_r+0x90>
 800635c:	4629      	mov	r1, r5
 800635e:	4638      	mov	r0, r7
 8006360:	f7ff ffc0 	bl	80062e4 <sbrk_aligned>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	4604      	mov	r4, r0
 8006368:	d155      	bne.n	8006416 <_malloc_r+0xf2>
 800636a:	f8d8 4000 	ldr.w	r4, [r8]
 800636e:	4626      	mov	r6, r4
 8006370:	2e00      	cmp	r6, #0
 8006372:	d145      	bne.n	8006400 <_malloc_r+0xdc>
 8006374:	2c00      	cmp	r4, #0
 8006376:	d048      	beq.n	800640a <_malloc_r+0xe6>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	4631      	mov	r1, r6
 800637c:	4638      	mov	r0, r7
 800637e:	eb04 0903 	add.w	r9, r4, r3
 8006382:	f000 fc8f 	bl	8006ca4 <_sbrk_r>
 8006386:	4581      	cmp	r9, r0
 8006388:	d13f      	bne.n	800640a <_malloc_r+0xe6>
 800638a:	6821      	ldr	r1, [r4, #0]
 800638c:	1a6d      	subs	r5, r5, r1
 800638e:	4629      	mov	r1, r5
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff ffa7 	bl	80062e4 <sbrk_aligned>
 8006396:	3001      	adds	r0, #1
 8006398:	d037      	beq.n	800640a <_malloc_r+0xe6>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	442b      	add	r3, r5
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	f8d8 3000 	ldr.w	r3, [r8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d038      	beq.n	800641a <_malloc_r+0xf6>
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	42a2      	cmp	r2, r4
 80063ac:	d12b      	bne.n	8006406 <_malloc_r+0xe2>
 80063ae:	2200      	movs	r2, #0
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	e00f      	b.n	80063d4 <_malloc_r+0xb0>
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	1b52      	subs	r2, r2, r5
 80063b8:	d41f      	bmi.n	80063fa <_malloc_r+0xd6>
 80063ba:	2a0b      	cmp	r2, #11
 80063bc:	d917      	bls.n	80063ee <_malloc_r+0xca>
 80063be:	1961      	adds	r1, r4, r5
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	6025      	str	r5, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	6059      	strne	r1, [r3, #4]
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	bf08      	it	eq
 80063cc:	f8c8 1000 	streq.w	r1, [r8]
 80063d0:	5162      	str	r2, [r4, r5]
 80063d2:	604b      	str	r3, [r1, #4]
 80063d4:	4638      	mov	r0, r7
 80063d6:	f104 060b 	add.w	r6, r4, #11
 80063da:	f000 f829 	bl	8006430 <__malloc_unlock>
 80063de:	f026 0607 	bic.w	r6, r6, #7
 80063e2:	1d23      	adds	r3, r4, #4
 80063e4:	1af2      	subs	r2, r6, r3
 80063e6:	d0ae      	beq.n	8006346 <_malloc_r+0x22>
 80063e8:	1b9b      	subs	r3, r3, r6
 80063ea:	50a3      	str	r3, [r4, r2]
 80063ec:	e7ab      	b.n	8006346 <_malloc_r+0x22>
 80063ee:	42a3      	cmp	r3, r4
 80063f0:	6862      	ldr	r2, [r4, #4]
 80063f2:	d1dd      	bne.n	80063b0 <_malloc_r+0x8c>
 80063f4:	f8c8 2000 	str.w	r2, [r8]
 80063f8:	e7ec      	b.n	80063d4 <_malloc_r+0xb0>
 80063fa:	4623      	mov	r3, r4
 80063fc:	6864      	ldr	r4, [r4, #4]
 80063fe:	e7ac      	b.n	800635a <_malloc_r+0x36>
 8006400:	4634      	mov	r4, r6
 8006402:	6876      	ldr	r6, [r6, #4]
 8006404:	e7b4      	b.n	8006370 <_malloc_r+0x4c>
 8006406:	4613      	mov	r3, r2
 8006408:	e7cc      	b.n	80063a4 <_malloc_r+0x80>
 800640a:	230c      	movs	r3, #12
 800640c:	603b      	str	r3, [r7, #0]
 800640e:	4638      	mov	r0, r7
 8006410:	f000 f80e 	bl	8006430 <__malloc_unlock>
 8006414:	e797      	b.n	8006346 <_malloc_r+0x22>
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	e7dc      	b.n	80063d4 <_malloc_r+0xb0>
 800641a:	605b      	str	r3, [r3, #4]
 800641c:	deff      	udf	#255	; 0xff
 800641e:	bf00      	nop
 8006420:	200059d8 	.word	0x200059d8

08006424 <__malloc_lock>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__malloc_lock+0x8>)
 8006426:	f7ff bf00 	b.w	800622a <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	200059d4 	.word	0x200059d4

08006430 <__malloc_unlock>:
 8006430:	4801      	ldr	r0, [pc, #4]	; (8006438 <__malloc_unlock+0x8>)
 8006432:	f7ff befb 	b.w	800622c <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	200059d4 	.word	0x200059d4

0800643c <__ssputs_r>:
 800643c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	688e      	ldr	r6, [r1, #8]
 8006442:	461f      	mov	r7, r3
 8006444:	42be      	cmp	r6, r7
 8006446:	680b      	ldr	r3, [r1, #0]
 8006448:	4682      	mov	sl, r0
 800644a:	460c      	mov	r4, r1
 800644c:	4690      	mov	r8, r2
 800644e:	d82c      	bhi.n	80064aa <__ssputs_r+0x6e>
 8006450:	898a      	ldrh	r2, [r1, #12]
 8006452:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006456:	d026      	beq.n	80064a6 <__ssputs_r+0x6a>
 8006458:	6965      	ldr	r5, [r4, #20]
 800645a:	6909      	ldr	r1, [r1, #16]
 800645c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006460:	eba3 0901 	sub.w	r9, r3, r1
 8006464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006468:	1c7b      	adds	r3, r7, #1
 800646a:	444b      	add	r3, r9
 800646c:	106d      	asrs	r5, r5, #1
 800646e:	429d      	cmp	r5, r3
 8006470:	bf38      	it	cc
 8006472:	461d      	movcc	r5, r3
 8006474:	0553      	lsls	r3, r2, #21
 8006476:	d527      	bpl.n	80064c8 <__ssputs_r+0x8c>
 8006478:	4629      	mov	r1, r5
 800647a:	f7ff ff53 	bl	8006324 <_malloc_r>
 800647e:	4606      	mov	r6, r0
 8006480:	b360      	cbz	r0, 80064dc <__ssputs_r+0xa0>
 8006482:	6921      	ldr	r1, [r4, #16]
 8006484:	464a      	mov	r2, r9
 8006486:	f7ff fed2 	bl	800622e <memcpy>
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006494:	81a3      	strh	r3, [r4, #12]
 8006496:	6126      	str	r6, [r4, #16]
 8006498:	6165      	str	r5, [r4, #20]
 800649a:	444e      	add	r6, r9
 800649c:	eba5 0509 	sub.w	r5, r5, r9
 80064a0:	6026      	str	r6, [r4, #0]
 80064a2:	60a5      	str	r5, [r4, #8]
 80064a4:	463e      	mov	r6, r7
 80064a6:	42be      	cmp	r6, r7
 80064a8:	d900      	bls.n	80064ac <__ssputs_r+0x70>
 80064aa:	463e      	mov	r6, r7
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	4632      	mov	r2, r6
 80064b0:	4641      	mov	r1, r8
 80064b2:	f000 fbbb 	bl	8006c2c <memmove>
 80064b6:	68a3      	ldr	r3, [r4, #8]
 80064b8:	1b9b      	subs	r3, r3, r6
 80064ba:	60a3      	str	r3, [r4, #8]
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	4433      	add	r3, r6
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	2000      	movs	r0, #0
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	462a      	mov	r2, r5
 80064ca:	f000 fbfb 	bl	8006cc4 <_realloc_r>
 80064ce:	4606      	mov	r6, r0
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d1e0      	bne.n	8006496 <__ssputs_r+0x5a>
 80064d4:	6921      	ldr	r1, [r4, #16]
 80064d6:	4650      	mov	r0, sl
 80064d8:	f7ff feb8 	bl	800624c <_free_r>
 80064dc:	230c      	movs	r3, #12
 80064de:	f8ca 3000 	str.w	r3, [sl]
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e8:	81a3      	strh	r3, [r4, #12]
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	e7e9      	b.n	80064c4 <__ssputs_r+0x88>

080064f0 <_svfiprintf_r>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	4698      	mov	r8, r3
 80064f6:	898b      	ldrh	r3, [r1, #12]
 80064f8:	061b      	lsls	r3, r3, #24
 80064fa:	b09d      	sub	sp, #116	; 0x74
 80064fc:	4607      	mov	r7, r0
 80064fe:	460d      	mov	r5, r1
 8006500:	4614      	mov	r4, r2
 8006502:	d50e      	bpl.n	8006522 <_svfiprintf_r+0x32>
 8006504:	690b      	ldr	r3, [r1, #16]
 8006506:	b963      	cbnz	r3, 8006522 <_svfiprintf_r+0x32>
 8006508:	2140      	movs	r1, #64	; 0x40
 800650a:	f7ff ff0b 	bl	8006324 <_malloc_r>
 800650e:	6028      	str	r0, [r5, #0]
 8006510:	6128      	str	r0, [r5, #16]
 8006512:	b920      	cbnz	r0, 800651e <_svfiprintf_r+0x2e>
 8006514:	230c      	movs	r3, #12
 8006516:	603b      	str	r3, [r7, #0]
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	e0d0      	b.n	80066c0 <_svfiprintf_r+0x1d0>
 800651e:	2340      	movs	r3, #64	; 0x40
 8006520:	616b      	str	r3, [r5, #20]
 8006522:	2300      	movs	r3, #0
 8006524:	9309      	str	r3, [sp, #36]	; 0x24
 8006526:	2320      	movs	r3, #32
 8006528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800652c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006530:	2330      	movs	r3, #48	; 0x30
 8006532:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066d8 <_svfiprintf_r+0x1e8>
 8006536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800653a:	f04f 0901 	mov.w	r9, #1
 800653e:	4623      	mov	r3, r4
 8006540:	469a      	mov	sl, r3
 8006542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006546:	b10a      	cbz	r2, 800654c <_svfiprintf_r+0x5c>
 8006548:	2a25      	cmp	r2, #37	; 0x25
 800654a:	d1f9      	bne.n	8006540 <_svfiprintf_r+0x50>
 800654c:	ebba 0b04 	subs.w	fp, sl, r4
 8006550:	d00b      	beq.n	800656a <_svfiprintf_r+0x7a>
 8006552:	465b      	mov	r3, fp
 8006554:	4622      	mov	r2, r4
 8006556:	4629      	mov	r1, r5
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ff6f 	bl	800643c <__ssputs_r>
 800655e:	3001      	adds	r0, #1
 8006560:	f000 80a9 	beq.w	80066b6 <_svfiprintf_r+0x1c6>
 8006564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006566:	445a      	add	r2, fp
 8006568:	9209      	str	r2, [sp, #36]	; 0x24
 800656a:	f89a 3000 	ldrb.w	r3, [sl]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 80a1 	beq.w	80066b6 <_svfiprintf_r+0x1c6>
 8006574:	2300      	movs	r3, #0
 8006576:	f04f 32ff 	mov.w	r2, #4294967295
 800657a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800657e:	f10a 0a01 	add.w	sl, sl, #1
 8006582:	9304      	str	r3, [sp, #16]
 8006584:	9307      	str	r3, [sp, #28]
 8006586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800658a:	931a      	str	r3, [sp, #104]	; 0x68
 800658c:	4654      	mov	r4, sl
 800658e:	2205      	movs	r2, #5
 8006590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006594:	4850      	ldr	r0, [pc, #320]	; (80066d8 <_svfiprintf_r+0x1e8>)
 8006596:	f7f9 fe6b 	bl	8000270 <memchr>
 800659a:	9a04      	ldr	r2, [sp, #16]
 800659c:	b9d8      	cbnz	r0, 80065d6 <_svfiprintf_r+0xe6>
 800659e:	06d0      	lsls	r0, r2, #27
 80065a0:	bf44      	itt	mi
 80065a2:	2320      	movmi	r3, #32
 80065a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a8:	0711      	lsls	r1, r2, #28
 80065aa:	bf44      	itt	mi
 80065ac:	232b      	movmi	r3, #43	; 0x2b
 80065ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b2:	f89a 3000 	ldrb.w	r3, [sl]
 80065b6:	2b2a      	cmp	r3, #42	; 0x2a
 80065b8:	d015      	beq.n	80065e6 <_svfiprintf_r+0xf6>
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	4654      	mov	r4, sl
 80065be:	2000      	movs	r0, #0
 80065c0:	f04f 0c0a 	mov.w	ip, #10
 80065c4:	4621      	mov	r1, r4
 80065c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ca:	3b30      	subs	r3, #48	; 0x30
 80065cc:	2b09      	cmp	r3, #9
 80065ce:	d94d      	bls.n	800666c <_svfiprintf_r+0x17c>
 80065d0:	b1b0      	cbz	r0, 8006600 <_svfiprintf_r+0x110>
 80065d2:	9207      	str	r2, [sp, #28]
 80065d4:	e014      	b.n	8006600 <_svfiprintf_r+0x110>
 80065d6:	eba0 0308 	sub.w	r3, r0, r8
 80065da:	fa09 f303 	lsl.w	r3, r9, r3
 80065de:	4313      	orrs	r3, r2
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	46a2      	mov	sl, r4
 80065e4:	e7d2      	b.n	800658c <_svfiprintf_r+0x9c>
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	1d19      	adds	r1, r3, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	9103      	str	r1, [sp, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bfbb      	ittet	lt
 80065f2:	425b      	neglt	r3, r3
 80065f4:	f042 0202 	orrlt.w	r2, r2, #2
 80065f8:	9307      	strge	r3, [sp, #28]
 80065fa:	9307      	strlt	r3, [sp, #28]
 80065fc:	bfb8      	it	lt
 80065fe:	9204      	strlt	r2, [sp, #16]
 8006600:	7823      	ldrb	r3, [r4, #0]
 8006602:	2b2e      	cmp	r3, #46	; 0x2e
 8006604:	d10c      	bne.n	8006620 <_svfiprintf_r+0x130>
 8006606:	7863      	ldrb	r3, [r4, #1]
 8006608:	2b2a      	cmp	r3, #42	; 0x2a
 800660a:	d134      	bne.n	8006676 <_svfiprintf_r+0x186>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	1d1a      	adds	r2, r3, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	9203      	str	r2, [sp, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	bfb8      	it	lt
 8006618:	f04f 33ff 	movlt.w	r3, #4294967295
 800661c:	3402      	adds	r4, #2
 800661e:	9305      	str	r3, [sp, #20]
 8006620:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80066e8 <_svfiprintf_r+0x1f8>
 8006624:	7821      	ldrb	r1, [r4, #0]
 8006626:	2203      	movs	r2, #3
 8006628:	4650      	mov	r0, sl
 800662a:	f7f9 fe21 	bl	8000270 <memchr>
 800662e:	b138      	cbz	r0, 8006640 <_svfiprintf_r+0x150>
 8006630:	9b04      	ldr	r3, [sp, #16]
 8006632:	eba0 000a 	sub.w	r0, r0, sl
 8006636:	2240      	movs	r2, #64	; 0x40
 8006638:	4082      	lsls	r2, r0
 800663a:	4313      	orrs	r3, r2
 800663c:	3401      	adds	r4, #1
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	4825      	ldr	r0, [pc, #148]	; (80066dc <_svfiprintf_r+0x1ec>)
 8006646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800664a:	2206      	movs	r2, #6
 800664c:	f7f9 fe10 	bl	8000270 <memchr>
 8006650:	2800      	cmp	r0, #0
 8006652:	d038      	beq.n	80066c6 <_svfiprintf_r+0x1d6>
 8006654:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <_svfiprintf_r+0x1f0>)
 8006656:	bb1b      	cbnz	r3, 80066a0 <_svfiprintf_r+0x1b0>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	3307      	adds	r3, #7
 800665c:	f023 0307 	bic.w	r3, r3, #7
 8006660:	3308      	adds	r3, #8
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006666:	4433      	add	r3, r6
 8006668:	9309      	str	r3, [sp, #36]	; 0x24
 800666a:	e768      	b.n	800653e <_svfiprintf_r+0x4e>
 800666c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006670:	460c      	mov	r4, r1
 8006672:	2001      	movs	r0, #1
 8006674:	e7a6      	b.n	80065c4 <_svfiprintf_r+0xd4>
 8006676:	2300      	movs	r3, #0
 8006678:	3401      	adds	r4, #1
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	4619      	mov	r1, r3
 800667e:	f04f 0c0a 	mov.w	ip, #10
 8006682:	4620      	mov	r0, r4
 8006684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006688:	3a30      	subs	r2, #48	; 0x30
 800668a:	2a09      	cmp	r2, #9
 800668c:	d903      	bls.n	8006696 <_svfiprintf_r+0x1a6>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0c6      	beq.n	8006620 <_svfiprintf_r+0x130>
 8006692:	9105      	str	r1, [sp, #20]
 8006694:	e7c4      	b.n	8006620 <_svfiprintf_r+0x130>
 8006696:	fb0c 2101 	mla	r1, ip, r1, r2
 800669a:	4604      	mov	r4, r0
 800669c:	2301      	movs	r3, #1
 800669e:	e7f0      	b.n	8006682 <_svfiprintf_r+0x192>
 80066a0:	ab03      	add	r3, sp, #12
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	462a      	mov	r2, r5
 80066a6:	4b0f      	ldr	r3, [pc, #60]	; (80066e4 <_svfiprintf_r+0x1f4>)
 80066a8:	a904      	add	r1, sp, #16
 80066aa:	4638      	mov	r0, r7
 80066ac:	f3af 8000 	nop.w
 80066b0:	1c42      	adds	r2, r0, #1
 80066b2:	4606      	mov	r6, r0
 80066b4:	d1d6      	bne.n	8006664 <_svfiprintf_r+0x174>
 80066b6:	89ab      	ldrh	r3, [r5, #12]
 80066b8:	065b      	lsls	r3, r3, #25
 80066ba:	f53f af2d 	bmi.w	8006518 <_svfiprintf_r+0x28>
 80066be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c0:	b01d      	add	sp, #116	; 0x74
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	ab03      	add	r3, sp, #12
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	462a      	mov	r2, r5
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <_svfiprintf_r+0x1f4>)
 80066ce:	a904      	add	r1, sp, #16
 80066d0:	4638      	mov	r0, r7
 80066d2:	f000 f879 	bl	80067c8 <_printf_i>
 80066d6:	e7eb      	b.n	80066b0 <_svfiprintf_r+0x1c0>
 80066d8:	08006ef4 	.word	0x08006ef4
 80066dc:	08006efe 	.word	0x08006efe
 80066e0:	00000000 	.word	0x00000000
 80066e4:	0800643d 	.word	0x0800643d
 80066e8:	08006efa 	.word	0x08006efa

080066ec <_printf_common>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	4616      	mov	r6, r2
 80066f2:	4699      	mov	r9, r3
 80066f4:	688a      	ldr	r2, [r1, #8]
 80066f6:	690b      	ldr	r3, [r1, #16]
 80066f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	bfb8      	it	lt
 8006700:	4613      	movlt	r3, r2
 8006702:	6033      	str	r3, [r6, #0]
 8006704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006708:	4607      	mov	r7, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b10a      	cbz	r2, 8006712 <_printf_common+0x26>
 800670e:	3301      	adds	r3, #1
 8006710:	6033      	str	r3, [r6, #0]
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	0699      	lsls	r1, r3, #26
 8006716:	bf42      	ittt	mi
 8006718:	6833      	ldrmi	r3, [r6, #0]
 800671a:	3302      	addmi	r3, #2
 800671c:	6033      	strmi	r3, [r6, #0]
 800671e:	6825      	ldr	r5, [r4, #0]
 8006720:	f015 0506 	ands.w	r5, r5, #6
 8006724:	d106      	bne.n	8006734 <_printf_common+0x48>
 8006726:	f104 0a19 	add.w	sl, r4, #25
 800672a:	68e3      	ldr	r3, [r4, #12]
 800672c:	6832      	ldr	r2, [r6, #0]
 800672e:	1a9b      	subs	r3, r3, r2
 8006730:	42ab      	cmp	r3, r5
 8006732:	dc26      	bgt.n	8006782 <_printf_common+0x96>
 8006734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006738:	1e13      	subs	r3, r2, #0
 800673a:	6822      	ldr	r2, [r4, #0]
 800673c:	bf18      	it	ne
 800673e:	2301      	movne	r3, #1
 8006740:	0692      	lsls	r2, r2, #26
 8006742:	d42b      	bmi.n	800679c <_printf_common+0xb0>
 8006744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006748:	4649      	mov	r1, r9
 800674a:	4638      	mov	r0, r7
 800674c:	47c0      	blx	r8
 800674e:	3001      	adds	r0, #1
 8006750:	d01e      	beq.n	8006790 <_printf_common+0xa4>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6922      	ldr	r2, [r4, #16]
 8006756:	f003 0306 	and.w	r3, r3, #6
 800675a:	2b04      	cmp	r3, #4
 800675c:	bf02      	ittt	eq
 800675e:	68e5      	ldreq	r5, [r4, #12]
 8006760:	6833      	ldreq	r3, [r6, #0]
 8006762:	1aed      	subeq	r5, r5, r3
 8006764:	68a3      	ldr	r3, [r4, #8]
 8006766:	bf0c      	ite	eq
 8006768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800676c:	2500      	movne	r5, #0
 800676e:	4293      	cmp	r3, r2
 8006770:	bfc4      	itt	gt
 8006772:	1a9b      	subgt	r3, r3, r2
 8006774:	18ed      	addgt	r5, r5, r3
 8006776:	2600      	movs	r6, #0
 8006778:	341a      	adds	r4, #26
 800677a:	42b5      	cmp	r5, r6
 800677c:	d11a      	bne.n	80067b4 <_printf_common+0xc8>
 800677e:	2000      	movs	r0, #0
 8006780:	e008      	b.n	8006794 <_printf_common+0xa8>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4649      	mov	r1, r9
 8006788:	4638      	mov	r0, r7
 800678a:	47c0      	blx	r8
 800678c:	3001      	adds	r0, #1
 800678e:	d103      	bne.n	8006798 <_printf_common+0xac>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	3501      	adds	r5, #1
 800679a:	e7c6      	b.n	800672a <_printf_common+0x3e>
 800679c:	18e1      	adds	r1, r4, r3
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	2030      	movs	r0, #48	; 0x30
 80067a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a6:	4422      	add	r2, r4
 80067a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b0:	3302      	adds	r3, #2
 80067b2:	e7c7      	b.n	8006744 <_printf_common+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4622      	mov	r2, r4
 80067b8:	4649      	mov	r1, r9
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d0e6      	beq.n	8006790 <_printf_common+0xa4>
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7d9      	b.n	800677a <_printf_common+0x8e>
	...

080067c8 <_printf_i>:
 80067c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	7e0f      	ldrb	r7, [r1, #24]
 80067ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067d0:	2f78      	cmp	r7, #120	; 0x78
 80067d2:	4691      	mov	r9, r2
 80067d4:	4680      	mov	r8, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	469a      	mov	sl, r3
 80067da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067de:	d807      	bhi.n	80067f0 <_printf_i+0x28>
 80067e0:	2f62      	cmp	r7, #98	; 0x62
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x32>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f000 80d4 	beq.w	8006992 <_printf_i+0x1ca>
 80067ea:	2f58      	cmp	r7, #88	; 0x58
 80067ec:	f000 80c0 	beq.w	8006970 <_printf_i+0x1a8>
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f8:	e03a      	b.n	8006870 <_printf_i+0xa8>
 80067fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067fe:	2b15      	cmp	r3, #21
 8006800:	d8f6      	bhi.n	80067f0 <_printf_i+0x28>
 8006802:	a101      	add	r1, pc, #4	; (adr r1, 8006808 <_printf_i+0x40>)
 8006804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006808:	08006861 	.word	0x08006861
 800680c:	08006875 	.word	0x08006875
 8006810:	080067f1 	.word	0x080067f1
 8006814:	080067f1 	.word	0x080067f1
 8006818:	080067f1 	.word	0x080067f1
 800681c:	080067f1 	.word	0x080067f1
 8006820:	08006875 	.word	0x08006875
 8006824:	080067f1 	.word	0x080067f1
 8006828:	080067f1 	.word	0x080067f1
 800682c:	080067f1 	.word	0x080067f1
 8006830:	080067f1 	.word	0x080067f1
 8006834:	08006979 	.word	0x08006979
 8006838:	080068a1 	.word	0x080068a1
 800683c:	08006933 	.word	0x08006933
 8006840:	080067f1 	.word	0x080067f1
 8006844:	080067f1 	.word	0x080067f1
 8006848:	0800699b 	.word	0x0800699b
 800684c:	080067f1 	.word	0x080067f1
 8006850:	080068a1 	.word	0x080068a1
 8006854:	080067f1 	.word	0x080067f1
 8006858:	080067f1 	.word	0x080067f1
 800685c:	0800693b 	.word	0x0800693b
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	602a      	str	r2, [r5, #0]
 8006868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006870:	2301      	movs	r3, #1
 8006872:	e09f      	b.n	80069b4 <_printf_i+0x1ec>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	682b      	ldr	r3, [r5, #0]
 8006878:	0607      	lsls	r7, r0, #24
 800687a:	f103 0104 	add.w	r1, r3, #4
 800687e:	6029      	str	r1, [r5, #0]
 8006880:	d501      	bpl.n	8006886 <_printf_i+0xbe>
 8006882:	681e      	ldr	r6, [r3, #0]
 8006884:	e003      	b.n	800688e <_printf_i+0xc6>
 8006886:	0646      	lsls	r6, r0, #25
 8006888:	d5fb      	bpl.n	8006882 <_printf_i+0xba>
 800688a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800688e:	2e00      	cmp	r6, #0
 8006890:	da03      	bge.n	800689a <_printf_i+0xd2>
 8006892:	232d      	movs	r3, #45	; 0x2d
 8006894:	4276      	negs	r6, r6
 8006896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689a:	485a      	ldr	r0, [pc, #360]	; (8006a04 <_printf_i+0x23c>)
 800689c:	230a      	movs	r3, #10
 800689e:	e012      	b.n	80068c6 <_printf_i+0xfe>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	6820      	ldr	r0, [r4, #0]
 80068a4:	1d19      	adds	r1, r3, #4
 80068a6:	6029      	str	r1, [r5, #0]
 80068a8:	0605      	lsls	r5, r0, #24
 80068aa:	d501      	bpl.n	80068b0 <_printf_i+0xe8>
 80068ac:	681e      	ldr	r6, [r3, #0]
 80068ae:	e002      	b.n	80068b6 <_printf_i+0xee>
 80068b0:	0641      	lsls	r1, r0, #25
 80068b2:	d5fb      	bpl.n	80068ac <_printf_i+0xe4>
 80068b4:	881e      	ldrh	r6, [r3, #0]
 80068b6:	4853      	ldr	r0, [pc, #332]	; (8006a04 <_printf_i+0x23c>)
 80068b8:	2f6f      	cmp	r7, #111	; 0x6f
 80068ba:	bf0c      	ite	eq
 80068bc:	2308      	moveq	r3, #8
 80068be:	230a      	movne	r3, #10
 80068c0:	2100      	movs	r1, #0
 80068c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068c6:	6865      	ldr	r5, [r4, #4]
 80068c8:	60a5      	str	r5, [r4, #8]
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	bfa2      	ittt	ge
 80068ce:	6821      	ldrge	r1, [r4, #0]
 80068d0:	f021 0104 	bicge.w	r1, r1, #4
 80068d4:	6021      	strge	r1, [r4, #0]
 80068d6:	b90e      	cbnz	r6, 80068dc <_printf_i+0x114>
 80068d8:	2d00      	cmp	r5, #0
 80068da:	d04b      	beq.n	8006974 <_printf_i+0x1ac>
 80068dc:	4615      	mov	r5, r2
 80068de:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e2:	fb03 6711 	mls	r7, r3, r1, r6
 80068e6:	5dc7      	ldrb	r7, [r0, r7]
 80068e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068ec:	4637      	mov	r7, r6
 80068ee:	42bb      	cmp	r3, r7
 80068f0:	460e      	mov	r6, r1
 80068f2:	d9f4      	bls.n	80068de <_printf_i+0x116>
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d10b      	bne.n	8006910 <_printf_i+0x148>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07de      	lsls	r6, r3, #31
 80068fc:	d508      	bpl.n	8006910 <_printf_i+0x148>
 80068fe:	6923      	ldr	r3, [r4, #16]
 8006900:	6861      	ldr	r1, [r4, #4]
 8006902:	4299      	cmp	r1, r3
 8006904:	bfde      	ittt	le
 8006906:	2330      	movle	r3, #48	; 0x30
 8006908:	f805 3c01 	strble.w	r3, [r5, #-1]
 800690c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006910:	1b52      	subs	r2, r2, r5
 8006912:	6122      	str	r2, [r4, #16]
 8006914:	f8cd a000 	str.w	sl, [sp]
 8006918:	464b      	mov	r3, r9
 800691a:	aa03      	add	r2, sp, #12
 800691c:	4621      	mov	r1, r4
 800691e:	4640      	mov	r0, r8
 8006920:	f7ff fee4 	bl	80066ec <_printf_common>
 8006924:	3001      	adds	r0, #1
 8006926:	d14a      	bne.n	80069be <_printf_i+0x1f6>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	b004      	add	sp, #16
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	f043 0320 	orr.w	r3, r3, #32
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	4833      	ldr	r0, [pc, #204]	; (8006a08 <_printf_i+0x240>)
 800693c:	2778      	movs	r7, #120	; 0x78
 800693e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	6829      	ldr	r1, [r5, #0]
 8006946:	061f      	lsls	r7, r3, #24
 8006948:	f851 6b04 	ldr.w	r6, [r1], #4
 800694c:	d402      	bmi.n	8006954 <_printf_i+0x18c>
 800694e:	065f      	lsls	r7, r3, #25
 8006950:	bf48      	it	mi
 8006952:	b2b6      	uxthmi	r6, r6
 8006954:	07df      	lsls	r7, r3, #31
 8006956:	bf48      	it	mi
 8006958:	f043 0320 	orrmi.w	r3, r3, #32
 800695c:	6029      	str	r1, [r5, #0]
 800695e:	bf48      	it	mi
 8006960:	6023      	strmi	r3, [r4, #0]
 8006962:	b91e      	cbnz	r6, 800696c <_printf_i+0x1a4>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	f023 0320 	bic.w	r3, r3, #32
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	2310      	movs	r3, #16
 800696e:	e7a7      	b.n	80068c0 <_printf_i+0xf8>
 8006970:	4824      	ldr	r0, [pc, #144]	; (8006a04 <_printf_i+0x23c>)
 8006972:	e7e4      	b.n	800693e <_printf_i+0x176>
 8006974:	4615      	mov	r5, r2
 8006976:	e7bd      	b.n	80068f4 <_printf_i+0x12c>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	6826      	ldr	r6, [r4, #0]
 800697c:	6961      	ldr	r1, [r4, #20]
 800697e:	1d18      	adds	r0, r3, #4
 8006980:	6028      	str	r0, [r5, #0]
 8006982:	0635      	lsls	r5, r6, #24
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	d501      	bpl.n	800698c <_printf_i+0x1c4>
 8006988:	6019      	str	r1, [r3, #0]
 800698a:	e002      	b.n	8006992 <_printf_i+0x1ca>
 800698c:	0670      	lsls	r0, r6, #25
 800698e:	d5fb      	bpl.n	8006988 <_printf_i+0x1c0>
 8006990:	8019      	strh	r1, [r3, #0]
 8006992:	2300      	movs	r3, #0
 8006994:	6123      	str	r3, [r4, #16]
 8006996:	4615      	mov	r5, r2
 8006998:	e7bc      	b.n	8006914 <_printf_i+0x14c>
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	1d1a      	adds	r2, r3, #4
 800699e:	602a      	str	r2, [r5, #0]
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	6862      	ldr	r2, [r4, #4]
 80069a4:	2100      	movs	r1, #0
 80069a6:	4628      	mov	r0, r5
 80069a8:	f7f9 fc62 	bl	8000270 <memchr>
 80069ac:	b108      	cbz	r0, 80069b2 <_printf_i+0x1ea>
 80069ae:	1b40      	subs	r0, r0, r5
 80069b0:	6060      	str	r0, [r4, #4]
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	2300      	movs	r3, #0
 80069b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069bc:	e7aa      	b.n	8006914 <_printf_i+0x14c>
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	462a      	mov	r2, r5
 80069c2:	4649      	mov	r1, r9
 80069c4:	4640      	mov	r0, r8
 80069c6:	47d0      	blx	sl
 80069c8:	3001      	adds	r0, #1
 80069ca:	d0ad      	beq.n	8006928 <_printf_i+0x160>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	079b      	lsls	r3, r3, #30
 80069d0:	d413      	bmi.n	80069fa <_printf_i+0x232>
 80069d2:	68e0      	ldr	r0, [r4, #12]
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	4298      	cmp	r0, r3
 80069d8:	bfb8      	it	lt
 80069da:	4618      	movlt	r0, r3
 80069dc:	e7a6      	b.n	800692c <_printf_i+0x164>
 80069de:	2301      	movs	r3, #1
 80069e0:	4632      	mov	r2, r6
 80069e2:	4649      	mov	r1, r9
 80069e4:	4640      	mov	r0, r8
 80069e6:	47d0      	blx	sl
 80069e8:	3001      	adds	r0, #1
 80069ea:	d09d      	beq.n	8006928 <_printf_i+0x160>
 80069ec:	3501      	adds	r5, #1
 80069ee:	68e3      	ldr	r3, [r4, #12]
 80069f0:	9903      	ldr	r1, [sp, #12]
 80069f2:	1a5b      	subs	r3, r3, r1
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	dcf2      	bgt.n	80069de <_printf_i+0x216>
 80069f8:	e7eb      	b.n	80069d2 <_printf_i+0x20a>
 80069fa:	2500      	movs	r5, #0
 80069fc:	f104 0619 	add.w	r6, r4, #25
 8006a00:	e7f5      	b.n	80069ee <_printf_i+0x226>
 8006a02:	bf00      	nop
 8006a04:	08006f05 	.word	0x08006f05
 8006a08:	08006f16 	.word	0x08006f16

08006a0c <__sflush_r>:
 8006a0c:	898a      	ldrh	r2, [r1, #12]
 8006a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a12:	4605      	mov	r5, r0
 8006a14:	0710      	lsls	r0, r2, #28
 8006a16:	460c      	mov	r4, r1
 8006a18:	d458      	bmi.n	8006acc <__sflush_r+0xc0>
 8006a1a:	684b      	ldr	r3, [r1, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc05      	bgt.n	8006a2c <__sflush_r+0x20>
 8006a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	dc02      	bgt.n	8006a2c <__sflush_r+0x20>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d0f9      	beq.n	8006a26 <__sflush_r+0x1a>
 8006a32:	2300      	movs	r3, #0
 8006a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a38:	682f      	ldr	r7, [r5, #0]
 8006a3a:	6a21      	ldr	r1, [r4, #32]
 8006a3c:	602b      	str	r3, [r5, #0]
 8006a3e:	d032      	beq.n	8006aa6 <__sflush_r+0x9a>
 8006a40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	075a      	lsls	r2, r3, #29
 8006a46:	d505      	bpl.n	8006a54 <__sflush_r+0x48>
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	1ac0      	subs	r0, r0, r3
 8006a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a4e:	b10b      	cbz	r3, 8006a54 <__sflush_r+0x48>
 8006a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a52:	1ac0      	subs	r0, r0, r3
 8006a54:	2300      	movs	r3, #0
 8006a56:	4602      	mov	r2, r0
 8006a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a5a:	6a21      	ldr	r1, [r4, #32]
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b0      	blx	r6
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	d106      	bne.n	8006a74 <__sflush_r+0x68>
 8006a66:	6829      	ldr	r1, [r5, #0]
 8006a68:	291d      	cmp	r1, #29
 8006a6a:	d82b      	bhi.n	8006ac4 <__sflush_r+0xb8>
 8006a6c:	4a29      	ldr	r2, [pc, #164]	; (8006b14 <__sflush_r+0x108>)
 8006a6e:	410a      	asrs	r2, r1
 8006a70:	07d6      	lsls	r6, r2, #31
 8006a72:	d427      	bmi.n	8006ac4 <__sflush_r+0xb8>
 8006a74:	2200      	movs	r2, #0
 8006a76:	6062      	str	r2, [r4, #4]
 8006a78:	04d9      	lsls	r1, r3, #19
 8006a7a:	6922      	ldr	r2, [r4, #16]
 8006a7c:	6022      	str	r2, [r4, #0]
 8006a7e:	d504      	bpl.n	8006a8a <__sflush_r+0x7e>
 8006a80:	1c42      	adds	r2, r0, #1
 8006a82:	d101      	bne.n	8006a88 <__sflush_r+0x7c>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b903      	cbnz	r3, 8006a8a <__sflush_r+0x7e>
 8006a88:	6560      	str	r0, [r4, #84]	; 0x54
 8006a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a8c:	602f      	str	r7, [r5, #0]
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	d0c9      	beq.n	8006a26 <__sflush_r+0x1a>
 8006a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a96:	4299      	cmp	r1, r3
 8006a98:	d002      	beq.n	8006aa0 <__sflush_r+0x94>
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7ff fbd6 	bl	800624c <_free_r>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	6360      	str	r0, [r4, #52]	; 0x34
 8006aa4:	e7c0      	b.n	8006a28 <__sflush_r+0x1c>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b0      	blx	r6
 8006aac:	1c41      	adds	r1, r0, #1
 8006aae:	d1c8      	bne.n	8006a42 <__sflush_r+0x36>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0c5      	beq.n	8006a42 <__sflush_r+0x36>
 8006ab6:	2b1d      	cmp	r3, #29
 8006ab8:	d001      	beq.n	8006abe <__sflush_r+0xb2>
 8006aba:	2b16      	cmp	r3, #22
 8006abc:	d101      	bne.n	8006ac2 <__sflush_r+0xb6>
 8006abe:	602f      	str	r7, [r5, #0]
 8006ac0:	e7b1      	b.n	8006a26 <__sflush_r+0x1a>
 8006ac2:	89a3      	ldrh	r3, [r4, #12]
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	e7ad      	b.n	8006a28 <__sflush_r+0x1c>
 8006acc:	690f      	ldr	r7, [r1, #16]
 8006ace:	2f00      	cmp	r7, #0
 8006ad0:	d0a9      	beq.n	8006a26 <__sflush_r+0x1a>
 8006ad2:	0793      	lsls	r3, r2, #30
 8006ad4:	680e      	ldr	r6, [r1, #0]
 8006ad6:	bf08      	it	eq
 8006ad8:	694b      	ldreq	r3, [r1, #20]
 8006ada:	600f      	str	r7, [r1, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2300      	movne	r3, #0
 8006ae0:	eba6 0807 	sub.w	r8, r6, r7
 8006ae4:	608b      	str	r3, [r1, #8]
 8006ae6:	f1b8 0f00 	cmp.w	r8, #0
 8006aea:	dd9c      	ble.n	8006a26 <__sflush_r+0x1a>
 8006aec:	6a21      	ldr	r1, [r4, #32]
 8006aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006af0:	4643      	mov	r3, r8
 8006af2:	463a      	mov	r2, r7
 8006af4:	4628      	mov	r0, r5
 8006af6:	47b0      	blx	r6
 8006af8:	2800      	cmp	r0, #0
 8006afa:	dc06      	bgt.n	8006b0a <__sflush_r+0xfe>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	f04f 30ff 	mov.w	r0, #4294967295
 8006b08:	e78e      	b.n	8006a28 <__sflush_r+0x1c>
 8006b0a:	4407      	add	r7, r0
 8006b0c:	eba8 0800 	sub.w	r8, r8, r0
 8006b10:	e7e9      	b.n	8006ae6 <__sflush_r+0xda>
 8006b12:	bf00      	nop
 8006b14:	dfbffffe 	.word	0xdfbffffe

08006b18 <_fflush_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	690b      	ldr	r3, [r1, #16]
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	b913      	cbnz	r3, 8006b28 <_fflush_r+0x10>
 8006b22:	2500      	movs	r5, #0
 8006b24:	4628      	mov	r0, r5
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	b118      	cbz	r0, 8006b32 <_fflush_r+0x1a>
 8006b2a:	6a03      	ldr	r3, [r0, #32]
 8006b2c:	b90b      	cbnz	r3, 8006b32 <_fflush_r+0x1a>
 8006b2e:	f7ff f96d 	bl	8005e0c <__sinit>
 8006b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f3      	beq.n	8006b22 <_fflush_r+0xa>
 8006b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b3c:	07d0      	lsls	r0, r2, #31
 8006b3e:	d404      	bmi.n	8006b4a <_fflush_r+0x32>
 8006b40:	0599      	lsls	r1, r3, #22
 8006b42:	d402      	bmi.n	8006b4a <_fflush_r+0x32>
 8006b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b46:	f7ff fb70 	bl	800622a <__retarget_lock_acquire_recursive>
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	f7ff ff5d 	bl	8006a0c <__sflush_r>
 8006b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b54:	07da      	lsls	r2, r3, #31
 8006b56:	4605      	mov	r5, r0
 8006b58:	d4e4      	bmi.n	8006b24 <_fflush_r+0xc>
 8006b5a:	89a3      	ldrh	r3, [r4, #12]
 8006b5c:	059b      	lsls	r3, r3, #22
 8006b5e:	d4e1      	bmi.n	8006b24 <_fflush_r+0xc>
 8006b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b62:	f7ff fb63 	bl	800622c <__retarget_lock_release_recursive>
 8006b66:	e7dd      	b.n	8006b24 <_fflush_r+0xc>

08006b68 <__swhatbuf_r>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b70:	2900      	cmp	r1, #0
 8006b72:	b096      	sub	sp, #88	; 0x58
 8006b74:	4615      	mov	r5, r2
 8006b76:	461e      	mov	r6, r3
 8006b78:	da0d      	bge.n	8006b96 <__swhatbuf_r+0x2e>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b80:	f04f 0100 	mov.w	r1, #0
 8006b84:	bf0c      	ite	eq
 8006b86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b8a:	2340      	movne	r3, #64	; 0x40
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	6031      	str	r1, [r6, #0]
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	b016      	add	sp, #88	; 0x58
 8006b94:	bd70      	pop	{r4, r5, r6, pc}
 8006b96:	466a      	mov	r2, sp
 8006b98:	f000 f862 	bl	8006c60 <_fstat_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	dbec      	blt.n	8006b7a <__swhatbuf_r+0x12>
 8006ba0:	9901      	ldr	r1, [sp, #4]
 8006ba2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ba6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006baa:	4259      	negs	r1, r3
 8006bac:	4159      	adcs	r1, r3
 8006bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bb2:	e7eb      	b.n	8006b8c <__swhatbuf_r+0x24>

08006bb4 <__smakebuf_r>:
 8006bb4:	898b      	ldrh	r3, [r1, #12]
 8006bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bb8:	079d      	lsls	r5, r3, #30
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	d507      	bpl.n	8006bd0 <__smakebuf_r+0x1c>
 8006bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	2301      	movs	r3, #1
 8006bca:	6163      	str	r3, [r4, #20]
 8006bcc:	b002      	add	sp, #8
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	ab01      	add	r3, sp, #4
 8006bd2:	466a      	mov	r2, sp
 8006bd4:	f7ff ffc8 	bl	8006b68 <__swhatbuf_r>
 8006bd8:	9900      	ldr	r1, [sp, #0]
 8006bda:	4605      	mov	r5, r0
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff fba1 	bl	8006324 <_malloc_r>
 8006be2:	b948      	cbnz	r0, 8006bf8 <__smakebuf_r+0x44>
 8006be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006be8:	059a      	lsls	r2, r3, #22
 8006bea:	d4ef      	bmi.n	8006bcc <__smakebuf_r+0x18>
 8006bec:	f023 0303 	bic.w	r3, r3, #3
 8006bf0:	f043 0302 	orr.w	r3, r3, #2
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e7e3      	b.n	8006bc0 <__smakebuf_r+0xc>
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	6020      	str	r0, [r4, #0]
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	9b00      	ldr	r3, [sp, #0]
 8006c04:	6163      	str	r3, [r4, #20]
 8006c06:	9b01      	ldr	r3, [sp, #4]
 8006c08:	6120      	str	r0, [r4, #16]
 8006c0a:	b15b      	cbz	r3, 8006c24 <__smakebuf_r+0x70>
 8006c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 f837 	bl	8006c84 <_isatty_r>
 8006c16:	b128      	cbz	r0, 8006c24 <__smakebuf_r+0x70>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	81a3      	strh	r3, [r4, #12]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	431d      	orrs	r5, r3
 8006c28:	81a5      	strh	r5, [r4, #12]
 8006c2a:	e7cf      	b.n	8006bcc <__smakebuf_r+0x18>

08006c2c <memmove>:
 8006c2c:	4288      	cmp	r0, r1
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	eb01 0402 	add.w	r4, r1, r2
 8006c34:	d902      	bls.n	8006c3c <memmove+0x10>
 8006c36:	4284      	cmp	r4, r0
 8006c38:	4623      	mov	r3, r4
 8006c3a:	d807      	bhi.n	8006c4c <memmove+0x20>
 8006c3c:	1e43      	subs	r3, r0, #1
 8006c3e:	42a1      	cmp	r1, r4
 8006c40:	d008      	beq.n	8006c54 <memmove+0x28>
 8006c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c4a:	e7f8      	b.n	8006c3e <memmove+0x12>
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4601      	mov	r1, r0
 8006c50:	428a      	cmp	r2, r1
 8006c52:	d100      	bne.n	8006c56 <memmove+0x2a>
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c5e:	e7f7      	b.n	8006c50 <memmove+0x24>

08006c60 <_fstat_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d07      	ldr	r5, [pc, #28]	; (8006c80 <_fstat_r+0x20>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	f7f9 fdb2 	bl	80007d6 <_fstat>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d102      	bne.n	8006c7c <_fstat_r+0x1c>
 8006c76:	682b      	ldr	r3, [r5, #0]
 8006c78:	b103      	cbz	r3, 8006c7c <_fstat_r+0x1c>
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	bd38      	pop	{r3, r4, r5, pc}
 8006c7e:	bf00      	nop
 8006c80:	200059d0 	.word	0x200059d0

08006c84 <_isatty_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4d06      	ldr	r5, [pc, #24]	; (8006ca0 <_isatty_r+0x1c>)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	602b      	str	r3, [r5, #0]
 8006c90:	f7f9 fdb1 	bl	80007f6 <_isatty>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_isatty_r+0x1a>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_isatty_r+0x1a>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200059d0 	.word	0x200059d0

08006ca4 <_sbrk_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_sbrk_r+0x1c>)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f000 f840 	bl	8006d34 <_sbrk>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_sbrk_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_sbrk_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	200059d0 	.word	0x200059d0

08006cc4 <_realloc_r>:
 8006cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc8:	4680      	mov	r8, r0
 8006cca:	4614      	mov	r4, r2
 8006ccc:	460e      	mov	r6, r1
 8006cce:	b921      	cbnz	r1, 8006cda <_realloc_r+0x16>
 8006cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	f7ff bb25 	b.w	8006324 <_malloc_r>
 8006cda:	b92a      	cbnz	r2, 8006ce8 <_realloc_r+0x24>
 8006cdc:	f7ff fab6 	bl	800624c <_free_r>
 8006ce0:	4625      	mov	r5, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce8:	f000 f81b 	bl	8006d22 <_malloc_usable_size_r>
 8006cec:	4284      	cmp	r4, r0
 8006cee:	4607      	mov	r7, r0
 8006cf0:	d802      	bhi.n	8006cf8 <_realloc_r+0x34>
 8006cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006cf6:	d812      	bhi.n	8006d1e <_realloc_r+0x5a>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	f7ff fb12 	bl	8006324 <_malloc_r>
 8006d00:	4605      	mov	r5, r0
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d0ed      	beq.n	8006ce2 <_realloc_r+0x1e>
 8006d06:	42bc      	cmp	r4, r7
 8006d08:	4622      	mov	r2, r4
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	bf28      	it	cs
 8006d0e:	463a      	movcs	r2, r7
 8006d10:	f7ff fa8d 	bl	800622e <memcpy>
 8006d14:	4631      	mov	r1, r6
 8006d16:	4640      	mov	r0, r8
 8006d18:	f7ff fa98 	bl	800624c <_free_r>
 8006d1c:	e7e1      	b.n	8006ce2 <_realloc_r+0x1e>
 8006d1e:	4635      	mov	r5, r6
 8006d20:	e7df      	b.n	8006ce2 <_realloc_r+0x1e>

08006d22 <_malloc_usable_size_r>:
 8006d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d26:	1f18      	subs	r0, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfbc      	itt	lt
 8006d2c:	580b      	ldrlt	r3, [r1, r0]
 8006d2e:	18c0      	addlt	r0, r0, r3
 8006d30:	4770      	bx	lr
	...

08006d34 <_sbrk>:
 8006d34:	4a04      	ldr	r2, [pc, #16]	; (8006d48 <_sbrk+0x14>)
 8006d36:	6811      	ldr	r1, [r2, #0]
 8006d38:	4603      	mov	r3, r0
 8006d3a:	b909      	cbnz	r1, 8006d40 <_sbrk+0xc>
 8006d3c:	4903      	ldr	r1, [pc, #12]	; (8006d4c <_sbrk+0x18>)
 8006d3e:	6011      	str	r1, [r2, #0]
 8006d40:	6810      	ldr	r0, [r2, #0]
 8006d42:	4403      	add	r3, r0
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	4770      	bx	lr
 8006d48:	200059e0 	.word	0x200059e0
 8006d4c:	200059e8 	.word	0x200059e8

08006d50 <_init>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr

08006d5c <_fini>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr
