
003_ButtonTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000693c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006acc  08006acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006c44  08006c44  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c44  08006c44  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c48  08006c48  00016c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005830  2000001c  08006c68  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000584c  08006c68  0002584c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e83  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dfb  00000000  00000000  00033f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  00036d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3e  00000000  00000000  000380e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000262ca  00000000  00000000  00039026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fdf  00000000  00000000  0005f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb384  00000000  00000000  000752cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000527c  00000000  00000000  00170654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  001758d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ab4 	.word	0x08006ab4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006ab4 	.word	0x08006ab4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20004214 	.word	0x20004214

08000264 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f103 0208 	add.w	r2, r3, #8
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f04f 32ff 	mov.w	r2, #4294967295
 800027c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f103 0208 	add.w	r2, r3, #8
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f103 0208 	add.w	r2, r3, #8
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80002be:	b480      	push	{r7}
 80002c0:	b085      	sub	sp, #20
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	683a      	ldr	r2, [r7, #0]
 80002e8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	1c5a      	adds	r2, r3, #1
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
}
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000306:	b480      	push	{r7}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800031c:	d103      	bne.n	8000326 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	e00c      	b.n	8000340 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3308      	adds	r3, #8
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	e002      	b.n	8000334 <vListInsert+0x2e>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	68ba      	ldr	r2, [r7, #8]
 800033c:	429a      	cmp	r2, r3
 800033e:	d2f6      	bcs.n	800032e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	683a      	ldr	r2, [r7, #0]
 800034e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	601a      	str	r2, [r3, #0]
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	6892      	ldr	r2, [r2, #8]
 800038e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	6852      	ldr	r2, [r2, #4]
 8000398:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d103      	bne.n	80003ac <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	689a      	ldr	r2, [r3, #8]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1e5a      	subs	r2, r3, #1
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08c      	sub	sp, #48	; 0x30
 80003d0:	af04      	add	r7, sp, #16
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	4613      	mov	r3, r2
 80003da:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	009b      	lsls	r3, r3, #2
 80003e0:	4618      	mov	r0, r3
 80003e2:	f001 fc9b 	bl	8001d1c <pvPortMalloc>
 80003e6:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d013      	beq.n	8000416 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80003ee:	2068      	movs	r0, #104	; 0x68
 80003f0:	f001 fc94 	bl	8001d1c <pvPortMalloc>
 80003f4:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80003fc:	2268      	movs	r2, #104	; 0x68
 80003fe:	2100      	movs	r1, #0
 8000400:	69f8      	ldr	r0, [r7, #28]
 8000402:	f006 fb1d 	bl	8006a40 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	697a      	ldr	r2, [r7, #20]
 800040a:	631a      	str	r2, [r3, #48]	; 0x30
 800040c:	e005      	b.n	800041a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800040e:	6978      	ldr	r0, [r7, #20]
 8000410:	f001 fd3e 	bl	8001e90 <vPortFree>
 8000414:	e001      	b.n	800041a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d013      	beq.n	8000448 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000420:	88fa      	ldrh	r2, [r7, #6]
 8000422:	2300      	movs	r3, #0
 8000424:	9303      	str	r3, [sp, #12]
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	9302      	str	r3, [sp, #8]
 800042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	68b9      	ldr	r1, [r7, #8]
 8000436:	68f8      	ldr	r0, [r7, #12]
 8000438:	f000 f80e 	bl	8000458 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800043c:	69f8      	ldr	r0, [r7, #28]
 800043e:	f000 f899 	bl	8000574 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000442:	2301      	movs	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
 8000446:	e002      	b.n	800044e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000448:	f04f 33ff 	mov.w	r3, #4294967295
 800044c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800044e:	69bb      	ldr	r3, [r7, #24]
    }
 8000450:	4618      	mov	r0, r3
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
 8000464:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000468:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	461a      	mov	r2, r3
 8000470:	21a5      	movs	r1, #165	; 0xa5
 8000472:	f006 fae5 	bl	8006a40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000480:	3b01      	subs	r3, #1
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000488:	69bb      	ldr	r3, [r7, #24]
 800048a:	f023 0307 	bic.w	r3, r3, #7
 800048e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	f003 0307 	and.w	r3, r3, #7
 8000496:	2b00      	cmp	r3, #0
 8000498:	d00a      	beq.n	80004b0 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800049e:	f383 8811 	msr	BASEPRI, r3
 80004a2:	f3bf 8f6f 	isb	sy
 80004a6:	f3bf 8f4f 	dsb	sy
 80004aa:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80004ac:	bf00      	nop
 80004ae:	e7fe      	b.n	80004ae <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d01e      	beq.n	80004f4 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
 80004ba:	e012      	b.n	80004e2 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	4413      	add	r3, r2
 80004c2:	7819      	ldrb	r1, [r3, #0]
 80004c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	4413      	add	r3, r2
 80004ca:	3334      	adds	r3, #52	; 0x34
 80004cc:	460a      	mov	r2, r1
 80004ce:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	4413      	add	r3, r2
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d006      	beq.n	80004ea <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80004dc:	69fb      	ldr	r3, [r7, #28]
 80004de:	3301      	adds	r3, #1
 80004e0:	61fb      	str	r3, [r7, #28]
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	2b09      	cmp	r3, #9
 80004e6:	d9e9      	bls.n	80004bc <prvInitialiseNewTask+0x64>
 80004e8:	e000      	b.n	80004ec <prvInitialiseNewTask+0x94>
            {
                break;
 80004ea:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80004ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80004f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d90a      	bls.n	8000510 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80004fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fe:	f383 8811 	msr	BASEPRI, r3
 8000502:	f3bf 8f6f 	isb	sy
 8000506:	f3bf 8f4f 	dsb	sy
 800050a:	613b      	str	r3, [r7, #16]
    }
 800050c:	bf00      	nop
 800050e:	e7fe      	b.n	800050e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000512:	2b04      	cmp	r3, #4
 8000514:	d901      	bls.n	800051a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000516:	2304      	movs	r3, #4
 8000518:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800051a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800051c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000524:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000528:	3304      	adds	r3, #4
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff feba 	bl	80002a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000532:	3318      	adds	r3, #24
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff feb5 	bl	80002a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800053a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800053c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800053e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000542:	f1c3 0205 	rsb	r2, r3, #5
 8000546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000548:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800054c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800054e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	68f9      	ldr	r1, [r7, #12]
 8000554:	69b8      	ldr	r0, [r7, #24]
 8000556:	f001 f905 	bl	8001764 <pxPortInitialiseStack>
 800055a:	4602      	mov	r2, r0
 800055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800055e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800056a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800057c:	f001 faa2 	bl	8001ac4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000580:	4b49      	ldr	r3, [pc, #292]	; (80006a8 <prvAddNewTaskToReadyList+0x134>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	3301      	adds	r3, #1
 8000586:	4a48      	ldr	r2, [pc, #288]	; (80006a8 <prvAddNewTaskToReadyList+0x134>)
 8000588:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800058a:	4b48      	ldr	r3, [pc, #288]	; (80006ac <prvAddNewTaskToReadyList+0x138>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d109      	bne.n	80005a6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000592:	4a46      	ldr	r2, [pc, #280]	; (80006ac <prvAddNewTaskToReadyList+0x138>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <prvAddNewTaskToReadyList+0x134>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d110      	bne.n	80005c2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80005a0:	f000 fc70 	bl	8000e84 <prvInitialiseTaskLists>
 80005a4:	e00d      	b.n	80005c2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80005a6:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <prvAddNewTaskToReadyList+0x13c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d109      	bne.n	80005c2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <prvAddNewTaskToReadyList+0x138>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d802      	bhi.n	80005c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80005bc:	4a3b      	ldr	r2, [pc, #236]	; (80006ac <prvAddNewTaskToReadyList+0x138>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80005c2:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <prvAddNewTaskToReadyList+0x140>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a3a      	ldr	r2, [pc, #232]	; (80006b4 <prvAddNewTaskToReadyList+0x140>)
 80005ca:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80005cc:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <prvAddNewTaskToReadyList+0x140>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d016      	beq.n	8000608 <prvAddNewTaskToReadyList+0x94>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f863 	bl	80046a8 <SEGGER_SYSVIEW_OnTaskCreate>
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	461d      	mov	r5, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	461c      	mov	r4, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	1ae3      	subs	r3, r4, r3
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	462b      	mov	r3, r5
 8000604:	f001 fe1c 	bl	8002240 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4618      	mov	r0, r3
 800060c:	f004 f8d0 	bl	80047b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000614:	2201      	movs	r2, #1
 8000616:	409a      	lsls	r2, r3
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <prvAddNewTaskToReadyList+0x144>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4313      	orrs	r3, r2
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <prvAddNewTaskToReadyList+0x144>)
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000626:	4925      	ldr	r1, [pc, #148]	; (80006bc <prvAddNewTaskToReadyList+0x148>)
 8000628:	4613      	mov	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	3304      	adds	r3, #4
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	3204      	adds	r2, #4
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	1d1a      	adds	r2, r3, #4
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4a15      	ldr	r2, [pc, #84]	; (80006bc <prvAddNewTaskToReadyList+0x148>)
 8000666:	441a      	add	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000670:	4912      	ldr	r1, [pc, #72]	; (80006bc <prvAddNewTaskToReadyList+0x148>)
 8000672:	4613      	mov	r3, r2
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	4413      	add	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	440b      	add	r3, r1
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	1c59      	adds	r1, r3, #1
 8000680:	480e      	ldr	r0, [pc, #56]	; (80006bc <prvAddNewTaskToReadyList+0x148>)
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4403      	add	r3, r0
 800068c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800068e:	f001 fa49 	bl	8001b24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <prvAddNewTaskToReadyList+0x13c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <prvAddNewTaskToReadyList+0x138>)
 800069c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bdb0      	pop	{r4, r5, r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000110 	.word	0x20000110
 80006ac:	20000038 	.word	0x20000038
 80006b0:	2000011c 	.word	0x2000011c
 80006b4:	2000012c 	.word	0x2000012c
 80006b8:	20000118 	.word	0x20000118
 80006bc:	2000003c 	.word	0x2000003c

080006c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80006c8:	f001 f9fc 	bl	8001ac4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <vTaskDelete+0x18>
 80006d2:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <vTaskDelete+0x134>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	e000      	b.n	80006da <vTaskDelete+0x1a>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3304      	adds	r3, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe49 	bl	8000378 <uxListRemove>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d115      	bne.n	8000718 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f0:	4941      	ldr	r1, [pc, #260]	; (80007f8 <vTaskDelete+0x138>)
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	440b      	add	r3, r1
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d10a      	bne.n	8000718 <vTaskDelete+0x58>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	43da      	mvns	r2, r3
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <vTaskDelete+0x13c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4013      	ands	r3, r2
 8000714:	4a39      	ldr	r2, [pc, #228]	; (80007fc <vTaskDelete+0x13c>)
 8000716:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3318      	adds	r3, #24
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fe27 	bl	8000378 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800072a:	4b35      	ldr	r3, [pc, #212]	; (8000800 <vTaskDelete+0x140>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	3301      	adds	r3, #1
 8000730:	4a33      	ldr	r2, [pc, #204]	; (8000800 <vTaskDelete+0x140>)
 8000732:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <vTaskDelete+0x134>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68fa      	ldr	r2, [r7, #12]
 800073a:	429a      	cmp	r2, r3
 800073c:	d118      	bne.n	8000770 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3304      	adds	r3, #4
 8000742:	4619      	mov	r1, r3
 8000744:	482f      	ldr	r0, [pc, #188]	; (8000804 <vTaskDelete+0x144>)
 8000746:	f7ff fdba 	bl	80002be <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <vTaskDelete+0x148>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	4a2d      	ldr	r2, [pc, #180]	; (8000808 <vTaskDelete+0x148>)
 8000752:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	4618      	mov	r0, r3
 8000758:	f004 f86c 	bl	8004834 <SEGGER_SYSVIEW_ShrinkId>
 800075c:	4603      	mov	r3, r0
 800075e:	4619      	mov	r1, r3
 8000760:	2022      	movs	r0, #34	; 0x22
 8000762:	f003 fa6b 	bl	8003c3c <SEGGER_SYSVIEW_RecordU32>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fdd1 	bl	8002310 <SYSVIEW_DeleteTask>
 800076e:	e013      	b.n	8000798 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <vTaskDelete+0x14c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3b01      	subs	r3, #1
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <vTaskDelete+0x14c>)
 8000778:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4618      	mov	r0, r3
 800077e:	f004 f859 	bl	8004834 <SEGGER_SYSVIEW_ShrinkId>
 8000782:	4603      	mov	r3, r0
 8000784:	4619      	mov	r1, r3
 8000786:	2022      	movs	r0, #34	; 0x22
 8000788:	f003 fa58 	bl	8003c3c <SEGGER_SYSVIEW_RecordU32>
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fdbe 	bl	8002310 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8000794:	f000 fc2c 	bl	8000ff0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8000798:	f001 f9c4 	bl	8001b24 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <vTaskDelete+0x134>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d002      	beq.n	80007ac <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f000 fc12 	bl	8000fd0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <vTaskDelete+0x150>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d01b      	beq.n	80007ec <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <vTaskDelete+0x134>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d116      	bne.n	80007ec <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <vTaskDelete+0x154>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00a      	beq.n	80007dc <vTaskDelete+0x11c>
        __asm volatile
 80007c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ca:	f383 8811 	msr	BASEPRI, r3
 80007ce:	f3bf 8f6f 	isb	sy
 80007d2:	f3bf 8f4f 	dsb	sy
 80007d6:	60bb      	str	r3, [r7, #8]
    }
 80007d8:	bf00      	nop
 80007da:	e7fe      	b.n	80007da <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <vTaskDelete+0x158>)
 80007de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000038 	.word	0x20000038
 80007f8:	2000003c 	.word	0x2000003c
 80007fc:	20000118 	.word	0x20000118
 8000800:	2000012c 	.word	0x2000012c
 8000804:	200000e4 	.word	0x200000e4
 8000808:	200000f8 	.word	0x200000f8
 800080c:	20000110 	.word	0x20000110
 8000810:	2000011c 	.word	0x2000011c
 8000814:	20000138 	.word	0x20000138
 8000818:	e000ed04 	.word	0xe000ed04

0800081c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d01b      	beq.n	8000866 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <vTaskDelay+0x68>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <vTaskDelay+0x30>
        __asm volatile
 8000836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083a:	f383 8811 	msr	BASEPRI, r3
 800083e:	f3bf 8f6f 	isb	sy
 8000842:	f3bf 8f4f 	dsb	sy
 8000846:	60bb      	str	r3, [r7, #8]
    }
 8000848:	bf00      	nop
 800084a:	e7fe      	b.n	800084a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800084c:	f000 f87a 	bl	8000944 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	2023      	movs	r0, #35	; 0x23
 8000854:	f003 f9f2 	bl	8003c3c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000858:	2100      	movs	r1, #0
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 fefe 	bl	800165c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000860:	f000 f87e 	bl	8000960 <xTaskResumeAll>
 8000864:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d107      	bne.n	800087c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <vTaskDelay+0x6c>)
 800086e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	f3bf 8f4f 	dsb	sy
 8000878:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000138 	.word	0x20000138
 8000888:	e000ed04 	.word	0xe000ed04

0800088c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <vTaskStartScheduler+0x98>)
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2300      	movs	r3, #0
 800089c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a0:	4921      	ldr	r1, [pc, #132]	; (8000928 <vTaskStartScheduler+0x9c>)
 80008a2:	4822      	ldr	r0, [pc, #136]	; (800092c <vTaskStartScheduler+0xa0>)
 80008a4:	f7ff fd92 	bl	80003cc <xTaskCreate>
 80008a8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d124      	bne.n	80008fa <vTaskStartScheduler+0x6e>
        __asm volatile
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	60bb      	str	r3, [r7, #8]
    }
 80008c2:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <vTaskStartScheduler+0xa4>)
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <vTaskStartScheduler+0xa8>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <vTaskStartScheduler+0xac>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <vTaskStartScheduler+0xb0>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <vTaskStartScheduler+0x98>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d102      	bne.n	80008ea <vTaskStartScheduler+0x5e>
 80008e4:	f003 fec4 	bl	8004670 <SEGGER_SYSVIEW_OnIdle>
 80008e8:	e004      	b.n	80008f4 <vTaskStartScheduler+0x68>
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <vTaskStartScheduler+0xb0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 ff1c 	bl	800472c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80008f4:	f000 ffc6 	bl	8001884 <xPortStartScheduler>
 80008f8:	e00e      	b.n	8000918 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d10a      	bne.n	8000918 <vTaskStartScheduler+0x8c>
        __asm volatile
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	607b      	str	r3, [r7, #4]
    }
 8000914:	bf00      	nop
 8000916:	e7fe      	b.n	8000916 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <vTaskStartScheduler+0xb4>)
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000134 	.word	0x20000134
 8000928:	08006acc 	.word	0x08006acc
 800092c:	08000e61 	.word	0x08000e61
 8000930:	20000130 	.word	0x20000130
 8000934:	2000011c 	.word	0x2000011c
 8000938:	20000114 	.word	0x20000114
 800093c:	20000038 	.word	0x20000038
 8000940:	20000000 	.word	0x20000000

08000944 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <vTaskSuspendAll+0x18>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a03      	ldr	r2, [pc, #12]	; (800095c <vTaskSuspendAll+0x18>)
 8000950:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000138 	.word	0x20000138

08000960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800096e:	4b6d      	ldr	r3, [pc, #436]	; (8000b24 <xTaskResumeAll+0x1c4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10a      	bne.n	800098c <xTaskResumeAll+0x2c>
        __asm volatile
 8000976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800097a:	f383 8811 	msr	BASEPRI, r3
 800097e:	f3bf 8f6f 	isb	sy
 8000982:	f3bf 8f4f 	dsb	sy
 8000986:	607b      	str	r3, [r7, #4]
    }
 8000988:	bf00      	nop
 800098a:	e7fe      	b.n	800098a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800098c:	f001 f89a 	bl	8001ac4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000990:	4b64      	ldr	r3, [pc, #400]	; (8000b24 <xTaskResumeAll+0x1c4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	4a63      	ldr	r2, [pc, #396]	; (8000b24 <xTaskResumeAll+0x1c4>)
 8000998:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800099a:	4b62      	ldr	r3, [pc, #392]	; (8000b24 <xTaskResumeAll+0x1c4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 80b8 	bne.w	8000b14 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80009a4:	4b60      	ldr	r3, [pc, #384]	; (8000b28 <xTaskResumeAll+0x1c8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 80b3 	beq.w	8000b14 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80009ae:	e08e      	b.n	8000ace <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80009b0:	4b5e      	ldr	r3, [pc, #376]	; (8000b2c <xTaskResumeAll+0x1cc>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	6a12      	ldr	r2, [r2, #32]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	6a1b      	ldr	r3, [r3, #32]
 80009cc:	69fa      	ldr	r2, [r7, #28]
 80009ce:	69d2      	ldr	r2, [r2, #28]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3318      	adds	r3, #24
 80009da:	429a      	cmp	r2, r3
 80009dc:	d103      	bne.n	80009e6 <xTaskResumeAll+0x86>
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	6a1a      	ldr	r2, [r3, #32]
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	68d2      	ldr	r2, [r2, #12]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	68db      	ldr	r3, [r3, #12]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	6892      	ldr	r2, [r2, #8]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	3304      	adds	r3, #4
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d103      	bne.n	8000a24 <xTaskResumeAll+0xc4>
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	1e5a      	subs	r2, r3, #1
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f003 feba 	bl	80047b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a40:	2201      	movs	r2, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <xTaskResumeAll+0x1d0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <xTaskResumeAll+0x1d0>)
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a52:	4938      	ldr	r1, [pc, #224]	; (8000b34 <xTaskResumeAll+0x1d4>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3304      	adds	r3, #4
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	689a      	ldr	r2, [r3, #8]
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	3204      	adds	r2, #4
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	1d1a      	adds	r2, r3, #4
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4a28      	ldr	r2, [pc, #160]	; (8000b34 <xTaskResumeAll+0x1d4>)
 8000a92:	441a      	add	r2, r3
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	4925      	ldr	r1, [pc, #148]	; (8000b34 <xTaskResumeAll+0x1d4>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1c59      	adds	r1, r3, #1
 8000aac:	4821      	ldr	r0, [pc, #132]	; (8000b34 <xTaskResumeAll+0x1d4>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	4403      	add	r3, r0
 8000ab8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <xTaskResumeAll+0x1d8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d302      	bcc.n	8000ace <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <xTaskResumeAll+0x1dc>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <xTaskResumeAll+0x1cc>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f47f af6c 	bne.w	80009b0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000ade:	f000 fa87 	bl	8000ff0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <xTaskResumeAll+0x1e0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d010      	beq.n	8000b10 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000aee:	f000 f83b 	bl	8000b68 <xTaskIncrementTick>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <xTaskResumeAll+0x1dc>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f1      	bne.n	8000aee <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <xTaskResumeAll+0x1e0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <xTaskResumeAll+0x1dc>)
 8000b12:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000b14:	f001 f806 	bl	8001b24 <vPortExitCritical>

    return xAlreadyYielded;
 8000b18:	697b      	ldr	r3, [r7, #20]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000138 	.word	0x20000138
 8000b28:	20000110 	.word	0x20000110
 8000b2c:	200000d0 	.word	0x200000d0
 8000b30:	20000118 	.word	0x20000118
 8000b34:	2000003c 	.word	0x2000003c
 8000b38:	20000038 	.word	0x20000038
 8000b3c:	20000124 	.word	0x20000124
 8000b40:	20000120 	.word	0x20000120

08000b44 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b4a:	f001 f8a7 	bl	8001c9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <xTaskGetTickCountFromISR+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000b58:	683b      	ldr	r3, [r7, #0]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000114 	.word	0x20000114

08000b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b72:	4b70      	ldr	r3, [pc, #448]	; (8000d34 <xTaskIncrementTick+0x1cc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 80d1 	bne.w	8000d1e <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b7c:	4b6e      	ldr	r3, [pc, #440]	; (8000d38 <xTaskIncrementTick+0x1d0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b84:	4a6c      	ldr	r2, [pc, #432]	; (8000d38 <xTaskIncrementTick+0x1d0>)
 8000b86:	6a3b      	ldr	r3, [r7, #32]
 8000b88:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d120      	bne.n	8000bd2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000b90:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <xTaskIncrementTick+0x1d4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00a      	beq.n	8000bb0 <xTaskIncrementTick+0x48>
        __asm volatile
 8000b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9e:	f383 8811 	msr	BASEPRI, r3
 8000ba2:	f3bf 8f6f 	isb	sy
 8000ba6:	f3bf 8f4f 	dsb	sy
 8000baa:	607b      	str	r3, [r7, #4]
    }
 8000bac:	bf00      	nop
 8000bae:	e7fe      	b.n	8000bae <xTaskIncrementTick+0x46>
 8000bb0:	4b62      	ldr	r3, [pc, #392]	; (8000d3c <xTaskIncrementTick+0x1d4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	61fb      	str	r3, [r7, #28]
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <xTaskIncrementTick+0x1d8>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a60      	ldr	r2, [pc, #384]	; (8000d3c <xTaskIncrementTick+0x1d4>)
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	4a60      	ldr	r2, [pc, #384]	; (8000d40 <xTaskIncrementTick+0x1d8>)
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b5f      	ldr	r3, [pc, #380]	; (8000d44 <xTaskIncrementTick+0x1dc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a5e      	ldr	r2, [pc, #376]	; (8000d44 <xTaskIncrementTick+0x1dc>)
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	f000 fa0f 	bl	8000ff0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <xTaskIncrementTick+0x1e0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6a3a      	ldr	r2, [r7, #32]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f0c0 80a5 	bcc.w	8000d28 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <xTaskIncrementTick+0x1d4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000be8:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <xTaskIncrementTick+0x1e0>)
 8000bea:	f04f 32ff 	mov.w	r2, #4294967295
 8000bee:	601a      	str	r2, [r3, #0]
                    break;
 8000bf0:	e09a      	b.n	8000d28 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <xTaskIncrementTick+0x1d4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000c02:	6a3a      	ldr	r2, [r7, #32]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d203      	bcs.n	8000c12 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000c0a:	4a4f      	ldr	r2, [pc, #316]	; (8000d48 <xTaskIncrementTick+0x1e0>)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000c10:	e08a      	b.n	8000d28 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	68d2      	ldr	r2, [r2, #12]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	6892      	ldr	r2, [r2, #8]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	3304      	adds	r3, #4
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d103      	bne.n	8000c40 <xTaskIncrementTick+0xd8>
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	2200      	movs	r2, #0
 8000c44:	615a      	str	r2, [r3, #20]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01e      	beq.n	8000c96 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	6a12      	ldr	r2, [r2, #32]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	69d2      	ldr	r2, [r2, #28]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	3318      	adds	r3, #24
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d103      	bne.n	8000c86 <xTaskIncrementTick+0x11e>
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	6a1a      	ldr	r2, [r3, #32]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fd89 	bl	80047b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <xTaskIncrementTick+0x1e4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <xTaskIncrementTick+0x1e4>)
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb4:	4926      	ldr	r1, [pc, #152]	; (8000d50 <xTaskIncrementTick+0x1e8>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	3204      	adds	r2, #4
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	1d1a      	adds	r2, r3, #4
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <xTaskIncrementTick+0x1e8>)
 8000cf4:	441a      	add	r2, r3
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfe:	4914      	ldr	r1, [pc, #80]	; (8000d50 <xTaskIncrementTick+0x1e8>)
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	1c59      	adds	r1, r3, #1
 8000d0e:	4810      	ldr	r0, [pc, #64]	; (8000d50 <xTaskIncrementTick+0x1e8>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d1c:	e75f      	b.n	8000bde <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <xTaskIncrementTick+0x1ec>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <xTaskIncrementTick+0x1ec>)
 8000d26:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000138 	.word	0x20000138
 8000d38:	20000114 	.word	0x20000114
 8000d3c:	200000c8 	.word	0x200000c8
 8000d40:	200000cc 	.word	0x200000cc
 8000d44:	20000128 	.word	0x20000128
 8000d48:	20000130 	.word	0x20000130
 8000d4c:	20000118 	.word	0x20000118
 8000d50:	2000003c 	.word	0x2000003c
 8000d54:	20000120 	.word	0x20000120

08000d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d5e:	4b38      	ldr	r3, [pc, #224]	; (8000e40 <vTaskSwitchContext+0xe8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <vTaskSwitchContext+0xec>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000d6c:	e064      	b.n	8000e38 <vTaskSwitchContext+0xe0>
        xYieldPending = pdFALSE;
 8000d6e:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <vTaskSwitchContext+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <vTaskSwitchContext+0xf0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
 8000d7a:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <vTaskSwitchContext+0xf0>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <vTaskSwitchContext+0xf4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d909      	bls.n	8000d9a <vTaskSwitchContext+0x42>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8000d86:	4b30      	ldr	r3, [pc, #192]	; (8000e48 <vTaskSwitchContext+0xf0>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <vTaskSwitchContext+0xf4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad1      	subs	r1, r2, r3
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <vTaskSwitchContext+0xf8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d96:	440a      	add	r2, r1
 8000d98:	65da      	str	r2, [r3, #92]	; 0x5c
            ulTaskSwitchedInTime = ulTotalRunTime;
 8000d9a:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <vTaskSwitchContext+0xf0>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a2b      	ldr	r2, [pc, #172]	; (8000e4c <vTaskSwitchContext+0xf4>)
 8000da0:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <vTaskSwitchContext+0xfc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	fab3 f383 	clz	r3, r3
 8000dae:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000db0:	7afb      	ldrb	r3, [r7, #11]
 8000db2:	f1c3 031f 	rsb	r3, r3, #31
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	4927      	ldr	r1, [pc, #156]	; (8000e58 <vTaskSwitchContext+0x100>)
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d10a      	bne.n	8000de2 <vTaskSwitchContext+0x8a>
        __asm volatile
 8000dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd0:	f383 8811 	msr	BASEPRI, r3
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	f3bf 8f4f 	dsb	sy
 8000ddc:	607b      	str	r3, [r7, #4]
    }
 8000dde:	bf00      	nop
 8000de0:	e7fe      	b.n	8000de0 <vTaskSwitchContext+0x88>
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <vTaskSwitchContext+0x100>)
 8000dee:	4413      	add	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	3308      	adds	r3, #8
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d104      	bne.n	8000e12 <vTaskSwitchContext+0xba>
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <vTaskSwitchContext+0xf8>)
 8000e1a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <vTaskSwitchContext+0xf8>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <vTaskSwitchContext+0x104>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d102      	bne.n	8000e2e <vTaskSwitchContext+0xd6>
 8000e28:	f003 fc22 	bl	8004670 <SEGGER_SYSVIEW_OnIdle>
}
 8000e2c:	e004      	b.n	8000e38 <vTaskSwitchContext+0xe0>
        traceTASK_SWITCHED_IN();
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <vTaskSwitchContext+0xf8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 fc7a 	bl	800472c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000138 	.word	0x20000138
 8000e44:	20000124 	.word	0x20000124
 8000e48:	20000140 	.word	0x20000140
 8000e4c:	2000013c 	.word	0x2000013c
 8000e50:	20000038 	.word	0x20000038
 8000e54:	20000118 	.word	0x20000118
 8000e58:	2000003c 	.word	0x2000003c
 8000e5c:	20000134 	.word	0x20000134

08000e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000e68:	f000 f84c 	bl	8000f04 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <prvIdleTask+0x20>)
 8000e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	f3bf 8f4f 	dsb	sy
 8000e78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000e7c:	e7f4      	b.n	8000e68 <prvIdleTask+0x8>
 8000e7e:	bf00      	nop
 8000e80:	e000ed04 	.word	0xe000ed04

08000e84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	e00c      	b.n	8000eaa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <prvInitialiseTaskLists+0x60>)
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f9e0 	bl	8000264 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d9ef      	bls.n	8000e90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <prvInitialiseTaskLists+0x64>)
 8000eb2:	f7ff f9d7 	bl	8000264 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <prvInitialiseTaskLists+0x68>)
 8000eb8:	f7ff f9d4 	bl	8000264 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <prvInitialiseTaskLists+0x6c>)
 8000ebe:	f7ff f9d1 	bl	8000264 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <prvInitialiseTaskLists+0x70>)
 8000ec4:	f7ff f9ce 	bl	8000264 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000ec8:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <prvInitialiseTaskLists+0x74>)
 8000eca:	f7ff f9cb 	bl	8000264 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <prvInitialiseTaskLists+0x78>)
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <prvInitialiseTaskLists+0x64>)
 8000ed2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <prvInitialiseTaskLists+0x7c>)
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <prvInitialiseTaskLists+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000003c 	.word	0x2000003c
 8000ee8:	200000a0 	.word	0x200000a0
 8000eec:	200000b4 	.word	0x200000b4
 8000ef0:	200000d0 	.word	0x200000d0
 8000ef4:	200000e4 	.word	0x200000e4
 8000ef8:	200000fc 	.word	0x200000fc
 8000efc:	200000c8 	.word	0x200000c8
 8000f00:	200000cc 	.word	0x200000cc

08000f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f0a:	e019      	b.n	8000f40 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000f0c:	f000 fdda 	bl	8001ac4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <prvCheckTasksWaitingTermination+0x50>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fa2b 	bl	8000378 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <prvCheckTasksWaitingTermination+0x54>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <prvCheckTasksWaitingTermination+0x54>)
 8000f2a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <prvCheckTasksWaitingTermination+0x58>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3b01      	subs	r3, #1
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <prvCheckTasksWaitingTermination+0x58>)
 8000f34:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000f36:	f000 fdf5 	bl	8001b24 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f848 	bl	8000fd0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <prvCheckTasksWaitingTermination+0x58>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1e1      	bne.n	8000f0c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000e4 	.word	0x200000e4
 8000f58:	20000110 	.word	0x20000110
 8000f5c:	200000f8 	.word	0x200000f8

08000f60 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8000f6c:	e005      	b.n	8000f7a <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3301      	adds	r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
            ulCount++;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2ba5      	cmp	r3, #165	; 0xa5
 8000f80:	d0f5      	beq.n	8000f6e <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b29b      	uxth	r3, r3
    }
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d102      	bne.n	8000fac <uxTaskGetStackHighWaterMark+0x14>
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <uxTaskGetStackHighWaterMark+0x34>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	e000      	b.n	8000fae <uxTaskGetStackHighWaterMark+0x16>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8000fb6:	6938      	ldr	r0, [r7, #16]
 8000fb8:	f7ff ffd2 	bl	8000f60 <prvTaskCheckFreeStackSpace>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    }
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000038 	.word	0x20000038

08000fd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 ff57 	bl	8001e90 <vPortFree>
            vPortFree( pxTCB );
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 ff54 	bl	8001e90 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <prvResetNextTaskUnblockTime+0x30>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d104      	bne.n	8001008 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <prvResetNextTaskUnblockTime+0x34>)
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001006:	e005      	b.n	8001014 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <prvResetNextTaskUnblockTime+0x30>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <prvResetNextTaskUnblockTime+0x34>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200000c8 	.word	0x200000c8
 8001024:	20000130 	.word	0x20000130

08001028 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af02      	add	r7, sp, #8
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00a      	beq.n	8001052 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001040:	f383 8811 	msr	BASEPRI, r3
 8001044:	f3bf 8f6f 	isb	sy
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	613b      	str	r3, [r7, #16]
    }
 800104e:	bf00      	nop
 8001050:	e7fe      	b.n	8001050 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001052:	f000 fd37 	bl	8001ac4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	3364      	adds	r3, #100	; 0x64
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d022      	beq.n	80010ae <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001068:	4b31      	ldr	r3, [pc, #196]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	3218      	adds	r2, #24
 8001070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	43d2      	mvns	r2, r2
 8001078:	4011      	ands	r1, r2
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	3218      	adds	r2, #24
 800107e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	3364      	adds	r3, #100	; 0x64
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001096:	2101      	movs	r1, #1
 8001098:	6a38      	ldr	r0, [r7, #32]
 800109a:	f000 fadf 	bl	800165c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <xTaskGenericNotifyWait+0x10c>)
 80010a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	f3bf 8f4f 	dsb	sy
 80010aa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80010ae:	f000 fd39 	bl	8001b24 <vPortExitCritical>

        taskENTER_CRITICAL();
 80010b2:	f000 fd07 	bl	8001ac4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	6a3b      	ldr	r3, [r7, #32]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4613      	mov	r3, r2
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	2040      	movs	r0, #64	; 0x40
 80010c4:	f002 fe50 	bl	8003d68 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	3218      	adds	r2, #24
 80010d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4413      	add	r3, r2
 80010e6:	3364      	adds	r3, #100	; 0x64
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d002      	beq.n	80010f6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e00e      	b.n	8001114 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	3218      	adds	r2, #24
 80010fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	43d2      	mvns	r2, r2
 8001106:	4011      	ands	r1, r2
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	3218      	adds	r2, #24
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001110:	2301      	movs	r3, #1
 8001112:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <xTaskGenericNotifyWait+0x108>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	3364      	adds	r3, #100	; 0x64
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001122:	f000 fcff 	bl	8001b24 <vPortExitCritical>

        return xReturn;
 8001126:	697b      	ldr	r3, [r7, #20]
    }
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000038 	.word	0x20000038
 8001134:	e000ed04 	.word	0xe000ed04

08001138 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001138:	b580      	push	{r7, lr}
 800113a:	b090      	sub	sp, #64	; 0x40
 800113c:	af02      	add	r7, sp, #8
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001146:	2301      	movs	r3, #1
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00a      	beq.n	8001166 <xTaskGenericNotify+0x2e>
        __asm volatile
 8001150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001154:	f383 8811 	msr	BASEPRI, r3
 8001158:	f3bf 8f6f 	isb	sy
 800115c:	f3bf 8f4f 	dsb	sy
 8001160:	623b      	str	r3, [r7, #32]
    }
 8001162:	bf00      	nop
 8001164:	e7fe      	b.n	8001164 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10a      	bne.n	8001182 <xTaskGenericNotify+0x4a>
        __asm volatile
 800116c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001170:	f383 8811 	msr	BASEPRI, r3
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	f3bf 8f4f 	dsb	sy
 800117c:	61fb      	str	r3, [r7, #28]
    }
 800117e:	bf00      	nop
 8001180:	e7fe      	b.n	8001180 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8001186:	f000 fc9d 	bl	8001ac4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800118a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	3218      	adds	r2, #24
 8001196:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800119a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800119e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	3364      	adds	r3, #100	; 0x64
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80011ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	3364      	adds	r3, #100	; 0x64
 80011b4:	2202      	movs	r2, #2
 80011b6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d83b      	bhi.n	8001236 <xTaskGenericNotify+0xfe>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <xTaskGenericNotify+0x8c>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	08001255 	.word	0x08001255
 80011c8:	080011d9 	.word	0x080011d9
 80011cc:	080011f5 	.word	0x080011f5
 80011d0:	0800120d 	.word	0x0800120d
 80011d4:	0800121b 	.word	0x0800121b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	3218      	adds	r2, #24
 80011de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	ea42 0103 	orr.w	r1, r2, r3
 80011e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	3218      	adds	r2, #24
 80011ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80011f2:	e032      	b.n	800125a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80011f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	3218      	adds	r2, #24
 80011fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fe:	1c59      	adds	r1, r3, #1
 8001200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	3218      	adds	r2, #24
 8001206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800120a:	e026      	b.n	800125a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	3218      	adds	r2, #24
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001218:	e01f      	b.n	800125a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800121a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800121e:	2b02      	cmp	r3, #2
 8001220:	d006      	beq.n	8001230 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	3218      	adds	r2, #24
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800122e:	e014      	b.n	800125a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8001234:	e011      	b.n	800125a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001236:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <xTaskGenericNotify+0x238>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00c      	beq.n	8001258 <xTaskGenericNotify+0x120>
        __asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	61bb      	str	r3, [r7, #24]
    }
 8001250:	bf00      	nop
 8001252:	e7fe      	b.n	8001252 <xTaskGenericNotify+0x11a>
                    break;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <xTaskGenericNotify+0x122>

                    break;
 8001258:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	4618      	mov	r0, r3
 800125e:	f003 fae9 	bl	8004834 <SEGGER_SYSVIEW_ShrinkId>
 8001262:	4601      	mov	r1, r0
 8001264:	78fa      	ldrb	r2, [r7, #3]
 8001266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4613      	mov	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	203e      	movs	r0, #62	; 0x3e
 8001270:	f002 fd7a 	bl	8003d68 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001278:	2b01      	cmp	r3, #1
 800127a:	d172      	bne.n	8001362 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
 8001282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001288:	68d2      	ldr	r2, [r2, #12]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001292:	6892      	ldr	r2, [r2, #8]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129c:	3304      	adds	r3, #4
 800129e:	429a      	cmp	r2, r3
 80012a0:	d103      	bne.n	80012aa <xTaskGenericNotify+0x172>
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	2200      	movs	r2, #0
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1e5a      	subs	r2, r3, #1
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80012ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fa77 	bl	80047b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	2201      	movs	r2, #1
 80012c8:	409a      	lsls	r2, r3
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <xTaskGenericNotify+0x23c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <xTaskGenericNotify+0x23c>)
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d8:	4927      	ldr	r1, [pc, #156]	; (8001378 <xTaskGenericNotify+0x240>)
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3304      	adds	r3, #4
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	3204      	adds	r2, #4
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	1d1a      	adds	r2, r3, #4
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <xTaskGenericNotify+0x240>)
 8001318:	441a      	add	r2, r3
 800131a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131c:	615a      	str	r2, [r3, #20]
 800131e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001322:	4915      	ldr	r1, [pc, #84]	; (8001378 <xTaskGenericNotify+0x240>)
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1c59      	adds	r1, r3, #1
 8001332:	4811      	ldr	r0, [pc, #68]	; (8001378 <xTaskGenericNotify+0x240>)
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4403      	add	r3, r0
 800133e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <xTaskGenericNotify+0x226>
        __asm volatile
 8001348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800134c:	f383 8811 	msr	BASEPRI, r3
 8001350:	f3bf 8f6f 	isb	sy
 8001354:	f3bf 8f4f 	dsb	sy
 8001358:	617b      	str	r3, [r7, #20]
    }
 800135a:	bf00      	nop
 800135c:	e7fe      	b.n	800135c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <xTaskGenericNotify+0x244>)
 8001360:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001362:	f000 fbdf 	bl	8001b24 <vPortExitCritical>

        return xReturn;
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001368:	4618      	mov	r0, r3
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000114 	.word	0x20000114
 8001374:	20000118 	.word	0x20000118
 8001378:	2000003c 	.word	0x2000003c
 800137c:	20000038 	.word	0x20000038

08001380 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af02      	add	r7, sp, #8
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800138e:	2301      	movs	r3, #1
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10a      	bne.n	80013ae <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8001398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139c:	f383 8811 	msr	BASEPRI, r3
 80013a0:	f3bf 8f6f 	isb	sy
 80013a4:	f3bf 8f4f 	dsb	sy
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80013aa:	bf00      	nop
 80013ac:	e7fe      	b.n	80013ac <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00a      	beq.n	80013ca <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80013b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b8:	f383 8811 	msr	BASEPRI, r3
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80013c6:	bf00      	nop
 80013c8:	e7fe      	b.n	80013c8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80013ca:	f000 fc67 	bl	8001c9c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80013d2:	f3ef 8211 	mrs	r2, BASEPRI
 80013d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	623a      	str	r2, [r7, #32]
 80013e8:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80013ea:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80013ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80013ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80013f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	3218      	adds	r2, #24
 80013fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001400:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	3364      	adds	r3, #100	; 0x64
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	3364      	adds	r3, #100	; 0x64
 8001418:	2202      	movs	r2, #2
 800141a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	2b04      	cmp	r3, #4
 8001420:	d83b      	bhi.n	800149a <xTaskGenericNotifyFromISR+0x11a>
 8001422:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <xTaskGenericNotifyFromISR+0xa8>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	080014b9 	.word	0x080014b9
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001459 	.word	0x08001459
 8001434:	08001471 	.word	0x08001471
 8001438:	0800147f 	.word	0x0800147f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800143c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	3218      	adds	r2, #24
 8001442:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	ea42 0103 	orr.w	r1, r2, r3
 800144c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	3218      	adds	r2, #24
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001456:	e032      	b.n	80014be <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	3218      	adds	r2, #24
 800145e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	3218      	adds	r2, #24
 800146a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800146e:	e026      	b.n	80014be <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	3218      	adds	r2, #24
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800147c:	e01f      	b.n	80014be <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800147e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001482:	2b02      	cmp	r3, #2
 8001484:	d006      	beq.n	8001494 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	3218      	adds	r2, #24
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001492:	e014      	b.n	80014be <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8001494:	2300      	movs	r3, #0
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8001498:	e011      	b.n	80014be <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800149a:	4b69      	ldr	r3, [pc, #420]	; (8001640 <xTaskGenericNotifyFromISR+0x2c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00c      	beq.n	80014bc <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80014a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a6:	f383 8811 	msr	BASEPRI, r3
 80014aa:	f3bf 8f6f 	isb	sy
 80014ae:	f3bf 8f4f 	dsb	sy
 80014b2:	61bb      	str	r3, [r7, #24]
    }
 80014b4:	bf00      	nop
 80014b6:	e7fe      	b.n	80014b6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80014b8:	bf00      	nop
 80014ba:	e000      	b.n	80014be <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80014bc:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80014be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 f9b7 	bl	8004834 <SEGGER_SYSVIEW_ShrinkId>
 80014c6:	78f9      	ldrb	r1, [r7, #3]
 80014c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014cc:	9201      	str	r2, [sp, #4]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	460b      	mov	r3, r1
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4601      	mov	r1, r0
 80014d6:	203f      	movs	r0, #63	; 0x3f
 80014d8:	f002 fcd8 	bl	8003e8c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80014dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 80a2 	bne.w	800162a <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80014e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 80014ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f2:	f383 8811 	msr	BASEPRI, r3
 80014f6:	f3bf 8f6f 	isb	sy
 80014fa:	f3bf 8f4f 	dsb	sy
 80014fe:	617b      	str	r3, [r7, #20]
    }
 8001500:	bf00      	nop
 8001502:	e7fe      	b.n	8001502 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001504:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <xTaskGenericNotifyFromISR+0x2c4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d162      	bne.n	80015d2 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800150c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
 8001512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001518:	68d2      	ldr	r2, [r2, #12]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001522:	6892      	ldr	r2, [r2, #8]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152c:	3304      	adds	r3, #4
 800152e:	429a      	cmp	r2, r3
 8001530:	d103      	bne.n	800153a <xTaskGenericNotifyFromISR+0x1ba>
 8001532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
 8001540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001548:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800154a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800154c:	4618      	mov	r0, r3
 800154e:	f003 f92f 	bl	80047b0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	2201      	movs	r2, #1
 8001558:	409a      	lsls	r2, r3
 800155a:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <xTaskGenericNotifyFromISR+0x2c8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4313      	orrs	r3, r2
 8001560:	4a39      	ldr	r2, [pc, #228]	; (8001648 <xTaskGenericNotifyFromISR+0x2c8>)
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001568:	4938      	ldr	r1, [pc, #224]	; (800164c <xTaskGenericNotifyFromISR+0x2cc>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3304      	adds	r3, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800157a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800158e:	3204      	adds	r2, #4
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001594:	1d1a      	adds	r2, r3, #4
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4a29      	ldr	r2, [pc, #164]	; (800164c <xTaskGenericNotifyFromISR+0x2cc>)
 80015a8:	441a      	add	r2, r3
 80015aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b2:	4926      	ldr	r1, [pc, #152]	; (800164c <xTaskGenericNotifyFromISR+0x2cc>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1c59      	adds	r1, r3, #1
 80015c2:	4822      	ldr	r0, [pc, #136]	; (800164c <xTaskGenericNotifyFromISR+0x2cc>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4403      	add	r3, r0
 80015ce:	6019      	str	r1, [r3, #0]
 80015d0:	e01b      	b.n	800160a <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <xTaskGenericNotifyFromISR+0x2d0>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
 80015d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015dc:	61da      	str	r2, [r3, #28]
 80015de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e4:	621a      	str	r2, [r3, #32]
 80015e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015ec:	3218      	adds	r2, #24
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015f2:	f103 0218 	add.w	r2, r3, #24
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <xTaskGenericNotifyFromISR+0x2d0>)
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <xTaskGenericNotifyFromISR+0x2d0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a12      	ldr	r2, [pc, #72]	; (8001650 <xTaskGenericNotifyFromISR+0x2d0>)
 8001608:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800160a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800160c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <xTaskGenericNotifyFromISR+0x2d4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	429a      	cmp	r2, r3
 8001616:	d908      	bls.n	800162a <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8001618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800161e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <xTaskGenericNotifyFromISR+0x2d8>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800162c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001634:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8001636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8001638:	4618      	mov	r0, r3
 800163a:	3748      	adds	r7, #72	; 0x48
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000114 	.word	0x20000114
 8001644:	20000138 	.word	0x20000138
 8001648:	20000118 	.word	0x20000118
 800164c:	2000003c 	.word	0x2000003c
 8001650:	200000d0 	.word	0x200000d0
 8001654:	20000038 	.word	0x20000038
 8001658:	20000124 	.word	0x20000124

0800165c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <prvAddCurrentTaskToDelayedList+0xec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = pdFALSE;
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3304      	adds	r3, #4
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fe7b 	bl	8000378 <uxListRemove>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10b      	bne.n	80016a0 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	2201      	movs	r2, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43da      	mvns	r2, r3
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4013      	ands	r3, r2
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <prvAddCurrentTaskToDelayedList+0xf4>)
 800169e:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	d124      	bne.n	80016f2 <prvAddCurrentTaskToDelayedList+0x96>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d021      	beq.n	80016f2 <prvAddCurrentTaskToDelayedList+0x96>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <prvAddCurrentTaskToDelayedList+0xf8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	6892      	ldr	r2, [r2, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	3204      	adds	r2, #4
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	1d1a      	adds	r2, r3, #4
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1c      	ldr	r2, [pc, #112]	; (8001754 <prvAddCurrentTaskToDelayedList+0xf8>)
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <prvAddCurrentTaskToDelayedList+0xf8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <prvAddCurrentTaskToDelayedList+0xf8>)
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80016f0:	e026      	b.n	8001740 <prvAddCurrentTaskToDelayedList+0xe4>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	429a      	cmp	r2, r3
 8001708:	d209      	bcs.n	800171e <prvAddCurrentTaskToDelayedList+0xc2>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <prvAddCurrentTaskToDelayedList+0xfc>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	3304      	adds	r3, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7fe fdf5 	bl	8000306 <vListInsert>
}
 800171c:	e010      	b.n	8001740 <prvAddCurrentTaskToDelayedList+0xe4>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <prvAddCurrentTaskToDelayedList+0x100>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <prvAddCurrentTaskToDelayedList+0xf0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3304      	adds	r3, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f7fe fdeb 	bl	8000306 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <prvAddCurrentTaskToDelayedList+0x104>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	429a      	cmp	r2, r3
 8001738:	d202      	bcs.n	8001740 <prvAddCurrentTaskToDelayedList+0xe4>
                    xNextTaskUnblockTime = xTimeToWake;
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <prvAddCurrentTaskToDelayedList+0x104>)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000114 	.word	0x20000114
 800174c:	20000038 	.word	0x20000038
 8001750:	20000118 	.word	0x20000118
 8001754:	200000fc 	.word	0x200000fc
 8001758:	200000cc 	.word	0x200000cc
 800175c:	200000c8 	.word	0x200000c8
 8001760:	20000130 	.word	0x20000130

08001764 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3b04      	subs	r3, #4
 8001774:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800177c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3b04      	subs	r3, #4
 8001782:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f023 0201 	bic.w	r2, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3b04      	subs	r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <pxPortInitialiseStack+0x64>)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b14      	subs	r3, #20
 800179e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3b04      	subs	r3, #4
 80017aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f06f 0202 	mvn.w	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3b20      	subs	r3, #32
 80017b8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	080017cd 	.word	0x080017cd

080017cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <prvTaskExitError+0x54>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017de:	d00a      	beq.n	80017f6 <prvTaskExitError+0x2a>
        __asm volatile
 80017e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017e4:	f383 8811 	msr	BASEPRI, r3
 80017e8:	f3bf 8f6f 	isb	sy
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	60fb      	str	r3, [r7, #12]
    }
 80017f2:	bf00      	nop
 80017f4:	e7fe      	b.n	80017f4 <prvTaskExitError+0x28>
        __asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	60bb      	str	r3, [r7, #8]
    }
 8001808:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800180a:	bf00      	nop
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0fc      	beq.n	800180c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20000004 	.word	0x20000004
	...

08001830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <pxCurrentTCBConst2>)
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	6808      	ldr	r0, [r1, #0]
 8001836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800183a:	f380 8809 	msr	PSP, r0
 800183e:	f3bf 8f6f 	isb	sy
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f380 8811 	msr	BASEPRI, r0
 800184a:	4770      	bx	lr
 800184c:	f3af 8000 	nop.w

08001850 <pxCurrentTCBConst2>:
 8001850:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop

08001858 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001858:	4808      	ldr	r0, [pc, #32]	; (800187c <prvPortStartFirstTask+0x24>)
 800185a:	6800      	ldr	r0, [r0, #0]
 800185c:	6800      	ldr	r0, [r0, #0]
 800185e:	f380 8808 	msr	MSP, r0
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f380 8814 	msr	CONTROL, r0
 800186a:	b662      	cpsie	i
 800186c:	b661      	cpsie	f
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	df00      	svc	0
 8001878:	bf00      	nop
 800187a:	0000      	.short	0x0000
 800187c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop

08001884 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800188a:	4b46      	ldr	r3, [pc, #280]	; (80019a4 <xPortStartScheduler+0x120>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a46      	ldr	r2, [pc, #280]	; (80019a8 <xPortStartScheduler+0x124>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d10a      	bne.n	80018aa <xPortStartScheduler+0x26>
        __asm volatile
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	613b      	str	r3, [r7, #16]
    }
 80018a6:	bf00      	nop
 80018a8:	e7fe      	b.n	80018a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80018aa:	4b3e      	ldr	r3, [pc, #248]	; (80019a4 <xPortStartScheduler+0x120>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a3f      	ldr	r2, [pc, #252]	; (80019ac <xPortStartScheduler+0x128>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d10a      	bne.n	80018ca <xPortStartScheduler+0x46>
        __asm volatile
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	60fb      	str	r3, [r7, #12]
    }
 80018c6:	bf00      	nop
 80018c8:	e7fe      	b.n	80018c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <xPortStartScheduler+0x12c>)
 80018cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	22ff      	movs	r2, #255	; 0xff
 80018da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <xPortStartScheduler+0x130>)
 80018f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <xPortStartScheduler+0x134>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018f8:	e009      	b.n	800190e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <xPortStartScheduler+0x134>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <xPortStartScheduler+0x134>)
 8001902:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001916:	2b80      	cmp	r3, #128	; 0x80
 8001918:	d0ef      	beq.n	80018fa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800191a:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <xPortStartScheduler+0x134>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	d00a      	beq.n	800193c <xPortStartScheduler+0xb8>
        __asm volatile
 8001926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	f3bf 8f6f 	isb	sy
 8001932:	f3bf 8f4f 	dsb	sy
 8001936:	60bb      	str	r3, [r7, #8]
    }
 8001938:	bf00      	nop
 800193a:	e7fe      	b.n	800193a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <xPortStartScheduler+0x134>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <xPortStartScheduler+0x134>)
 8001944:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <xPortStartScheduler+0x134>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800194e:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <xPortStartScheduler+0x134>)
 8001950:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <xPortStartScheduler+0x138>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <xPortStartScheduler+0x138>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <xPortStartScheduler+0x138>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a14      	ldr	r2, [pc, #80]	; (80019bc <xPortStartScheduler+0x138>)
 800196c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001970:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001972:	f000 f963 	bl	8001c3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <xPortStartScheduler+0x13c>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800197c:	f000 f982 	bl	8001c84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <xPortStartScheduler+0x140>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <xPortStartScheduler+0x140>)
 8001986:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800198a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800198c:	f7ff ff64 	bl	8001858 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001990:	f7ff f9e2 	bl	8000d58 <vTaskSwitchContext>
    prvTaskExitError();
 8001994:	f7ff ff1a 	bl	80017cc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	410fc271 	.word	0x410fc271
 80019ac:	410fc270 	.word	0x410fc270
 80019b0:	e000e400 	.word	0xe000e400
 80019b4:	20000144 	.word	0x20000144
 80019b8:	20000148 	.word	0x20000148
 80019bc:	e000ed20 	.word	0xe000ed20
 80019c0:	20000004 	.word	0x20000004
 80019c4:	e000ef34 	.word	0xe000ef34

080019c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <vInitPrioGroupValue+0xe4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a37      	ldr	r2, [pc, #220]	; (8001ab0 <vInitPrioGroupValue+0xe8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d10a      	bne.n	80019ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80019d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019dc:	f383 8811 	msr	BASEPRI, r3
 80019e0:	f3bf 8f6f 	isb	sy
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	613b      	str	r3, [r7, #16]
    }
 80019ea:	bf00      	nop
 80019ec:	e7fe      	b.n	80019ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <vInitPrioGroupValue+0xe4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a30      	ldr	r2, [pc, #192]	; (8001ab4 <vInitPrioGroupValue+0xec>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d10a      	bne.n	8001a0e <vInitPrioGroupValue+0x46>
        __asm volatile
 80019f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	60fb      	str	r3, [r7, #12]
    }
 8001a0a:	bf00      	nop
 8001a0c:	e7fe      	b.n	8001a0c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <vInitPrioGroupValue+0xf0>)
 8001a10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	22ff      	movs	r2, #255	; 0xff
 8001a1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <vInitPrioGroupValue+0xf4>)
 8001a34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a3c:	e009      	b.n	8001a52 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	2b80      	cmp	r3, #128	; 0x80
 8001a5c:	d0ef      	beq.n	8001a3e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d00a      	beq.n	8001a80 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8001a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a6e:	f383 8811 	msr	BASEPRI, r3
 8001a72:	f3bf 8f6f 	isb	sy
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	60bb      	str	r3, [r7, #8]
    }
 8001a7c:	bf00      	nop
 8001a7e:	e7fe      	b.n	8001a7e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a88:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <vInitPrioGroupValue+0xf8>)
 8001a94:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	410fc271 	.word	0x410fc271
 8001ab4:	410fc270 	.word	0x410fc270
 8001ab8:	e000e400 	.word	0xe000e400
 8001abc:	20000144 	.word	0x20000144
 8001ac0:	20000148 	.word	0x20000148

08001ac4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
        __asm volatile
 8001aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ace:	f383 8811 	msr	BASEPRI, r3
 8001ad2:	f3bf 8f6f 	isb	sy
 8001ad6:	f3bf 8f4f 	dsb	sy
 8001ada:	607b      	str	r3, [r7, #4]
    }
 8001adc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <vPortEnterCritical+0x58>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <vPortEnterCritical+0x58>)
 8001ae6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <vPortEnterCritical+0x58>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d10f      	bne.n	8001b10 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <vPortEnterCritical+0x5c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00a      	beq.n	8001b10 <vPortEnterCritical+0x4c>
        __asm volatile
 8001afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	603b      	str	r3, [r7, #0]
    }
 8001b0c:	bf00      	nop
 8001b0e:	e7fe      	b.n	8001b0e <vPortEnterCritical+0x4a>
    }
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	e000ed04 	.word	0xe000ed04

08001b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <vPortExitCritical+0x50>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <vPortExitCritical+0x24>
        __asm volatile
 8001b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b36:	f383 8811 	msr	BASEPRI, r3
 8001b3a:	f3bf 8f6f 	isb	sy
 8001b3e:	f3bf 8f4f 	dsb	sy
 8001b42:	607b      	str	r3, [r7, #4]
    }
 8001b44:	bf00      	nop
 8001b46:	e7fe      	b.n	8001b46 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <vPortExitCritical+0x50>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <vPortExitCritical+0x50>)
 8001b50:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <vPortExitCritical+0x50>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d105      	bne.n	8001b66 <vPortExitCritical+0x42>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f383 8811 	msr	BASEPRI, r3
    }
 8001b64:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000004 	.word	0x20000004
	...

08001b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001b80:	f3ef 8009 	mrs	r0, PSP
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <pxCurrentTCBConst>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	f01e 0f10 	tst.w	lr, #16
 8001b90:	bf08      	it	eq
 8001b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b9a:	6010      	str	r0, [r2, #0]
 8001b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ba4:	f380 8811 	msr	BASEPRI, r0
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	f3bf 8f6f 	isb	sy
 8001bb0:	f7ff f8d2 	bl	8000d58 <vTaskSwitchContext>
 8001bb4:	f04f 0000 	mov.w	r0, #0
 8001bb8:	f380 8811 	msr	BASEPRI, r0
 8001bbc:	bc09      	pop	{r0, r3}
 8001bbe:	6819      	ldr	r1, [r3, #0]
 8001bc0:	6808      	ldr	r0, [r1, #0]
 8001bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc6:	f01e 0f10 	tst.w	lr, #16
 8001bca:	bf08      	it	eq
 8001bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001bd0:	f380 8809 	msr	PSP, r0
 8001bd4:	f3bf 8f6f 	isb	sy
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	f3af 8000 	nop.w

08001be0 <pxCurrentTCBConst>:
 8001be0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop

08001be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
        __asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	607b      	str	r3, [r7, #4]
    }
 8001c00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001c02:	f002 fcbb 	bl	800457c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001c06:	f7fe ffaf 	bl	8000b68 <xTaskIncrementTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001c10:	f002 fd12 	bl	8004638 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <SysTick_Handler+0x50>)
 8001c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e001      	b.n	8001c22 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8001c1e:	f002 fcef 	bl	8004600 <SEGGER_SYSVIEW_RecordExitISR>
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f383 8811 	msr	BASEPRI, r3
    }
 8001c2c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	e000ed04 	.word	0xe000ed04

08001c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <vPortSetupTimerInterrupt+0x34>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <vPortSetupTimerInterrupt+0x38>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <vPortSetupTimerInterrupt+0x3c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <vPortSetupTimerInterrupt+0x40>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	099b      	lsrs	r3, r3, #6
 8001c58:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <vPortSetupTimerInterrupt+0x44>)
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <vPortSetupTimerInterrupt+0x34>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010
 8001c74:	e000e018 	.word	0xe000e018
 8001c78:	20000010 	.word	0x20000010
 8001c7c:	10624dd3 	.word	0x10624dd3
 8001c80:	e000e014 	.word	0xe000e014

08001c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001c94 <vPortEnableVFP+0x10>
 8001c88:	6801      	ldr	r1, [r0, #0]
 8001c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c8e:	6001      	str	r1, [r0, #0]
 8001c90:	4770      	bx	lr
 8001c92:	0000      	.short	0x0000
 8001c94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop

08001c9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8001ca2:	f3ef 8305 	mrs	r3, IPSR
 8001ca6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	d914      	bls.n	8001cd8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <vPortValidateInterruptPriority+0x70>)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <vPortValidateInterruptPriority+0x74>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	7afa      	ldrb	r2, [r7, #11]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d20a      	bcs.n	8001cd8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8001cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	607b      	str	r3, [r7, #4]
    }
 8001cd4:	bf00      	nop
 8001cd6:	e7fe      	b.n	8001cd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <vPortValidateInterruptPriority+0x78>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <vPortValidateInterruptPriority+0x7c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d90a      	bls.n	8001cfe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cec:	f383 8811 	msr	BASEPRI, r3
 8001cf0:	f3bf 8f6f 	isb	sy
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	603b      	str	r3, [r7, #0]
    }
 8001cfa:	bf00      	nop
 8001cfc:	e7fe      	b.n	8001cfc <vPortValidateInterruptPriority+0x60>
    }
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000e3f0 	.word	0xe000e3f0
 8001d10:	20000144 	.word	0x20000144
 8001d14:	e000ed0c 	.word	0xe000ed0c
 8001d18:	20000148 	.word	0x20000148

08001d1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001d28:	f7fe fe0c 	bl	8000944 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <pvPortMalloc+0x160>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001d34:	f000 f908 	bl	8001f48 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001d3e:	2208      	movs	r2, #8
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	3308      	adds	r3, #8
 8001d4a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d804      	bhi.n	8001d60 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	e001      	b.n	8001d64 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db70      	blt.n	8001e4c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d06d      	beq.n	8001e4c <pvPortMalloc+0x130>
 8001d70:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <pvPortMalloc+0x164>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d868      	bhi.n	8001e4c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001d7a:	4b42      	ldr	r3, [pc, #264]	; (8001e84 <pvPortMalloc+0x168>)
 8001d7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001d7e:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <pvPortMalloc+0x168>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d84:	e004      	b.n	8001d90 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d903      	bls.n	8001da2 <pvPortMalloc+0x86>
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f1      	bne.n	8001d86 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001da2:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <pvPortMalloc+0x160>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d04f      	beq.n	8001e4c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2208      	movs	r2, #8
 8001db2:	4413      	add	r3, r2
 8001db4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d91f      	bls.n	8001e0e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00a      	beq.n	8001df6 <pvPortMalloc+0xda>
        __asm volatile
 8001de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de4:	f383 8811 	msr	BASEPRI, r3
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	613b      	str	r3, [r7, #16]
    }
 8001df2:	bf00      	nop
 8001df4:	e7fe      	b.n	8001df4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	1ad2      	subs	r2, r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f000 f8f9 	bl	8002000 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <pvPortMalloc+0x164>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <pvPortMalloc+0x164>)
 8001e1a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <pvPortMalloc+0x164>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <pvPortMalloc+0x16c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d203      	bcs.n	8001e30 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <pvPortMalloc+0x164>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <pvPortMalloc+0x16c>)
 8001e2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <pvPortMalloc+0x170>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <pvPortMalloc+0x170>)
 8001e4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001e4c:	f7fe fd88 	bl	8000960 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <pvPortMalloc+0x154>
        __asm volatile
 8001e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	60fb      	str	r3, [r7, #12]
    }
 8001e6c:	bf00      	nop
 8001e6e:	e7fe      	b.n	8001e6e <pvPortMalloc+0x152>
    return pvReturn;
 8001e70:	69fb      	ldr	r3, [r7, #28]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3728      	adds	r7, #40	; 0x28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20004154 	.word	0x20004154
 8001e80:	20004158 	.word	0x20004158
 8001e84:	2000414c 	.word	0x2000414c
 8001e88:	2000415c 	.word	0x2000415c
 8001e8c:	20004160 	.word	0x20004160

08001e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d049      	beq.n	8001f36 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	425b      	negs	r3, r3
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <vPortFree+0x3e>
        __asm volatile
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	60fb      	str	r3, [r7, #12]
    }
 8001eca:	bf00      	nop
 8001ecc:	e7fe      	b.n	8001ecc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <vPortFree+0x5c>
        __asm volatile
 8001ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eda:	f383 8811 	msr	BASEPRI, r3
 8001ede:	f3bf 8f6f 	isb	sy
 8001ee2:	f3bf 8f4f 	dsb	sy
 8001ee6:	60bb      	str	r3, [r7, #8]
    }
 8001ee8:	bf00      	nop
 8001eea:	e7fe      	b.n	8001eea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0fdb      	lsrs	r3, r3, #31
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01c      	beq.n	8001f36 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001f10:	f7fe fd18 	bl	8000944 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <vPortFree+0xb0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <vPortFree+0xb0>)
 8001f20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001f22:	6938      	ldr	r0, [r7, #16]
 8001f24:	f000 f86c 	bl	8002000 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <vPortFree+0xb4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <vPortFree+0xb4>)
 8001f30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001f32:	f7fe fd15 	bl	8000960 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20004158 	.word	0x20004158
 8001f44:	20004164 	.word	0x20004164

08001f48 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f52:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <prvHeapInit+0xa4>)
 8001f56:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3307      	adds	r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <prvHeapInit+0xa4>)
 8001f78:	4413      	add	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <prvHeapInit+0xa8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <prvHeapInit+0xa8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4413      	add	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001f94:	2208      	movs	r2, #8
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <prvHeapInit+0xac>)
 8001fa8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <prvHeapInit+0xac>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <prvHeapInit+0xac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	1ad2      	subs	r2, r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <prvHeapInit+0xac>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <prvHeapInit+0xb0>)
 8001fd6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <prvHeapInit+0xb4>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	2000014c 	.word	0x2000014c
 8001ff0:	2000414c 	.word	0x2000414c
 8001ff4:	20004154 	.word	0x20004154
 8001ff8:	2000415c 	.word	0x2000415c
 8001ffc:	20004158 	.word	0x20004158

08002000 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <prvInsertBlockIntoFreeList+0xac>)
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e002      	b.n	8002014 <prvInsertBlockIntoFreeList+0x14>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d8f7      	bhi.n	800200e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	4413      	add	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d108      	bne.n	8002042 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	441a      	add	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	441a      	add	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d118      	bne.n	8002088 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <prvInsertBlockIntoFreeList+0xb0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d00d      	beq.n	800207e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e008      	b.n	8002090 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <prvInsertBlockIntoFreeList+0xb0>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e003      	b.n	8002090 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	d002      	beq.n	800209e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	2000414c 	.word	0x2000414c
 80020b0:	20004154 	.word	0x20004154

080020b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80020b8:	4803      	ldr	r0, [pc, #12]	; (80020c8 <_cbSendSystemDesc+0x14>)
 80020ba:	f002 fa09 	bl	80044d0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80020be:	4803      	ldr	r0, [pc, #12]	; (80020cc <_cbSendSystemDesc+0x18>)
 80020c0:	f002 fa06 	bl	80044d0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	08006ad4 	.word	0x08006ad4
 80020cc:	08006b14 	.word	0x08006b14

080020d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80020e0:	f001 fd3a 	bl	8003b58 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80020e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80020e8:	f001 fd7a 	bl	8003be0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000010 	.word	0x20000010
 80020f4:	080020b5 	.word	0x080020b5
 80020f8:	08006bc0 	.word	0x08006bc0

080020fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b085      	sub	sp, #20
 8002100:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e048      	b.n	800219a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8002108:	4929      	ldr	r1, [pc, #164]	; (80021b0 <_cbSendTaskList+0xb4>)
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe ff3d 	bl	8000f98 <uxTaskGetStackHighWaterMark>
 800211e:	4601      	mov	r1, r0
 8002120:	4823      	ldr	r0, [pc, #140]	; (80021b0 <_cbSendTaskList+0xb4>)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4403      	add	r3, r0
 800212e:	3310      	adds	r3, #16
 8002130:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002132:	491f      	ldr	r1, [pc, #124]	; (80021b0 <_cbSendTaskList+0xb4>)
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	491b      	ldr	r1, [pc, #108]	; (80021b0 <_cbSendTaskList+0xb4>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3304      	adds	r3, #4
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	4c16      	ldr	r4, [pc, #88]	; (80021b0 <_cbSendTaskList+0xb4>)
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4423      	add	r3, r4
 8002162:	3308      	adds	r3, #8
 8002164:	681c      	ldr	r4, [r3, #0]
 8002166:	4d12      	ldr	r5, [pc, #72]	; (80021b0 <_cbSendTaskList+0xb4>)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	442b      	add	r3, r5
 8002174:	330c      	adds	r3, #12
 8002176:	681d      	ldr	r5, [r3, #0]
 8002178:	4e0d      	ldr	r6, [pc, #52]	; (80021b0 <_cbSendTaskList+0xb4>)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4433      	add	r3, r6
 8002186:	3310      	adds	r3, #16
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	462b      	mov	r3, r5
 800218e:	4622      	mov	r2, r4
 8002190:	f000 f97a 	bl	8002488 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <_cbSendTaskList+0xb8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d3b1      	bcc.n	8002108 <_cbSendTaskList+0xc>
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20004168 	.word	0x20004168
 80021b4:	20004208 	.word	0x20004208

080021b8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80021b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80021c0:	f7fe fcc0 	bl	8000b44 <xTaskGetTickCountFromISR>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2200      	movs	r2, #0
 80021c8:	469a      	mov	sl, r3
 80021ca:	4693      	mov	fp, r2
 80021cc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80021d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	f04f 0a00 	mov.w	sl, #0
 80021dc:	f04f 0b00 	mov.w	fp, #0
 80021e0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80021e4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80021e8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80021ec:	4652      	mov	r2, sl
 80021ee:	465b      	mov	r3, fp
 80021f0:	1a14      	subs	r4, r2, r0
 80021f2:	eb63 0501 	sbc.w	r5, r3, r1
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	00ab      	lsls	r3, r5, #2
 8002200:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002204:	00a2      	lsls	r2, r4, #2
 8002206:	4614      	mov	r4, r2
 8002208:	461d      	mov	r5, r3
 800220a:	eb14 0800 	adds.w	r8, r4, r0
 800220e:	eb45 0901 	adc.w	r9, r5, r1
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800221e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002226:	4690      	mov	r8, r2
 8002228:	4699      	mov	r9, r3
 800222a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800222e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002240 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800224e:	2205      	movs	r2, #5
 8002250:	492b      	ldr	r1, [pc, #172]	; (8002300 <SYSVIEW_AddTask+0xc0>)
 8002252:	68b8      	ldr	r0, [r7, #8]
 8002254:	f004 fbe4 	bl	8006a20 <memcmp>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d04b      	beq.n	80022f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b07      	cmp	r3, #7
 8002264:	d903      	bls.n	800226e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002266:	4828      	ldr	r0, [pc, #160]	; (8002308 <SYSVIEW_AddTask+0xc8>)
 8002268:	f002 fbee 	bl	8004a48 <SEGGER_SYSVIEW_Warn>
    return;
 800226c:	e044      	b.n	80022f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800226e:	4b25      	ldr	r3, [pc, #148]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4926      	ldr	r1, [pc, #152]	; (800230c <SYSVIEW_AddTask+0xcc>)
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4921      	ldr	r1, [pc, #132]	; (800230c <SYSVIEW_AddTask+0xcc>)
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	3304      	adds	r3, #4
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	491b      	ldr	r1, [pc, #108]	; (800230c <SYSVIEW_AddTask+0xcc>)
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	3308      	adds	r3, #8
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4916      	ldr	r1, [pc, #88]	; (800230c <SYSVIEW_AddTask+0xcc>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	330c      	adds	r3, #12
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4910      	ldr	r1, [pc, #64]	; (800230c <SYSVIEW_AddTask+0xcc>)
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3310      	adds	r3, #16
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80022da:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4a08      	ldr	r2, [pc, #32]	; (8002304 <SYSVIEW_AddTask+0xc4>)
 80022e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f8ca 	bl	8002488 <SYSVIEW_SendTaskInfo>
 80022f4:	e000      	b.n	80022f8 <SYSVIEW_AddTask+0xb8>
    return;
 80022f6:	bf00      	nop

}
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	08006b24 	.word	0x08006b24
 8002304:	20004208 	.word	0x20004208
 8002308:	08006b2c 	.word	0x08006b2c
 800230c:	20004168 	.word	0x20004168

08002310 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80ab 	beq.w	8002478 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e00d      	b.n	8002344 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8002328:	4956      	ldr	r1, [pc, #344]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	429a      	cmp	r2, r3
 800233c:	d008      	beq.n	8002350 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	429a      	cmp	r2, r3
 800234c:	d3ec      	bcc.n	8002328 <SYSVIEW_DeleteTask+0x18>
 800234e:	e000      	b.n	8002352 <SYSVIEW_DeleteTask+0x42>
      break;
 8002350:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8002352:	4b4b      	ldr	r3, [pc, #300]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3b01      	subs	r3, #1
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	429a      	cmp	r2, r3
 800235c:	d111      	bne.n	8002382 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4a46      	ldr	r2, [pc, #280]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 800236a:	4413      	add	r3, r2
 800236c:	2214      	movs	r2, #20
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fb65 	bl	8006a40 <memset>
    _NumTasks--;
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	4a40      	ldr	r2, [pc, #256]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e07b      	b.n	800247a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d276      	bcs.n	800247a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800238c:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	493c      	ldr	r1, [pc, #240]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	4838      	ldr	r0, [pc, #224]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4403      	add	r3, r0
 80023ae:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	4933      	ldr	r1, [pc, #204]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	3304      	adds	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	482f      	ldr	r0, [pc, #188]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4403      	add	r3, r0
 80023d4:	3304      	adds	r3, #4
 80023d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	4929      	ldr	r1, [pc, #164]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3308      	adds	r3, #8
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	4825      	ldr	r0, [pc, #148]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4403      	add	r3, r0
 80023fc:	3308      	adds	r3, #8
 80023fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	491f      	ldr	r1, [pc, #124]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	330c      	adds	r3, #12
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	481b      	ldr	r0, [pc, #108]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	330c      	adds	r3, #12
 8002426:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	4915      	ldr	r1, [pc, #84]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3310      	adds	r3, #16
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	4811      	ldr	r0, [pc, #68]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4403      	add	r3, r0
 800244c:	3310      	adds	r3, #16
 800244e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <SYSVIEW_DeleteTask+0x174>)
 8002460:	4413      	add	r3, r2
 8002462:	2214      	movs	r2, #20
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f004 faea 	bl	8006a40 <memset>
    _NumTasks--;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	4a03      	ldr	r2, [pc, #12]	; (8002480 <SYSVIEW_DeleteTask+0x170>)
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e000      	b.n	800247a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002478:	bf00      	nop
  }
}
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20004208 	.word	0x20004208
 8002484:	20004168 	.word	0x20004168

08002488 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	2214      	movs	r2, #20
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 face 	bl	8006a40 <memset>
  TaskInfo.TaskID     = TaskID;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 ff0f 	bl	80042e0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <__NVIC_EnableIRQ+0x38>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000e100 	.word	0xe000e100

08002508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	db0a      	blt.n	8002532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	490c      	ldr	r1, [pc, #48]	; (8002554 <__NVIC_SetPriority+0x4c>)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	440b      	add	r3, r1
 800252c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002530:	e00a      	b.n	8002548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4908      	ldr	r1, [pc, #32]	; (8002558 <__NVIC_SetPriority+0x50>)
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	3b04      	subs	r3, #4
 8002540:	0112      	lsls	r2, r2, #4
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	440b      	add	r3, r1
 8002546:	761a      	strb	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8002562:	f002 facd 	bl	8004b00 <SEGGER_SYSVIEW_IsStarted>
 8002566:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800256e:	f001 fd3b 	bl	8003fe8 <SEGGER_SYSVIEW_Start>
  }
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <_cbOnUARTRx+0x3c>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d806      	bhi.n	800259c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <_cbOnUARTRx+0x3c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_cbOnUARTRx+0x3c>)
 8002598:	701a      	strb	r2, [r3, #0]
    goto Done;
 800259a:	e009      	b.n	80025b0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800259c:	f7ff ffde 	bl	800255c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <_cbOnUARTRx+0x3c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	2201      	movs	r2, #1
 80025aa:	4619      	mov	r1, r3
 80025ac:	f000 fb8e 	bl	8002ccc <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80025b0:	bf00      	nop
}
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000008 	.word	0x20000008

080025bc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <_cbOnUARTTx+0x5c>)
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d80f      	bhi.n	80025ec <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <_cbOnUARTTx+0x5c>)
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <_cbOnUARTTx+0x60>)
 80025d4:	5c9a      	ldrb	r2, [r3, r2]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <_cbOnUARTTx+0x5c>)
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	3301      	adds	r3, #1
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <_cbOnUARTTx+0x5c>)
 80025e4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80025e6:	2301      	movs	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80025ea:	e00f      	b.n	800260c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <_cbOnUARTTx+0x5c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fa0d 	bl	8002a14 <SEGGER_RTT_ReadUpBufferNoLock>
 80025fa:	4603      	mov	r3, r0
 80025fc:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	da02      	bge.n	800260a <_cbOnUARTTx+0x4e>
    r = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e000      	b.n	800260c <_cbOnUARTTx+0x50>
  }
Done:
 800260a:	bf00      	nop
  return r;
 800260c:	68fb      	ldr	r3, [r7, #12]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000008 	.word	0x20000008
 800261c:	08006bc8 	.word	0x08006bc8

08002620 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <SEGGER_UART_init+0x1c>)
 800262a:	4905      	ldr	r1, [pc, #20]	; (8002640 <SEGGER_UART_init+0x20>)
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f865 	bl	80026fc <HIF_UART_Init>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	0800257d 	.word	0x0800257d
 8002640:	080025bd 	.word	0x080025bd

08002644 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART2_ISR;                              // Examine status register
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <USART2_IRQHandler+0x80>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d011      	beq.n	800267e <USART2_IRQHandler+0x3a>
    v = USART2_RDR;                                      // Read data
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <USART2_IRQHandler+0x84>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 030b 	and.w	r3, r3, #11
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <USART2_IRQHandler+0x88>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <USART2_IRQHandler+0x88>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	79fa      	ldrb	r2, [r7, #7]
 800267a:	4610      	mov	r0, r2
 800267c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01a      	beq.n	80026be <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <USART2_IRQHandler+0x8c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d015      	beq.n	80026bc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <USART2_IRQHandler+0x8c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1dfa      	adds	r2, r7, #7
 8002696:	4610      	mov	r0, r2
 8002698:	4798      	blx	r3
 800269a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <USART2_IRQHandler+0x6c>
      USART2_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <USART2_IRQHandler+0x90>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <USART2_IRQHandler+0x90>)
 80026a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e006      	b.n	80026be <USART2_IRQHandler+0x7a>
    } else {
      USART2_ISR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <USART2_IRQHandler+0x80>)
 80026b2:	681b      	ldr	r3, [r3, #0]
      USART2_TDR = v;  // Start transmission by writing to data register
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <USART2_IRQHandler+0x94>)
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e000      	b.n	80026be <USART2_IRQHandler+0x7a>
      return;
 80026bc:	bf00      	nop
    }
  }
}
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	4000441c 	.word	0x4000441c
 80026c8:	40004424 	.word	0x40004424
 80026cc:	2000420c 	.word	0x2000420c
 80026d0:	20004210 	.word	0x20004210
 80026d4:	40004400 	.word	0x40004400
 80026d8:	40004428 	.word	0x40004428

080026dc <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  USART2_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80026e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40004400 	.word	0x40004400

080026fc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
	uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR1 |= (1 <<  17);        // Enable USART2 clock
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HIF_UART_Init+0xac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <HIF_UART_Init+0xac>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002712:	6013      	str	r3, [r2, #0]
  RCC_AHB2ENR |= (1 <<  0);        // Enable IO port A clock
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <HIF_UART_Init+0xb0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a24      	ldr	r2, [pc, #144]	; (80027ac <HIF_UART_Init+0xb0>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]

  GPIOA_AFRL |= (7<<28);
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HIF_UART_Init+0xb4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HIF_UART_Init+0xb4>)
 8002726:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 800272a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  GPIOA_MODER |= (10<<4);
 800272c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8002736:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800273a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART2_CR1 = 0
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HIF_UART_Init+0xb8>)
 800273e:	f248 022d 	movw	r2, #32813	; 0x802d
 8002742:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART2_CR2 = 0
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HIF_UART_Init+0xbc>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART2_CR3 = 0
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HIF_UART_Init+0xc0>)
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HIF_UART_Init+0xc4>)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276e:	d302      	bcc.n	8002776 <HIF_UART_Init+0x7a>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8002770:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002774:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <HIF_UART_Init+0x8a>
    USART2_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <HIF_UART_Init+0xc8>)
 8002782:	b29b      	uxth	r3, r3
 8002784:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8002786:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HIF_UART_Init+0xcc>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800278c:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <HIF_UART_Init+0xd0>)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8002792:	2106      	movs	r1, #6
 8002794:	2026      	movs	r0, #38	; 0x26
 8002796:	f7ff feb7 	bl	8002508 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800279a:	2026      	movs	r0, #38	; 0x26
 800279c:	f7ff fe96 	bl	80024cc <__NVIC_EnableIRQ>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021058 	.word	0x40021058
 80027ac:	4002104c 	.word	0x4002104c
 80027b0:	48000020 	.word	0x48000020
 80027b4:	40004400 	.word	0x40004400
 80027b8:	40004404 	.word	0x40004404
 80027bc:	40004408 	.word	0x40004408
 80027c0:	02625a00 	.word	0x02625a00
 80027c4:	4000440c 	.word	0x4000440c
 80027c8:	2000420c 	.word	0x2000420c
 80027cc:	20004210 	.word	0x20004210

080027d0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <_DoInit+0xa0>)
 80027d8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80027da:	22a8      	movs	r2, #168	; 0xa8
 80027dc:	2100      	movs	r1, #0
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f004 f92e 	bl	8006a40 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2203      	movs	r2, #3
 80027e8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2203      	movs	r2, #3
 80027ee:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4a20      	ldr	r2, [pc, #128]	; (8002874 <_DoInit+0xa4>)
 80027f4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <_DoInit+0xa8>)
 80027fa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002802:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <_DoInit+0xa4>)
 800281a:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <_DoInit+0xac>)
 8002820:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2210      	movs	r2, #16
 8002826:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2200      	movs	r2, #0
 8002832:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800283a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	e00c      	b.n	800285e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1c3 030f 	rsb	r3, r3, #15
 800284a:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <_DoInit+0xb0>)
 800284c:	5cd1      	ldrb	r1, [r2, r3]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	460a      	mov	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3301      	adds	r3, #1
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	d9ef      	bls.n	8002844 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8002864:	f3bf 8f5f 	dmb	sy
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20004214 	.word	0x20004214
 8002874:	08006b7c 	.word	0x08006b7c
 8002878:	200042bc 	.word	0x200042bc
 800287c:	200046bc 	.word	0x200046bc
 8002880:	08006bcc 	.word	0x08006bcc

08002884 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d905      	bls.n	80028b4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e007      	b.n	80028c4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69b9      	ldr	r1, [r7, #24]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	1acb      	subs	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3b01      	subs	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	4293      	cmp	r3, r2
 80028d0:	bf28      	it	cs
 80028d2:	4613      	movcs	r3, r2
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80028d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4293      	cmp	r3, r2
 80028dc:	bf28      	it	cs
 80028de:	4613      	movcs	r3, r2
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f004 f8d1 	bl	8006a98 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80028f6:	6a3a      	ldr	r2, [r7, #32]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	4413      	add	r3, r2
 80028fc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	4413      	add	r3, r2
 8002904:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	4413      	add	r3, r2
 8002914:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	429a      	cmp	r2, r3
 800291e:	d101      	bne.n	8002924 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002924:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1b2      	bne.n	800289a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8002934:	6a3b      	ldr	r3, [r7, #32]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800293e:	b580      	push	{r7, lr}
 8002940:	b088      	sub	sp, #32
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	d911      	bls.n	8002986 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	6938      	ldr	r0, [r7, #16]
 8002972:	f004 f891 	bl	8006a98 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002976:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	441a      	add	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8002984:	e01f      	b.n	80029c6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	6938      	ldr	r0, [r7, #16]
 800299a:	f004 f87d 	bl	8006a98 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4413      	add	r3, r2
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4619      	mov	r1, r3
 80029b6:	6938      	ldr	r0, [r7, #16]
 80029b8:	f004 f86e 	bl	8006a98 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80029bc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	60da      	str	r2, [r3, #12]
}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80029ce:	b480      	push	{r7}
 80029d0:	b087      	sub	sp, #28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d808      	bhi.n	80029fc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	3b01      	subs	r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e004      	b.n	8002a06 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002a06:	697b      	ldr	r3, [r7, #20]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08c      	sub	sp, #48	; 0x30
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8002a20:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b53      	cmp	r3, #83	; 0x53
 8002a2c:	d001      	beq.n	8002a32 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8002a2e:	f7ff fecf 	bl	80027d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8002a40:	4413      	add	r3, r2
 8002a42:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d92b      	bls.n	8002ab8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	bf28      	it	cs
 8002a72:	4613      	movcs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	4413      	add	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	6939      	ldr	r1, [r7, #16]
 8002a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a86:	f004 f807 	bl	8006a98 <memcpy>
    NumBytesRead += NumBytesRem;
 8002a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	4413      	add	r3, r2
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4413      	add	r3, r2
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d101      	bne.n	8002ab8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf28      	it	cs
 8002ac8:	4613      	movcs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d019      	beq.n	8002b06 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	4413      	add	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6939      	ldr	r1, [r7, #16]
 8002ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae2:	f003 ffd9 	bl	8006a98 <memcpy>
    NumBytesRead += NumBytesRem;
 8002ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	4413      	add	r3, r2
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4413      	add	r3, r2
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	4413      	add	r3, r2
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b10:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3730      	adds	r7, #48	; 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20004214 	.word	0x20004214

08002b20 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <SEGGER_RTT_ReadNoLock+0x108>)
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b53      	cmp	r3, #83	; 0x53
 8002b38:	d001      	beq.n	8002b3e <SEGGER_RTT_ReadNoLock+0x1e>
 8002b3a:	f7ff fe49 	bl	80027d0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3360      	adds	r3, #96	; 0x60
 8002b4a:	4a37      	ldr	r2, [pc, #220]	; (8002c28 <SEGGER_RTT_ReadNoLock+0x108>)
 8002b4c:	4413      	add	r3, r2
 8002b4e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d92b      	bls.n	8002bc4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	bf28      	it	cs
 8002b7e:	4613      	movcs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	4413      	add	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	6939      	ldr	r1, [r7, #16]
 8002b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b92:	f003 ff81 	bl	8006a98 <memcpy>
    NumBytesRead += NumBytesRem;
 8002b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d101      	bne.n	8002bc4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	bf28      	it	cs
 8002bd4:	4613      	movcs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d019      	beq.n	8002c12 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	4413      	add	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	6939      	ldr	r1, [r7, #16]
 8002bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bee:	f003 ff53 	bl	8006a98 <memcpy>
    NumBytesRead += NumBytesRem;
 8002bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4413      	add	r3, r2
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4413      	add	r3, r2
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3730      	adds	r7, #48	; 0x30
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20004214 	.word	0x20004214

08002c2c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	3360      	adds	r3, #96	; 0x60
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d029      	beq.n	8002caa <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d82e      	bhi.n	8002cb8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d013      	beq.n	8002c8a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8002c62:	e029      	b.n	8002cb8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002c64:	6978      	ldr	r0, [r7, #20]
 8002c66:	f7ff feb2 	bl	80029ce <_GetAvailWriteSpace>
 8002c6a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d202      	bcs.n	8002c7a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002c78:	e021      	b.n	8002cbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	69b9      	ldr	r1, [r7, #24]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff fe5b 	bl	800293e <_WriteNoCheck>
    break;
 8002c88:	e019      	b.n	8002cbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002c8a:	6978      	ldr	r0, [r7, #20]
 8002c8c:	f7ff fe9f 	bl	80029ce <_GetAvailWriteSpace>
 8002c90:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4293      	cmp	r3, r2
 8002c98:	bf28      	it	cs
 8002c9a:	4613      	movcs	r3, r2
 8002c9c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002c9e:	69fa      	ldr	r2, [r7, #28]
 8002ca0:	69b9      	ldr	r1, [r7, #24]
 8002ca2:	6978      	ldr	r0, [r7, #20]
 8002ca4:	f7ff fe4b 	bl	800293e <_WriteNoCheck>
    break;
 8002ca8:	e009      	b.n	8002cbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff fde8 	bl	8002884 <_WriteBlocking>
 8002cb4:	61f8      	str	r0, [r7, #28]
    break;
 8002cb6:	e002      	b.n	8002cbe <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
    break;
 8002cbc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20004214 	.word	0x20004214

08002ccc <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b53      	cmp	r3, #83	; 0x53
 8002ce4:	d001      	beq.n	8002cea <SEGGER_RTT_WriteDownBuffer+0x1e>
 8002ce6:	f7ff fd73 	bl	80027d0 <_DoInit>
  SEGGER_RTT_LOCK();
 8002cea:	f3ef 8311 	mrs	r3, BASEPRI
 8002cee:	f04f 0120 	mov.w	r1, #32
 8002cf2:	f381 8811 	msr	BASEPRI, r1
 8002cf6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff ff95 	bl	8002c2c <SEGGER_RTT_WriteDownBufferNoLock>
 8002d02:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8002d0a:	697b      	ldr	r3, [r7, #20]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20004214 	.word	0x20004214

08002d18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b53      	cmp	r3, #83	; 0x53
 8002d32:	d001      	beq.n	8002d38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002d34:	f7ff fd4c 	bl	80027d0 <_DoInit>
  SEGGER_RTT_LOCK();
 8002d38:	f3ef 8311 	mrs	r3, BASEPRI
 8002d3c:	f04f 0120 	mov.w	r1, #32
 8002d40:	f381 8811 	msr	BASEPRI, r1
 8002d44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002d46:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002d48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3304      	adds	r3, #4
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	dbeb      	blt.n	8002d4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8002d76:	e000      	b.n	8002d7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002d78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	da3f      	bge.n	8002e04 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002d84:	6939      	ldr	r1, [r7, #16]
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002d98:	6939      	ldr	r1, [r7, #16]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	440b      	add	r3, r1
 8002da8:	3304      	adds	r3, #4
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002dae:	6939      	ldr	r1, [r7, #16]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3320      	adds	r3, #32
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8002dc2:	6939      	ldr	r1, [r7, #16]
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	440b      	add	r3, r1
 8002dd0:	3328      	adds	r3, #40	; 0x28
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	3324      	adds	r3, #36	; 0x24
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002dea:	6939      	ldr	r1, [r7, #16]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	332c      	adds	r3, #44	; 0x2c
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002dfe:	f3bf 8f5f 	dmb	sy
 8002e02:	e002      	b.n	8002e0a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8002e10:	69fb      	ldr	r3, [r7, #28]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20004214 	.word	0x20004214

08002e20 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b53      	cmp	r3, #83	; 0x53
 8002e3a:	d001      	beq.n	8002e40 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8002e3c:	f7ff fcc8 	bl	80027d0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8002e42:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d82c      	bhi.n	8002ea4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8002e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e4e:	f04f 0120 	mov.w	r1, #32
 8002e52:	f381 8811 	msr	BASEPRI, r1
 8002e56:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e92:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002e94:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	e002      	b.n	8002eaa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20004214 	.word	0x20004214

08002eb8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	60fa      	str	r2, [r7, #12]
 8002ece:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d90a      	bls.n	8002eec <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8002ed6:	2380      	movs	r3, #128	; 0x80
 8002ed8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002eda:	e007      	b.n	8002eec <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	1c53      	adds	r3, r2, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1c59      	adds	r1, r3, #1
 8002ee6:	60f9      	str	r1, [r7, #12]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	607a      	str	r2, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <_EncodeStr+0x46>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ee      	bne.n	8002edc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3307      	adds	r3, #7
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002f36:	4b34      	ldr	r3, [pc, #208]	; (8003008 <_HandleIncomingPacket+0xd8>)
 8002f38:	7e1b      	ldrb	r3, [r3, #24]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	1cfb      	adds	r3, r7, #3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7ff fded 	bl	8002b20 <SEGGER_RTT_ReadNoLock>
 8002f46:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d057      	beq.n	8002ffe <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	2b80      	cmp	r3, #128	; 0x80
 8002f52:	d031      	beq.n	8002fb8 <_HandleIncomingPacket+0x88>
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	dc40      	bgt.n	8002fda <_HandleIncomingPacket+0xaa>
 8002f58:	2b07      	cmp	r3, #7
 8002f5a:	dc15      	bgt.n	8002f88 <_HandleIncomingPacket+0x58>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dd3c      	ble.n	8002fda <_HandleIncomingPacket+0xaa>
 8002f60:	3b01      	subs	r3, #1
 8002f62:	2b06      	cmp	r3, #6
 8002f64:	d839      	bhi.n	8002fda <_HandleIncomingPacket+0xaa>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <_HandleIncomingPacket+0x3c>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f8f 	.word	0x08002f8f
 8002f70:	08002f95 	.word	0x08002f95
 8002f74:	08002f9b 	.word	0x08002f9b
 8002f78:	08002fa1 	.word	0x08002fa1
 8002f7c:	08002fa7 	.word	0x08002fa7
 8002f80:	08002fad 	.word	0x08002fad
 8002f84:	08002fb3 	.word	0x08002fb3
 8002f88:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8a:	d033      	beq.n	8002ff4 <_HandleIncomingPacket+0xc4>
 8002f8c:	e025      	b.n	8002fda <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002f8e:	f001 f82b 	bl	8003fe8 <SEGGER_SYSVIEW_Start>
      break;
 8002f92:	e034      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002f94:	f001 f8e4 	bl	8004160 <SEGGER_SYSVIEW_Stop>
      break;
 8002f98:	e031      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002f9a:	f001 fabd 	bl	8004518 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002f9e:	e02e      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002fa0:	f001 fa82 	bl	80044a8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002fa4:	e02b      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002fa6:	f001 f901 	bl	80041ac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002faa:	e028      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002fac:	f001 fcfa 	bl	80049a4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002fb0:	e025      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002fb2:	f001 fcd9 	bl	8004968 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002fb6:	e022      	b.n	8002ffe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <_HandleIncomingPacket+0xd8>)
 8002fba:	7e1b      	ldrb	r3, [r3, #24]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	1cfb      	adds	r3, r7, #3
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f7ff fdac 	bl	8002b20 <SEGGER_RTT_ReadNoLock>
 8002fc8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fc3e 	bl	8004854 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002fd8:	e00e      	b.n	8002ff8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	b25b      	sxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	da0c      	bge.n	8002ffc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002fe2:	4b09      	ldr	r3, [pc, #36]	; (8003008 <_HandleIncomingPacket+0xd8>)
 8002fe4:	7e1b      	ldrb	r3, [r3, #24]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	1cfb      	adds	r3, r7, #3
 8002fea:	2201      	movs	r2, #1
 8002fec:	4619      	mov	r1, r3
 8002fee:	f7ff fd97 	bl	8002b20 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002ff2:	e003      	b.n	8002ffc <_HandleIncomingPacket+0xcc>
      break;
 8002ff4:	bf00      	nop
 8002ff6:	e002      	b.n	8002ffe <_HandleIncomingPacket+0xce>
      break;
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <_HandleIncomingPacket+0xce>
      break;
 8002ffc:	bf00      	nop
    }
  }
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200056d4 	.word	0x200056d4

0800300c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	; 0x30
 8003010:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003012:	2301      	movs	r3, #1
 8003014:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
 8003026:	e00b      	b.n	8003040 <_TrySendOverflowPacket+0x34>
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	b2da      	uxtb	r2, r3
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	09db      	lsrs	r3, r3, #7
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	2b7f      	cmp	r3, #127	; 0x7f
 8003044:	d8f0      	bhi.n	8003028 <_TrySendOverflowPacket+0x1c>
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800304c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003056:	4b26      	ldr	r3, [pc, #152]	; (80030f0 <_TrySendOverflowPacket+0xe4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800305c:	4b23      	ldr	r3, [pc, #140]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	623b      	str	r3, [r7, #32]
 800306e:	e00b      	b.n	8003088 <_TrySendOverflowPacket+0x7c>
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	6279      	str	r1, [r7, #36]	; 0x24
 800307a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	09db      	lsrs	r3, r3, #7
 8003086:	623b      	str	r3, [r7, #32]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	2b7f      	cmp	r3, #127	; 0x7f
 800308c:	d8f0      	bhi.n	8003070 <_TrySendOverflowPacket+0x64>
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	627a      	str	r2, [r7, #36]	; 0x24
 8003094:	6a3a      	ldr	r2, [r7, #32]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	4618      	mov	r0, r3
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd f88e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80030b4:	4603      	mov	r3, r0
 80030b6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80030b8:	f7ff fb10 	bl	80026dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e004      	b.n	80030e0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	3301      	adds	r3, #1
 80030dc:	4a03      	ldr	r2, [pc, #12]	; (80030ec <_TrySendOverflowPacket+0xe0>)
 80030de:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80030e0:	693b      	ldr	r3, [r7, #16]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3730      	adds	r7, #48	; 0x30
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200056d4 	.word	0x200056d4
 80030f0:	e0001004 	.word	0xe0001004

080030f4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003100:	4b96      	ldr	r3, [pc, #600]	; (800335c <_SendPacket+0x268>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d010      	beq.n	800312a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003108:	4b94      	ldr	r3, [pc, #592]	; (800335c <_SendPacket+0x268>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8130 	beq.w	8003372 <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003112:	4b92      	ldr	r3, [pc, #584]	; (800335c <_SendPacket+0x268>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d109      	bne.n	800312e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800311a:	f7ff ff77 	bl	800300c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800311e:	4b8f      	ldr	r3, [pc, #572]	; (800335c <_SendPacket+0x268>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	f040 8127 	bne.w	8003376 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8003128:	e001      	b.n	800312e <_SendPacket+0x3a>
    goto Send;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <_SendPacket+0x3c>
Send:
 800312e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b1f      	cmp	r3, #31
 8003134:	d809      	bhi.n	800314a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <_SendPacket+0x268>)
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 8118 	bne.w	800337a <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b17      	cmp	r3, #23
 800314e:	d807      	bhi.n	8003160 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e0c4      	b.n	80032ea <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b7f      	cmp	r3, #127	; 0x7f
 800316c:	d912      	bls.n	8003194 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	09da      	lsrs	r2, r3, #7
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	3a01      	subs	r2, #1
 8003186:	60fa      	str	r2, [r7, #12]
 8003188:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e006      	b.n	80031a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3b01      	subs	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b7e      	cmp	r3, #126	; 0x7e
 80031a6:	d807      	bhi.n	80031b8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e098      	b.n	80032ea <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031be:	d212      	bcs.n	80031e6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	09da      	lsrs	r2, r3, #7
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	3a01      	subs	r2, #1
 80031d8:	60fa      	str	r2, [r7, #12]
 80031da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e081      	b.n	80032ea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ec:	d21d      	bcs.n	800322a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0b9a      	lsrs	r2, r3, #14
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	09db      	lsrs	r3, r3, #7
 8003202:	b2db      	uxtb	r3, r3
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	3a01      	subs	r2, #1
 8003208:	60fa      	str	r2, [r7, #12]
 800320a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	3a01      	subs	r2, #1
 800321c:	60fa      	str	r2, [r7, #12]
 800321e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e05f      	b.n	80032ea <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003230:	d228      	bcs.n	8003284 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0d5a      	lsrs	r2, r3, #21
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b01      	subs	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	0b9b      	lsrs	r3, r3, #14
 8003246:	b2db      	uxtb	r3, r3
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	3a01      	subs	r2, #1
 800324c:	60fa      	str	r2, [r7, #12]
 800324e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003252:	b2da      	uxtb	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	09db      	lsrs	r3, r3, #7
 800325c:	b2db      	uxtb	r3, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	3a01      	subs	r2, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003268:	b2da      	uxtb	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	3a01      	subs	r2, #1
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e032      	b.n	80032ea <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0f1a      	lsrs	r2, r3, #28
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3b01      	subs	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0d5b      	lsrs	r3, r3, #21
 8003298:	b2db      	uxtb	r3, r3
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	3a01      	subs	r2, #1
 800329e:	60fa      	str	r2, [r7, #12]
 80032a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0b9b      	lsrs	r3, r3, #14
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	3a01      	subs	r2, #1
 80032b4:	60fa      	str	r2, [r7, #12]
 80032b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	09db      	lsrs	r3, r3, #7
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	3a01      	subs	r2, #1
 80032ca:	60fa      	str	r2, [r7, #12]
 80032cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	3a01      	subs	r2, #1
 80032de:	60fa      	str	r2, [r7, #12]
 80032e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80032ea:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <_SendPacket+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	; (800335c <_SendPacket+0x268>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	623b      	str	r3, [r7, #32]
 8003302:	e00b      	b.n	800331c <_SendPacket+0x228>
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	1c59      	adds	r1, r3, #1
 800330c:	6279      	str	r1, [r7, #36]	; 0x24
 800330e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	09db      	lsrs	r3, r3, #7
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b7f      	cmp	r3, #127	; 0x7f
 8003320:	d8f0      	bhi.n	8003304 <_SendPacket+0x210>
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	627a      	str	r2, [r7, #36]	; 0x24
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <_SendPacket+0x268>)
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	4618      	mov	r0, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	461a      	mov	r2, r3
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	f7fc ff45 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003346:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003348:	f7ff f9c8 	bl	80026dc <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003352:	4a02      	ldr	r2, [pc, #8]	; (800335c <_SendPacket+0x268>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	60d3      	str	r3, [r2, #12]
 8003358:	e010      	b.n	800337c <_SendPacket+0x288>
 800335a:	bf00      	nop
 800335c:	200056d4 	.word	0x200056d4
 8003360:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <_SendPacket+0x2d8>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b17      	ldr	r3, [pc, #92]	; (80033cc <_SendPacket+0x2d8>)
 800336e:	701a      	strb	r2, [r3, #0]
 8003370:	e004      	b.n	800337c <_SendPacket+0x288>
    goto SendDone;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <_SendPacket+0x288>
      goto SendDone;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <_SendPacket+0x288>
      goto SendDone;
 800337a:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <_SendPacket+0x2d8>)
 800337e:	7e1b      	ldrb	r3, [r3, #24]
 8003380:	4619      	mov	r1, r3
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <_SendPacket+0x2dc>)
 8003384:	460b      	mov	r3, r1
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	440b      	add	r3, r1
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	336c      	adds	r3, #108	; 0x6c
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <_SendPacket+0x2d8>)
 8003394:	7e1b      	ldrb	r3, [r3, #24]
 8003396:	4618      	mov	r0, r3
 8003398:	490d      	ldr	r1, [pc, #52]	; (80033d0 <_SendPacket+0x2dc>)
 800339a:	4603      	mov	r3, r0
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4403      	add	r3, r0
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	3370      	adds	r3, #112	; 0x70
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d00b      	beq.n	80033c4 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <_SendPacket+0x2d8>)
 80033ae:	789b      	ldrb	r3, [r3, #2]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d107      	bne.n	80033c4 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <_SendPacket+0x2d8>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80033ba:	f7ff fdb9 	bl	8002f30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80033be:	4b03      	ldr	r3, [pc, #12]	; (80033cc <_SendPacket+0x2d8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80033c4:	bf00      	nop
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	200056d4 	.word	0x200056d4
 80033d0:	20004214 	.word	0x20004214

080033d4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d80a      	bhi.n	8003404 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	1c59      	adds	r1, r3, #1
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6051      	str	r1, [r2, #4]
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b80      	cmp	r3, #128	; 0x80
 800340a:	d15a      	bne.n	80034c2 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	e00b      	b.n	8003446 <_StoreChar+0x72>
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	6279      	str	r1, [r7, #36]	; 0x24
 8003438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	09db      	lsrs	r3, r3, #7
 8003444:	623b      	str	r3, [r7, #32]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b7f      	cmp	r3, #127	; 0x7f
 800344a:	d8f0      	bhi.n	800342e <_StoreChar+0x5a>
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	627a      	str	r2, [r7, #36]	; 0x24
 8003452:	6a3a      	ldr	r2, [r7, #32]
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e00b      	b.n	800347e <_StoreChar+0xaa>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	1c59      	adds	r1, r3, #1
 800346e:	61f9      	str	r1, [r7, #28]
 8003470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	09db      	lsrs	r3, r3, #7
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b7f      	cmp	r3, #127	; 0x7f
 8003482:	d8f0      	bhi.n	8003466 <_StoreChar+0x92>
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	61fa      	str	r2, [r7, #28]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	221a      	movs	r2, #26
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fe29 	bl	80030f4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fd36 	bl	8002f18 <_PreparePacket>
 80034ac:	4602      	mov	r2, r0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
  }
}
 80034c2:	bf00      	nop
 80034c4:	3728      	adds	r7, #40	; 0x28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80034de:	2301      	movs	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80034e2:	2301      	movs	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80034e6:	e007      	b.n	80034f8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	623b      	str	r3, [r7, #32]
    Width++;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3301      	adds	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d2f3      	bcs.n	80034e8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	429a      	cmp	r2, r3
 8003506:	d901      	bls.n	800350c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800350c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11f      	bne.n	8003556 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <_PrintUnsigned+0x66>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <_PrintUnsigned+0x66>
        c = '0';
 800352c:	2330      	movs	r3, #48	; 0x30
 800352e:	76fb      	strb	r3, [r7, #27]
 8003530:	e001      	b.n	8003536 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8003532:	2320      	movs	r3, #32
 8003534:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003536:	e007      	b.n	8003548 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	3b01      	subs	r3, #1
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800353e:	7efb      	ldrb	r3, [r7, #27]
 8003540:	4619      	mov	r1, r3
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff ff46 	bl	80033d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <_PrintUnsigned+0x8a>
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	429a      	cmp	r2, r3
 8003554:	d3f0      	bcc.n	8003538 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d903      	bls.n	8003564 <_PrintUnsigned+0x98>
      NumDigits--;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	3b01      	subs	r3, #1
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	e009      	b.n	8003578 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d200      	bcs.n	8003578 <_PrintUnsigned+0xac>
        break;
 8003576:	e005      	b.n	8003584 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	fb02 f303 	mul.w	r3, r2, r3
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003582:	e7e8      	b.n	8003556 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800359c:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <_PrintUnsigned+0x128>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4413      	add	r3, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f7ff ff14 	bl	80033d4 <_StoreChar>
    Digit /= Base;
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e3      	bne.n	8003584 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d011      	beq.n	80035ea <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80035cc:	e006      	b.n	80035dc <_PrintUnsigned+0x110>
        FieldWidth--;
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	3b01      	subs	r3, #1
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80035d4:	2120      	movs	r1, #32
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff fefc 	bl	80033d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <_PrintUnsigned+0x11e>
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d3f1      	bcc.n	80035ce <_PrintUnsigned+0x102>
      }
    }
  }
}
 80035ea:	bf00      	nop
 80035ec:	3728      	adds	r7, #40	; 0x28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	08006bec 	.word	0x08006bec

080035f8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	bfb8      	it	lt
 800360c:	425b      	neglt	r3, r3
 800360e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003610:	2301      	movs	r3, #1
 8003612:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003614:	e007      	b.n	8003626 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	fb92 f3f3 	sdiv	r3, r2, r3
 800361e:	613b      	str	r3, [r7, #16]
    Width++;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3301      	adds	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	429a      	cmp	r2, r3
 800362c:	daf3      	bge.n	8003616 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	429a      	cmp	r2, r3
 8003634:	d901      	bls.n	800363a <_PrintInt+0x42>
    Width = NumDigits;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <_PrintInt+0x5e>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db04      	blt.n	8003650 <_PrintInt+0x58>
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <_PrintInt+0x5e>
    FieldWidth--;
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	3b01      	subs	r3, #1
 8003654:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <_PrintInt+0x6e>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <_PrintInt+0x9c>
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d111      	bne.n	8003694 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003676:	e006      	b.n	8003686 <_PrintInt+0x8e>
        FieldWidth--;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	3b01      	subs	r3, #1
 800367c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800367e:	2120      	movs	r1, #32
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff fea7 	bl	80033d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <_PrintInt+0x9c>
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	429a      	cmp	r2, r3
 8003692:	d3f1      	bcc.n	8003678 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	da07      	bge.n	80036aa <_PrintInt+0xb2>
    v = -v;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	425b      	negs	r3, r3
 800369e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80036a0:	212d      	movs	r1, #45	; 0x2d
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7ff fe96 	bl	80033d4 <_StoreChar>
 80036a8:	e008      	b.n	80036bc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80036b4:	212b      	movs	r1, #43	; 0x2b
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff fe8c 	bl	80033d4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d019      	beq.n	80036fa <_PrintInt+0x102>
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d114      	bne.n	80036fa <_PrintInt+0x102>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d111      	bne.n	80036fa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80036dc:	e006      	b.n	80036ec <_PrintInt+0xf4>
        FieldWidth--;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80036e4:	2130      	movs	r1, #48	; 0x30
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff fe74 	bl	80033d4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <_PrintInt+0x102>
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3f1      	bcc.n	80036de <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7ff fedf 	bl	80034cc <_PrintUnsigned>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003718:	b580      	push	{r7, lr}
 800371a:	b098      	sub	sp, #96	; 0x60
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003724:	f3ef 8311 	mrs	r3, BASEPRI
 8003728:	f04f 0120 	mov.w	r1, #32
 800372c:	f381 8811 	msr	BASEPRI, r1
 8003730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003732:	48b7      	ldr	r0, [pc, #732]	; (8003a10 <_VPrintTarget+0x2f8>)
 8003734:	f7ff fbf0 	bl	8002f18 <_PreparePacket>
 8003738:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800373a:	4bb5      	ldr	r3, [pc, #724]	; (8003a10 <_VPrintTarget+0x2f8>)
 800373c:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003744:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	3301      	adds	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800375e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 81a8 	beq.w	8003ab8 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8003768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800376c:	2b25      	cmp	r3, #37	; 0x25
 800376e:	f040 8195 	bne.w	8003a9c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003772:	2300      	movs	r3, #0
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003776:	2301      	movs	r3, #1
 8003778:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8003782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003786:	3b23      	subs	r3, #35	; 0x23
 8003788:	2b0d      	cmp	r3, #13
 800378a:	d83f      	bhi.n	800380c <_VPrintTarget+0xf4>
 800378c:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <_VPrintTarget+0x7c>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037fd 	.word	0x080037fd
 8003798:	0800380d 	.word	0x0800380d
 800379c:	0800380d 	.word	0x0800380d
 80037a0:	0800380d 	.word	0x0800380d
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	0800380d 	.word	0x0800380d
 80037ac:	0800380d 	.word	0x0800380d
 80037b0:	0800380d 	.word	0x0800380d
 80037b4:	080037ed 	.word	0x080037ed
 80037b8:	0800380d 	.word	0x0800380d
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	0800380d 	.word	0x0800380d
 80037c4:	0800380d 	.word	0x0800380d
 80037c8:	080037dd 	.word	0x080037dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e01a      	b.n	8003812 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80037dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3301      	adds	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e012      	b.n	8003812 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80037ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ee:	f043 0304 	orr.w	r3, r3, #4
 80037f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3301      	adds	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e00a      	b.n	8003812 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80037fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	64bb      	str	r3, [r7, #72]	; 0x48
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e002      	b.n	8003812 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800380c:	2300      	movs	r3, #0
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
 8003810:	bf00      	nop
        }
      } while (v);
 8003812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1b0      	bne.n	800377a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003818:	2300      	movs	r3, #0
 800381a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003828:	2b2f      	cmp	r3, #47	; 0x2f
 800382a:	d912      	bls.n	8003852 <_VPrintTarget+0x13a>
 800382c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003830:	2b39      	cmp	r3, #57	; 0x39
 8003832:	d80e      	bhi.n	8003852 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800383a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	461a      	mov	r2, r3
 8003846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800384a:	4413      	add	r3, r2
 800384c:	3b30      	subs	r3, #48	; 0x30
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003850:	e7e4      	b.n	800381c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003852:	2300      	movs	r3, #0
 8003854:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800385e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003862:	2b2e      	cmp	r3, #46	; 0x2e
 8003864:	d11d      	bne.n	80038a2 <_VPrintTarget+0x18a>
        sFormat++;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	3301      	adds	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003878:	2b2f      	cmp	r3, #47	; 0x2f
 800387a:	d912      	bls.n	80038a2 <_VPrintTarget+0x18a>
 800387c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003880:	2b39      	cmp	r3, #57	; 0x39
 8003882:	d80e      	bhi.n	80038a2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800388a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	461a      	mov	r2, r3
 8003896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800389a:	4413      	add	r3, r2
 800389c:	3b30      	subs	r3, #48	; 0x30
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80038a0:	e7e4      	b.n	800386c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80038aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038ae:	2b6c      	cmp	r3, #108	; 0x6c
 80038b0:	d003      	beq.n	80038ba <_VPrintTarget+0x1a2>
 80038b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038b6:	2b68      	cmp	r3, #104	; 0x68
 80038b8:	d107      	bne.n	80038ca <_VPrintTarget+0x1b2>
          c = *sFormat;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80038c8:	e7ef      	b.n	80038aa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80038ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038ce:	2b25      	cmp	r3, #37	; 0x25
 80038d0:	f000 80d8 	beq.w	8003a84 <_VPrintTarget+0x36c>
 80038d4:	2b25      	cmp	r3, #37	; 0x25
 80038d6:	f2c0 80dc 	blt.w	8003a92 <_VPrintTarget+0x37a>
 80038da:	2b78      	cmp	r3, #120	; 0x78
 80038dc:	f300 80d9 	bgt.w	8003a92 <_VPrintTarget+0x37a>
 80038e0:	2b58      	cmp	r3, #88	; 0x58
 80038e2:	f2c0 80d6 	blt.w	8003a92 <_VPrintTarget+0x37a>
 80038e6:	3b58      	subs	r3, #88	; 0x58
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	f200 80d2 	bhi.w	8003a92 <_VPrintTarget+0x37a>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <_VPrintTarget+0x1dc>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	080039eb 	.word	0x080039eb
 80038f8:	08003a93 	.word	0x08003a93
 80038fc:	08003a93 	.word	0x08003a93
 8003900:	08003a93 	.word	0x08003a93
 8003904:	08003a93 	.word	0x08003a93
 8003908:	08003a93 	.word	0x08003a93
 800390c:	08003a93 	.word	0x08003a93
 8003910:	08003a93 	.word	0x08003a93
 8003914:	08003a93 	.word	0x08003a93
 8003918:	08003a93 	.word	0x08003a93
 800391c:	08003a93 	.word	0x08003a93
 8003920:	08003979 	.word	0x08003979
 8003924:	0800399f 	.word	0x0800399f
 8003928:	08003a93 	.word	0x08003a93
 800392c:	08003a93 	.word	0x08003a93
 8003930:	08003a93 	.word	0x08003a93
 8003934:	08003a93 	.word	0x08003a93
 8003938:	08003a93 	.word	0x08003a93
 800393c:	08003a93 	.word	0x08003a93
 8003940:	08003a93 	.word	0x08003a93
 8003944:	08003a93 	.word	0x08003a93
 8003948:	08003a93 	.word	0x08003a93
 800394c:	08003a93 	.word	0x08003a93
 8003950:	08003a93 	.word	0x08003a93
 8003954:	08003a5f 	.word	0x08003a5f
 8003958:	08003a93 	.word	0x08003a93
 800395c:	08003a93 	.word	0x08003a93
 8003960:	08003a15 	.word	0x08003a15
 8003964:	08003a93 	.word	0x08003a93
 8003968:	080039c5 	.word	0x080039c5
 800396c:	08003a93 	.word	0x08003a93
 8003970:	08003a93 	.word	0x08003a93
 8003974:	080039eb 	.word	0x080039eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	1d19      	adds	r1, r3, #4
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6011      	str	r1, [r2, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 800398c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fd1c 	bl	80033d4 <_StoreChar>
        break;
 800399c:	e07a      	b.n	8003a94 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1d19      	adds	r1, r3, #4
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6011      	str	r1, [r2, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80039ac:	f107 0010 	add.w	r0, r7, #16
 80039b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ba:	220a      	movs	r2, #10
 80039bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80039be:	f7ff fe1b 	bl	80035f8 <_PrintInt>
        break;
 80039c2:	e067      	b.n	8003a94 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	1d19      	adds	r1, r3, #4
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6011      	str	r1, [r2, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80039d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80039d4:	f107 0010 	add.w	r0, r7, #16
 80039d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e2:	220a      	movs	r2, #10
 80039e4:	f7ff fd72 	bl	80034cc <_PrintUnsigned>
        break;
 80039e8:	e054      	b.n	8003a94 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1d19      	adds	r1, r3, #4
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6011      	str	r1, [r2, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80039f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80039fa:	f107 0010 	add.w	r0, r7, #16
 80039fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	2210      	movs	r2, #16
 8003a0a:	f7ff fd5f 	bl	80034cc <_PrintUnsigned>
        break;
 8003a0e:	e041      	b.n	8003a94 <_VPrintTarget+0x37c>
 8003a10:	20005704 	.word	0x20005704
      case 's':
        s = va_arg(*pParamList, const char*);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	1d19      	adds	r1, r3, #4
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8003a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <_VPrintTarget+0x314>
          s = "(null)";
 8003a28:	4b4a      	ldr	r3, [pc, #296]	; (8003b54 <_VPrintTarget+0x43c>)
 8003a2a:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8003a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	3301      	adds	r3, #1
 8003a38:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8003a3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8003a42:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a46:	f107 0310 	add.w	r3, r7, #16
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fcc1 	bl	80033d4 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	2b7f      	cmp	r3, #127	; 0x7f
 8003a56:	d9e9      	bls.n	8003a2c <_VPrintTarget+0x314>
        break;
 8003a58:	e01c      	b.n	8003a94 <_VPrintTarget+0x37c>
            break;
 8003a5a:	bf00      	nop
        break;
 8003a5c:	e01a      	b.n	8003a94 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1d19      	adds	r1, r3, #4
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6011      	str	r1, [r2, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003a6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a6e:	f107 0010 	add.w	r0, r7, #16
 8003a72:	2300      	movs	r3, #0
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2308      	movs	r3, #8
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	f7ff fd25 	bl	80034cc <_PrintUnsigned>
        break;
 8003a82:	e007      	b.n	8003a94 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003a84:	f107 0310 	add.w	r3, r7, #16
 8003a88:	2125      	movs	r1, #37	; 0x25
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fca2 	bl	80033d4 <_StoreChar>
        break;
 8003a90:	e000      	b.n	8003a94 <_VPrintTarget+0x37c>
      default:
        break;
 8003a92:	bf00      	nop
      }
      sFormat++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	e007      	b.n	8003aac <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8003a9c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003aa0:	f107 0310 	add.w	r3, r7, #16
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fc94 	bl	80033d4 <_StoreChar>
    }
  } while (*sFormat);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f ae4d 	bne.w	8003750 <_VPrintTarget+0x38>
 8003ab6:	e000      	b.n	8003aba <_VPrintTarget+0x3a2>
      break;
 8003ab8:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d041      	beq.n	8003b44 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad0:	e00b      	b.n	8003aea <_VPrintTarget+0x3d2>
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad8:	1c59      	adds	r1, r3, #1
 8003ada:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae6:	09db      	lsrs	r3, r3, #7
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	2b7f      	cmp	r3, #127	; 0x7f
 8003aee:	d8f0      	bhi.n	8003ad2 <_VPrintTarget+0x3ba>
 8003af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003af6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afe:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	2300      	movs	r3, #0
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
 8003b08:	e00b      	b.n	8003b22 <_VPrintTarget+0x40a>
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	1c59      	adds	r1, r3, #1
 8003b12:	6379      	str	r1, [r7, #52]	; 0x34
 8003b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	09db      	lsrs	r3, r3, #7
 8003b20:	633b      	str	r3, [r7, #48]	; 0x30
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	2b7f      	cmp	r3, #127	; 0x7f
 8003b26:	d8f0      	bhi.n	8003b0a <_VPrintTarget+0x3f2>
 8003b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	637a      	str	r2, [r7, #52]	; 0x34
 8003b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6979      	ldr	r1, [r7, #20]
 8003b3c:	221a      	movs	r2, #26
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fad8 	bl	80030f4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003b4a:	bf00      	nop
 8003b4c:	3758      	adds	r7, #88	; 0x58
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	08006b88 	.word	0x08006b88

08003b58 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b66:	2300      	movs	r3, #0
 8003b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b6c:	4917      	ldr	r1, [pc, #92]	; (8003bcc <SEGGER_SYSVIEW_Init+0x74>)
 8003b6e:	4818      	ldr	r0, [pc, #96]	; (8003bd0 <SEGGER_SYSVIEW_Init+0x78>)
 8003b70:	f7ff f8d2 	bl	8002d18 <SEGGER_RTT_AllocUpBuffer>
 8003b74:	4603      	mov	r3, r0
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b7a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003b7c:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b7e:	785a      	ldrb	r2, [r3, #1]
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b82:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b84:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b86:	7e1b      	ldrb	r3, [r3, #24]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2308      	movs	r3, #8
 8003b90:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <SEGGER_SYSVIEW_Init+0x80>)
 8003b92:	490f      	ldr	r1, [pc, #60]	; (8003bd0 <SEGGER_SYSVIEW_Init+0x78>)
 8003b94:	f7ff f944 	bl	8002e20 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b9e:	4b0f      	ldr	r3, [pc, #60]	; (8003bdc <SEGGER_SYSVIEW_Init+0x84>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a0c      	ldr	r2, [pc, #48]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ba4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003ba6:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003bac:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003bb2:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003bb8:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <SEGGER_SYSVIEW_Init+0x7c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200046cc 	.word	0x200046cc
 8003bd0:	08006b90 	.word	0x08006b90
 8003bd4:	200056d4 	.word	0x200056d4
 8003bd8:	200056cc 	.word	0x200056cc
 8003bdc:	e0001004 	.word	0xe0001004

08003be0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6113      	str	r3, [r2, #16]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200056d4 	.word	0x200056d4

08003c00 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c08:	f3ef 8311 	mrs	r3, BASEPRI
 8003c0c:	f04f 0120 	mov.w	r1, #32
 8003c10:	f381 8811 	msr	BASEPRI, r1
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	4808      	ldr	r0, [pc, #32]	; (8003c38 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003c18:	f7ff f97e 	bl	8002f18 <_PreparePacket>
 8003c1c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68b8      	ldr	r0, [r7, #8]
 8003c24:	f7ff fa66 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f383 8811 	msr	BASEPRI, r3
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20005704 	.word	0x20005704

08003c3c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c46:	f3ef 8311 	mrs	r3, BASEPRI
 8003c4a:	f04f 0120 	mov.w	r1, #32
 8003c4e:	f381 8811 	msr	BASEPRI, r1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	4816      	ldr	r0, [pc, #88]	; (8003cb0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003c56:	f7ff f95f 	bl	8002f18 <_PreparePacket>
 8003c5a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	e00b      	b.n	8003c82 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	1c59      	adds	r1, r3, #1
 8003c72:	61f9      	str	r1, [r7, #28]
 8003c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	09db      	lsrs	r3, r3, #7
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	2b7f      	cmp	r3, #127	; 0x7f
 8003c86:	d8f0      	bhi.n	8003c6a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	61fa      	str	r2, [r7, #28]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68f9      	ldr	r1, [r7, #12]
 8003c9c:	6938      	ldr	r0, [r7, #16]
 8003c9e:	f7ff fa29 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f383 8811 	msr	BASEPRI, r3
}
 8003ca8:	bf00      	nop
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20005704 	.word	0x20005704

08003cb4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	; 0x30
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8003cc4:	f04f 0120 	mov.w	r1, #32
 8003cc8:	f381 8811 	msr	BASEPRI, r1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	4825      	ldr	r0, [pc, #148]	; (8003d64 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003cd0:	f7ff f922 	bl	8002f18 <_PreparePacket>
 8003cd4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce2:	e00b      	b.n	8003cfc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	1c59      	adds	r1, r3, #1
 8003cec:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003cee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	09db      	lsrs	r3, r3, #7
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8003d00:	d8f0      	bhi.n	8003ce4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	623b      	str	r3, [r7, #32]
 8003d1a:	e00b      	b.n	8003d34 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	1c59      	adds	r1, r3, #1
 8003d24:	6279      	str	r1, [r7, #36]	; 0x24
 8003d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	09db      	lsrs	r3, r3, #7
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2b7f      	cmp	r3, #127	; 0x7f
 8003d38:	d8f0      	bhi.n	8003d1c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8003d40:	6a3a      	ldr	r2, [r7, #32]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	69b8      	ldr	r0, [r7, #24]
 8003d50:	f7ff f9d0 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f383 8811 	msr	BASEPRI, r3
}
 8003d5a:	bf00      	nop
 8003d5c:	3730      	adds	r7, #48	; 0x30
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20005704 	.word	0x20005704

08003d68 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b090      	sub	sp, #64	; 0x40
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d76:	f3ef 8311 	mrs	r3, BASEPRI
 8003d7a:	f04f 0120 	mov.w	r1, #32
 8003d7e:	f381 8811 	msr	BASEPRI, r1
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	4840      	ldr	r0, [pc, #256]	; (8003e88 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003d86:	f7ff f8c7 	bl	8002f18 <_PreparePacket>
 8003d8a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d98:	e00b      	b.n	8003db2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	09db      	lsrs	r3, r3, #7
 8003db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b7f      	cmp	r3, #127	; 0x7f
 8003db6:	d8f0      	bhi.n	8003d9a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd0:	e00b      	b.n	8003dea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	1c59      	adds	r1, r3, #1
 8003dda:	6379      	str	r1, [r7, #52]	; 0x34
 8003ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	09db      	lsrs	r3, r3, #7
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	2b7f      	cmp	r3, #127	; 0x7f
 8003dee:	d8f0      	bhi.n	8003dd2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	637a      	str	r2, [r7, #52]	; 0x34
 8003df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e08:	e00b      	b.n	8003e22 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	1c59      	adds	r1, r3, #1
 8003e12:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	09db      	lsrs	r3, r3, #7
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	2b7f      	cmp	r3, #127	; 0x7f
 8003e26:	d8f0      	bhi.n	8003e0a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e3e:	623b      	str	r3, [r7, #32]
 8003e40:	e00b      	b.n	8003e5a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	6279      	str	r1, [r7, #36]	; 0x24
 8003e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	09db      	lsrs	r3, r3, #7
 8003e58:	623b      	str	r3, [r7, #32]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e5e:	d8f0      	bhi.n	8003e42 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	627a      	str	r2, [r7, #36]	; 0x24
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	69b8      	ldr	r0, [r7, #24]
 8003e76:	f7ff f93d 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f383 8811 	msr	BASEPRI, r3
}
 8003e80:	bf00      	nop
 8003e82:	3740      	adds	r7, #64	; 0x40
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20005704 	.word	0x20005704

08003e8c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b092      	sub	sp, #72	; 0x48
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9e:	f04f 0120 	mov.w	r1, #32
 8003ea2:	f381 8811 	msr	BASEPRI, r1
 8003ea6:	61fb      	str	r3, [r7, #28]
 8003ea8:	484e      	ldr	r0, [pc, #312]	; (8003fe4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8003eaa:	f7ff f835 	bl	8002f18 <_PreparePacket>
 8003eae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	e00b      	b.n	8003ed6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8003ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec4:	1c59      	adds	r1, r3, #1
 8003ec6:	6479      	str	r1, [r7, #68]	; 0x44
 8003ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	09db      	lsrs	r3, r3, #7
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eda:	d8f0      	bhi.n	8003ebe <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8003edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	647a      	str	r2, [r7, #68]	; 0x44
 8003ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef4:	e00b      	b.n	8003f0e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efc:	1c59      	adds	r1, r3, #1
 8003efe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	09db      	lsrs	r3, r3, #7
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b7f      	cmp	r3, #127	; 0x7f
 8003f12:	d8f0      	bhi.n	8003ef6 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8003f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2c:	e00b      	b.n	8003f46 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	1c59      	adds	r1, r3, #1
 8003f36:	6379      	str	r1, [r7, #52]	; 0x34
 8003f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	09db      	lsrs	r3, r3, #7
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4a:	d8f0      	bhi.n	8003f2e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	637a      	str	r2, [r7, #52]	; 0x34
 8003f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f64:	e00b      	b.n	8003f7e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	1c59      	adds	r1, r3, #1
 8003f6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	09db      	lsrs	r3, r3, #7
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	2b7f      	cmp	r3, #127	; 0x7f
 8003f82:	d8f0      	bhi.n	8003f66 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	e00b      	b.n	8003fb6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	1c59      	adds	r1, r3, #1
 8003fa6:	6279      	str	r1, [r7, #36]	; 0x24
 8003fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	09db      	lsrs	r3, r3, #7
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003fba:	d8f0      	bhi.n	8003f9e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	627a      	str	r2, [r7, #36]	; 0x24
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	6979      	ldr	r1, [r7, #20]
 8003fd0:	69b8      	ldr	r0, [r7, #24]
 8003fd2:	f7ff f88f 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f383 8811 	msr	BASEPRI, r3
}
 8003fdc:	bf00      	nop
 8003fde:	3748      	adds	r7, #72	; 0x48
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20005704 	.word	0x20005704

08003fe8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08c      	sub	sp, #48	; 0x30
 8003fec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003fee:	4b59      	ldr	r3, [pc, #356]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff8:	f04f 0120 	mov.w	r1, #32
 8003ffc:	f381 8811 	msr	BASEPRI, r1
 8004000:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004002:	4b54      	ldr	r3, [pc, #336]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	220a      	movs	r2, #10
 8004008:	4953      	ldr	r1, [pc, #332]	; (8004158 <SEGGER_SYSVIEW_Start+0x170>)
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc f8e0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004016:	f7fe fb61 	bl	80026dc <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800401a:	200a      	movs	r0, #10
 800401c:	f7ff fdf0 	bl	8003c00 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004020:	f3ef 8311 	mrs	r3, BASEPRI
 8004024:	f04f 0120 	mov.w	r1, #32
 8004028:	f381 8811 	msr	BASEPRI, r1
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	484b      	ldr	r0, [pc, #300]	; (800415c <SEGGER_SYSVIEW_Start+0x174>)
 8004030:	f7fe ff72 	bl	8002f18 <_PreparePacket>
 8004034:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800403e:	4b45      	ldr	r3, [pc, #276]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
 8004044:	e00b      	b.n	800405e <SEGGER_SYSVIEW_Start+0x76>
 8004046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004048:	b2da      	uxtb	r2, r3
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	1c59      	adds	r1, r3, #1
 800404e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	09db      	lsrs	r3, r3, #7
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	2b7f      	cmp	r3, #127	; 0x7f
 8004062:	d8f0      	bhi.n	8004046 <SEGGER_SYSVIEW_Start+0x5e>
 8004064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800406a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	4b36      	ldr	r3, [pc, #216]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	e00b      	b.n	8004098 <SEGGER_SYSVIEW_Start+0xb0>
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	1c59      	adds	r1, r3, #1
 8004088:	6279      	str	r1, [r7, #36]	; 0x24
 800408a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	09db      	lsrs	r3, r3, #7
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2b7f      	cmp	r3, #127	; 0x7f
 800409c:	d8f0      	bhi.n	8004080 <SEGGER_SYSVIEW_Start+0x98>
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	627a      	str	r2, [r7, #36]	; 0x24
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	4b28      	ldr	r3, [pc, #160]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	e00b      	b.n	80040d2 <SEGGER_SYSVIEW_Start+0xea>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	1c59      	adds	r1, r3, #1
 80040c2:	61f9      	str	r1, [r7, #28]
 80040c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	09db      	lsrs	r3, r3, #7
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b7f      	cmp	r3, #127	; 0x7f
 80040d6:	d8f0      	bhi.n	80040ba <SEGGER_SYSVIEW_Start+0xd2>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e00b      	b.n	800410a <SEGGER_SYSVIEW_Start+0x122>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	1c59      	adds	r1, r3, #1
 80040fa:	6179      	str	r1, [r7, #20]
 80040fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	09db      	lsrs	r3, r3, #7
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b7f      	cmp	r3, #127	; 0x7f
 800410e:	d8f0      	bhi.n	80040f2 <SEGGER_SYSVIEW_Start+0x10a>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	617a      	str	r2, [r7, #20]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004120:	2218      	movs	r2, #24
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7fe ffe5 	bl	80030f4 <_SendPacket>
      RECORD_END();
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004130:	4b08      	ldr	r3, [pc, #32]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <SEGGER_SYSVIEW_Start+0x16c>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800413e:	f000 f9eb 	bl	8004518 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004142:	f000 f9b1 	bl	80044a8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004146:	f000 fc2d 	bl	80049a4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800414a:	bf00      	nop
 800414c:	3730      	adds	r7, #48	; 0x30
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200056d4 	.word	0x200056d4
 8004158:	08006be0 	.word	0x08006be0
 800415c:	20005704 	.word	0x20005704

08004160 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	f04f 0120 	mov.w	r1, #32
 800416e:	f381 8811 	msr	BASEPRI, r1
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	480b      	ldr	r0, [pc, #44]	; (80041a4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004176:	f7fe fecf 	bl	8002f18 <_PreparePacket>
 800417a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <SEGGER_SYSVIEW_Stop+0x48>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004184:	220b      	movs	r2, #11
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	6838      	ldr	r0, [r7, #0]
 800418a:	f7fe ffb3 	bl	80030f4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f383 8811 	msr	BASEPRI, r3
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20005704 	.word	0x20005704
 80041a8:	200056d4 	.word	0x200056d4

080041ac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80041b2:	f3ef 8311 	mrs	r3, BASEPRI
 80041b6:	f04f 0120 	mov.w	r1, #32
 80041ba:	f381 8811 	msr	BASEPRI, r1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	4845      	ldr	r0, [pc, #276]	; (80042d8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80041c2:	f7fe fea9 	bl	8002f18 <_PreparePacket>
 80041c6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d0:	4b42      	ldr	r3, [pc, #264]	; (80042dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d6:	e00b      	b.n	80041f0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	09db      	lsrs	r3, r3, #7
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	2b7f      	cmp	r3, #127	; 0x7f
 80041f4:	d8f0      	bhi.n	80041d8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
 800420a:	4b34      	ldr	r3, [pc, #208]	; (80042dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	e00b      	b.n	800422a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1c59      	adds	r1, r3, #1
 800421a:	6279      	str	r1, [r7, #36]	; 0x24
 800421c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	09db      	lsrs	r3, r3, #7
 8004228:	623b      	str	r3, [r7, #32]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2b7f      	cmp	r3, #127	; 0x7f
 800422e:	d8f0      	bhi.n	8004212 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	627a      	str	r2, [r7, #36]	; 0x24
 8004236:	6a3a      	ldr	r2, [r7, #32]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	61fb      	str	r3, [r7, #28]
 8004244:	4b25      	ldr	r3, [pc, #148]	; (80042dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e00b      	b.n	8004264 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	b2da      	uxtb	r2, r3
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	61f9      	str	r1, [r7, #28]
 8004256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	09db      	lsrs	r3, r3, #7
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b7f      	cmp	r3, #127	; 0x7f
 8004268:	d8f0      	bhi.n	800424c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	61fa      	str	r2, [r7, #28]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e00b      	b.n	800429c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1c59      	adds	r1, r3, #1
 800428c:	6179      	str	r1, [r7, #20]
 800428e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	09db      	lsrs	r3, r3, #7
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2b7f      	cmp	r3, #127	; 0x7f
 80042a0:	d8f0      	bhi.n	8004284 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	617a      	str	r2, [r7, #20]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80042b2:	2218      	movs	r2, #24
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f7fe ff1c 	bl	80030f4 <_SendPacket>
  RECORD_END();
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80042ca:	4b04      	ldr	r3, [pc, #16]	; (80042dc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	4798      	blx	r3
  }
}
 80042d0:	bf00      	nop
 80042d2:	3730      	adds	r7, #48	; 0x30
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20005704 	.word	0x20005704
 80042dc:	200056d4 	.word	0x200056d4

080042e0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b092      	sub	sp, #72	; 0x48
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80042e8:	f3ef 8311 	mrs	r3, BASEPRI
 80042ec:	f04f 0120 	mov.w	r1, #32
 80042f0:	f381 8811 	msr	BASEPRI, r1
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	486a      	ldr	r0, [pc, #424]	; (80044a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80042f8:	f7fe fe0e 	bl	8002f18 <_PreparePacket>
 80042fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b66      	ldr	r3, [pc, #408]	; (80044a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	643b      	str	r3, [r7, #64]	; 0x40
 8004312:	e00b      	b.n	800432c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004316:	b2da      	uxtb	r2, r3
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	1c59      	adds	r1, r3, #1
 800431c:	6479      	str	r1, [r7, #68]	; 0x44
 800431e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	09db      	lsrs	r3, r3, #7
 800432a:	643b      	str	r3, [r7, #64]	; 0x40
 800432c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432e:	2b7f      	cmp	r3, #127	; 0x7f
 8004330:	d8f0      	bhi.n	8004314 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	647a      	str	r2, [r7, #68]	; 0x44
 8004338:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004340:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
 800434c:	e00b      	b.n	8004366 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	b2da      	uxtb	r2, r3
 8004352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	09db      	lsrs	r3, r3, #7
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2b7f      	cmp	r3, #127	; 0x7f
 800436a:	d8f0      	bhi.n	800434e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800436c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2220      	movs	r2, #32
 8004382:	4619      	mov	r1, r3
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7fe fd97 	bl	8002eb8 <_EncodeStr>
 800438a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800438c:	2209      	movs	r2, #9
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	6938      	ldr	r0, [r7, #16]
 8004392:	f7fe feaf 	bl	80030f4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b40      	ldr	r3, [pc, #256]	; (80044a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	633b      	str	r3, [r7, #48]	; 0x30
 80043aa:	e00b      	b.n	80043c4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	6379      	str	r1, [r7, #52]	; 0x34
 80043b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	09db      	lsrs	r3, r3, #7
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2b7f      	cmp	r3, #127	; 0x7f
 80043c8:	d8f0      	bhi.n	80043ac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80043ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	637a      	str	r2, [r7, #52]	; 0x34
 80043d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e4:	e00b      	b.n	80043fe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	1c59      	adds	r1, r3, #1
 80043ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	09db      	lsrs	r3, r3, #7
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	2b7f      	cmp	r3, #127	; 0x7f
 8004402:	d8f0      	bhi.n	80043e6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	e00b      	b.n	8004438 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	b2da      	uxtb	r2, r3
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	1c59      	adds	r1, r3, #1
 8004428:	6279      	str	r1, [r7, #36]	; 0x24
 800442a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	09db      	lsrs	r3, r3, #7
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b7f      	cmp	r3, #127	; 0x7f
 800443c:	d8f0      	bhi.n	8004420 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	627a      	str	r2, [r7, #36]	; 0x24
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e00b      	b.n	8004470 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	61f9      	str	r1, [r7, #28]
 8004462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	09db      	lsrs	r3, r3, #7
 800446e:	61bb      	str	r3, [r7, #24]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b7f      	cmp	r3, #127	; 0x7f
 8004474:	d8f0      	bhi.n	8004458 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	61fa      	str	r2, [r7, #28]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004486:	2215      	movs	r2, #21
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	6938      	ldr	r0, [r7, #16]
 800448c:	f7fe fe32 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f383 8811 	msr	BASEPRI, r3
}
 8004496:	bf00      	nop
 8004498:	3748      	adds	r7, #72	; 0x48
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20005704 	.word	0x20005704
 80044a4:	200056d4 	.word	0x200056d4

080044a8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80044be:	4b03      	ldr	r3, [pc, #12]	; (80044cc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	4798      	blx	r3
  }
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200056d4 	.word	0x200056d4

080044d0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044d8:	f3ef 8311 	mrs	r3, BASEPRI
 80044dc:	f04f 0120 	mov.w	r1, #32
 80044e0:	f381 8811 	msr	BASEPRI, r1
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	480b      	ldr	r0, [pc, #44]	; (8004514 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80044e8:	f7fe fd16 	bl	8002f18 <_PreparePacket>
 80044ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	6938      	ldr	r0, [r7, #16]
 80044f4:	f7fe fce0 	bl	8002eb8 <_EncodeStr>
 80044f8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80044fa:	220e      	movs	r2, #14
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	6938      	ldr	r0, [r7, #16]
 8004500:	f7fe fdf8 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f383 8811 	msr	BASEPRI, r3
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20005704 	.word	0x20005704

08004518 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01a      	beq.n	800455c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4798      	blx	r3
 8004538:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800453c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800453e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	000a      	movs	r2, r1
 800454c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800454e:	4613      	mov	r3, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4621      	mov	r1, r4
 8004554:	200d      	movs	r0, #13
 8004556:	f7ff fbad 	bl	8003cb4 <SEGGER_SYSVIEW_RecordU32x2>
 800455a:	e006      	b.n	800456a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	200c      	movs	r0, #12
 8004564:	f7ff fb6a 	bl	8003c3c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	bf00      	nop
 8004574:	200056d4 	.word	0x200056d4
 8004578:	e0001004 	.word	0xe0001004

0800457c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004582:	f3ef 8311 	mrs	r3, BASEPRI
 8004586:	f04f 0120 	mov.w	r1, #32
 800458a:	f381 8811 	msr	BASEPRI, r1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	4819      	ldr	r0, [pc, #100]	; (80045f8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004592:	f7fe fcc1 	bl	8002f18 <_PreparePacket>
 8004596:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800459c:	4b17      	ldr	r3, [pc, #92]	; (80045fc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e00b      	b.n	80045c8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1c59      	adds	r1, r3, #1
 80045b8:	6179      	str	r1, [r7, #20]
 80045ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	09db      	lsrs	r3, r3, #7
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b7f      	cmp	r3, #127	; 0x7f
 80045cc:	d8f0      	bhi.n	80045b0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	617a      	str	r2, [r7, #20]
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80045de:	2202      	movs	r2, #2
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	68b8      	ldr	r0, [r7, #8]
 80045e4:	f7fe fd86 	bl	80030f4 <_SendPacket>
  RECORD_END();
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f383 8811 	msr	BASEPRI, r3
}
 80045ee:	bf00      	nop
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20005704 	.word	0x20005704
 80045fc:	e000ed04 	.word	0xe000ed04

08004600 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004606:	f3ef 8311 	mrs	r3, BASEPRI
 800460a:	f04f 0120 	mov.w	r1, #32
 800460e:	f381 8811 	msr	BASEPRI, r1
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	4807      	ldr	r0, [pc, #28]	; (8004634 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004616:	f7fe fc7f 	bl	8002f18 <_PreparePacket>
 800461a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800461c:	2203      	movs	r2, #3
 800461e:	6839      	ldr	r1, [r7, #0]
 8004620:	6838      	ldr	r0, [r7, #0]
 8004622:	f7fe fd67 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f383 8811 	msr	BASEPRI, r3
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20005704 	.word	0x20005704

08004638 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800463e:	f3ef 8311 	mrs	r3, BASEPRI
 8004642:	f04f 0120 	mov.w	r1, #32
 8004646:	f381 8811 	msr	BASEPRI, r1
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	4807      	ldr	r0, [pc, #28]	; (800466c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800464e:	f7fe fc63 	bl	8002f18 <_PreparePacket>
 8004652:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004654:	2212      	movs	r2, #18
 8004656:	6839      	ldr	r1, [r7, #0]
 8004658:	6838      	ldr	r0, [r7, #0]
 800465a:	f7fe fd4b 	bl	80030f4 <_SendPacket>
  RECORD_END();
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f383 8811 	msr	BASEPRI, r3
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20005704 	.word	0x20005704

08004670 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004676:	f3ef 8311 	mrs	r3, BASEPRI
 800467a:	f04f 0120 	mov.w	r1, #32
 800467e:	f381 8811 	msr	BASEPRI, r1
 8004682:	607b      	str	r3, [r7, #4]
 8004684:	4807      	ldr	r0, [pc, #28]	; (80046a4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004686:	f7fe fc47 	bl	8002f18 <_PreparePacket>
 800468a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800468c:	2211      	movs	r2, #17
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	6838      	ldr	r0, [r7, #0]
 8004692:	f7fe fd2f 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f383 8811 	msr	BASEPRI, r3
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	20005704 	.word	0x20005704

080046a8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	f04f 0120 	mov.w	r1, #32
 80046b8:	f381 8811 	msr	BASEPRI, r1
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	4819      	ldr	r0, [pc, #100]	; (8004724 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80046c0:	f7fe fc2a 	bl	8002f18 <_PreparePacket>
 80046c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e00b      	b.n	80046f6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	1c59      	adds	r1, r3, #1
 80046e6:	61f9      	str	r1, [r7, #28]
 80046e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	09db      	lsrs	r3, r3, #7
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b7f      	cmp	r3, #127	; 0x7f
 80046fa:	d8f0      	bhi.n	80046de <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	61fa      	str	r2, [r7, #28]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800470c:	2208      	movs	r2, #8
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6938      	ldr	r0, [r7, #16]
 8004712:	f7fe fcef 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f383 8811 	msr	BASEPRI, r3
}
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20005704 	.word	0x20005704
 8004728:	200056d4 	.word	0x200056d4

0800472c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004734:	f3ef 8311 	mrs	r3, BASEPRI
 8004738:	f04f 0120 	mov.w	r1, #32
 800473c:	f381 8811 	msr	BASEPRI, r1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	4819      	ldr	r0, [pc, #100]	; (80047a8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004744:	f7fe fbe8 	bl	8002f18 <_PreparePacket>
 8004748:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800474e:	4b17      	ldr	r3, [pc, #92]	; (80047ac <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e00b      	b.n	800477a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	61f9      	str	r1, [r7, #28]
 800476c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	09db      	lsrs	r3, r3, #7
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b7f      	cmp	r3, #127	; 0x7f
 800477e:	d8f0      	bhi.n	8004762 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004790:	2204      	movs	r2, #4
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	6938      	ldr	r0, [r7, #16]
 8004796:	f7fe fcad 	bl	80030f4 <_SendPacket>
  RECORD_END();
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f383 8811 	msr	BASEPRI, r3
}
 80047a0:	bf00      	nop
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20005704 	.word	0x20005704
 80047ac:	200056d4 	.word	0x200056d4

080047b0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047b8:	f3ef 8311 	mrs	r3, BASEPRI
 80047bc:	f04f 0120 	mov.w	r1, #32
 80047c0:	f381 8811 	msr	BASEPRI, r1
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	4819      	ldr	r0, [pc, #100]	; (800482c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80047c8:	f7fe fba6 	bl	8002f18 <_PreparePacket>
 80047cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	e00b      	b.n	80047fe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	1c59      	adds	r1, r3, #1
 80047ee:	61f9      	str	r1, [r7, #28]
 80047f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	09db      	lsrs	r3, r3, #7
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b7f      	cmp	r3, #127	; 0x7f
 8004802:	d8f0      	bhi.n	80047e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	61fa      	str	r2, [r7, #28]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004814:	2206      	movs	r2, #6
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	6938      	ldr	r0, [r7, #16]
 800481a:	f7fe fc6b 	bl	80030f4 <_SendPacket>
  RECORD_END();
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f383 8811 	msr	BASEPRI, r3
}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20005704 	.word	0x20005704
 8004830:	200056d4 	.word	0x200056d4

08004834 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	1ad3      	subs	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	200056d4 	.word	0x200056d4

08004854 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d077      	beq.n	8004956 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004866:	4b3e      	ldr	r3, [pc, #248]	; (8004960 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800486c:	2300      	movs	r3, #0
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004870:	e008      	b.n	8004884 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	3301      	adds	r3, #1
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004888:	429a      	cmp	r2, r3
 800488a:	d3f2      	bcc.n	8004872 <SEGGER_SYSVIEW_SendModule+0x1e>
 800488c:	e000      	b.n	8004890 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800488e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	2b00      	cmp	r3, #0
 8004894:	d055      	beq.n	8004942 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004896:	f3ef 8311 	mrs	r3, BASEPRI
 800489a:	f04f 0120 	mov.w	r1, #32
 800489e:	f381 8811 	msr	BASEPRI, r1
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	482f      	ldr	r0, [pc, #188]	; (8004964 <SEGGER_SYSVIEW_SendModule+0x110>)
 80048a6:	f7fe fb37 	bl	8002f18 <_PreparePacket>
 80048aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	623b      	str	r3, [r7, #32]
 80048b8:	e00b      	b.n	80048d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	6279      	str	r1, [r7, #36]	; 0x24
 80048c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	09db      	lsrs	r3, r3, #7
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	2b7f      	cmp	r3, #127	; 0x7f
 80048d6:	d8f0      	bhi.n	80048ba <SEGGER_SYSVIEW_SendModule+0x66>
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	627a      	str	r2, [r7, #36]	; 0x24
 80048de:	6a3a      	ldr	r2, [r7, #32]
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e00b      	b.n	800490c <SEGGER_SYSVIEW_SendModule+0xb8>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	61f9      	str	r1, [r7, #28]
 80048fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	09db      	lsrs	r3, r3, #7
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b7f      	cmp	r3, #127	; 0x7f
 8004910:	d8f0      	bhi.n	80048f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	61fa      	str	r2, [r7, #28]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	4619      	mov	r1, r3
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7fe fac4 	bl	8002eb8 <_EncodeStr>
 8004930:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004932:	2216      	movs	r2, #22
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	6938      	ldr	r0, [r7, #16]
 8004938:	f7fe fbdc 	bl	80030f4 <_SendPacket>
      RECORD_END();
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <SEGGER_SYSVIEW_SendModule+0x102>
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4798      	blx	r3
    }
  }
}
 8004956:	bf00      	nop
 8004958:	3730      	adds	r7, #48	; 0x30
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200056fc 	.word	0x200056fc
 8004964:	20005704 	.word	0x20005704

08004968 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00f      	beq.n	8004996 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004976:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f2      	bne.n	800497c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	200056fc 	.word	0x200056fc

080049a4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80049aa:	f3ef 8311 	mrs	r3, BASEPRI
 80049ae:	f04f 0120 	mov.w	r1, #32
 80049b2:	f381 8811 	msr	BASEPRI, r1
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	4817      	ldr	r0, [pc, #92]	; (8004a18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80049ba:	f7fe faad 	bl	8002f18 <_PreparePacket>
 80049be:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	e00b      	b.n	80049e8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1c59      	adds	r1, r3, #1
 80049d8:	6179      	str	r1, [r7, #20]
 80049da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	09db      	lsrs	r3, r3, #7
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b7f      	cmp	r3, #127	; 0x7f
 80049ec:	d8f0      	bhi.n	80049d0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	617a      	str	r2, [r7, #20]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80049fe:	221b      	movs	r2, #27
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7fe fb76 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f383 8811 	msr	BASEPRI, r3
}
 8004a0e:	bf00      	nop
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20005704 	.word	0x20005704
 8004a1c:	20005700 	.word	0x20005700

08004a20 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004a20:	b40f      	push	{r0, r1, r2, r3}
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004a2e:	1d3b      	adds	r3, r7, #4
 8004a30:	461a      	mov	r2, r3
 8004a32:	2100      	movs	r1, #0
 8004a34:	6938      	ldr	r0, [r7, #16]
 8004a36:	f7fe fe6f 	bl	8003718 <_VPrintTarget>
  va_end(ParamList);
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr

08004a48 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a50:	f3ef 8311 	mrs	r3, BASEPRI
 8004a54:	f04f 0120 	mov.w	r1, #32
 8004a58:	f381 8811 	msr	BASEPRI, r1
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	4827      	ldr	r0, [pc, #156]	; (8004afc <SEGGER_SYSVIEW_Warn+0xb4>)
 8004a60:	f7fe fa5a 	bl	8002f18 <_PreparePacket>
 8004a64:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a66:	2280      	movs	r2, #128	; 0x80
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	6938      	ldr	r0, [r7, #16]
 8004a6c:	f7fe fa24 	bl	8002eb8 <_EncodeStr>
 8004a70:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	2301      	movs	r3, #1
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	e00b      	b.n	8004a94 <SEGGER_SYSVIEW_Warn+0x4c>
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	1c59      	adds	r1, r3, #1
 8004a84:	6279      	str	r1, [r7, #36]	; 0x24
 8004a86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	09db      	lsrs	r3, r3, #7
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	2b7f      	cmp	r3, #127	; 0x7f
 8004a98:	d8f0      	bhi.n	8004a7c <SEGGER_SYSVIEW_Warn+0x34>
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	627a      	str	r2, [r7, #36]	; 0x24
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e00b      	b.n	8004acc <SEGGER_SYSVIEW_Warn+0x84>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	1c59      	adds	r1, r3, #1
 8004abc:	61f9      	str	r1, [r7, #28]
 8004abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	09db      	lsrs	r3, r3, #7
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad0:	d8f0      	bhi.n	8004ab4 <SEGGER_SYSVIEW_Warn+0x6c>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	61fa      	str	r2, [r7, #28]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004ae2:	221a      	movs	r2, #26
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	6938      	ldr	r0, [r7, #16]
 8004ae8:	f7fe fb04 	bl	80030f4 <_SendPacket>
  RECORD_END();
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f383 8811 	msr	BASEPRI, r3
}
 8004af2:	bf00      	nop
 8004af4:	3728      	adds	r7, #40	; 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20005704 	.word	0x20005704

08004b00 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b06:	7e1b      	ldrb	r3, [r3, #24]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	440b      	add	r3, r1
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	336c      	adds	r3, #108	; 0x6c
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b1c:	7e1b      	ldrb	r3, [r3, #24]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	490d      	ldr	r1, [pc, #52]	; (8004b58 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8004b22:	4603      	mov	r3, r0
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4403      	add	r3, r0
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	440b      	add	r3, r1
 8004b2c:	3370      	adds	r3, #112	; 0x70
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d00b      	beq.n	8004b4c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b36:	789b      	ldrb	r3, [r3, #2]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b42:	f7fe f9f5 	bl	8002f30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b46:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8004b4c:	4b01      	ldr	r3, [pc, #4]	; (8004b54 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	200056d4 	.word	0x200056d4
 8004b58:	20004214 	.word	0x20004214

08004b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b62:	f000 fb09 	bl	8005178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b66:	f000 f877 	bl	8004c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b6a:	f000 f8c7 	bl	8004cfc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(115200);
 8004b6e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8004b72:	f7fd fd55 	bl	8002620 <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8004b76:	f7fd faab 	bl	80020d0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(LED_On_handler,"Task-2",200,NULL,2,&LEDONHandle);
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <main+0xd4>)
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	2302      	movs	r3, #2
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	22c8      	movs	r2, #200	; 0xc8
 8004b86:	492b      	ldr	r1, [pc, #172]	; (8004c34 <main+0xd8>)
 8004b88:	482b      	ldr	r0, [pc, #172]	; (8004c38 <main+0xdc>)
 8004b8a:	f7fb fc1f 	bl	80003cc <xTaskCreate>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <main+0xe0>)
 8004b92:	6013      	str	r3, [r2, #0]

  configASSERT(status==pdPASS);
 8004b94:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <main+0xe0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d00a      	beq.n	8004bb2 <main+0x56>
        __asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60fb      	str	r3, [r7, #12]
    }
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <main+0x54>

  NextTaskHandle = LEDONHandle;
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <main+0xd4>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <main+0xe4>)
 8004bb8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(LED_Off_handler,"Task-2",200,NULL,1,&LEDOFFHandle);
 8004bba:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <main+0xe8>)
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	22c8      	movs	r2, #200	; 0xc8
 8004bc6:	491b      	ldr	r1, [pc, #108]	; (8004c34 <main+0xd8>)
 8004bc8:	481f      	ldr	r0, [pc, #124]	; (8004c48 <main+0xec>)
 8004bca:	f7fb fbff 	bl	80003cc <xTaskCreate>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <main+0xe0>)
 8004bd2:	6013      	str	r3, [r2, #0]

  configASSERT(status==pdPASS);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <main+0xe0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d00a      	beq.n	8004bf2 <main+0x96>
        __asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60bb      	str	r3, [r7, #8]
    }
 8004bee:	bf00      	nop
 8004bf0:	e7fe      	b.n	8004bf0 <main+0x94>

  status = xTaskCreate(Button_handler,"Task-1",200,NULL,3,&ButtonHandle);
 8004bf2:	4b16      	ldr	r3, [pc, #88]	; (8004c4c <main+0xf0>)
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	22c8      	movs	r2, #200	; 0xc8
 8004bfe:	4914      	ldr	r1, [pc, #80]	; (8004c50 <main+0xf4>)
 8004c00:	4814      	ldr	r0, [pc, #80]	; (8004c54 <main+0xf8>)
 8004c02:	f7fb fbe3 	bl	80003cc <xTaskCreate>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <main+0xe0>)
 8004c0a:	6013      	str	r3, [r2, #0]

  configASSERT(status==pdPASS);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <main+0xe0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d00a      	beq.n	8004c2a <main+0xce>
        __asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	607b      	str	r3, [r7, #4]
    }
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <main+0xcc>

  vTaskStartScheduler();
 8004c2a:	f7fb fe2f 	bl	800088c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c2e:	e7fe      	b.n	8004c2e <main+0xd2>
 8004c30:	200057ec 	.word	0x200057ec
 8004c34:	08006b98 	.word	0x08006b98
 8004c38:	08004dfd 	.word	0x08004dfd
 8004c3c:	200057f8 	.word	0x200057f8
 8004c40:	200057f4 	.word	0x200057f4
 8004c44:	200057f0 	.word	0x200057f0
 8004c48:	08004e5d 	.word	0x08004e5d
 8004c4c:	200057e8 	.word	0x200057e8
 8004c50:	08006ba0 	.word	0x08006ba0
 8004c54:	08004ed1 	.word	0x08004ed1

08004c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b096      	sub	sp, #88	; 0x58
 8004c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c5e:	f107 0314 	add.w	r3, r7, #20
 8004c62:	2244      	movs	r2, #68	; 0x44
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 feea 	bl	8006a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004c7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c7e:	f000 fda9 	bl	80057d4 <HAL_PWREx_ControlVoltageScaling>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004c88:	f000 f95a 	bl	8004f40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c96:	2310      	movs	r3, #16
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004ca6:	230a      	movs	r3, #10
 8004ca8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004caa:	2307      	movs	r3, #7
 8004cac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fde0 	bl	8005880 <HAL_RCC_OscConfig>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004cc6:	f000 f93b 	bl	8004f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cca:	230f      	movs	r3, #15
 8004ccc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004cde:	463b      	mov	r3, r7
 8004ce0:	2104      	movs	r1, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f9a8 	bl	8006038 <HAL_RCC_ClockConfig>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004cee:	f000 f927 	bl	8004f40 <Error_Handler>
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3758      	adds	r7, #88	; 0x58
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	605a      	str	r2, [r3, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d12:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	4a37      	ldr	r2, [pc, #220]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d1e:	4b35      	ldr	r3, [pc, #212]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d2a:	4b32      	ldr	r3, [pc, #200]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	4a31      	ldr	r2, [pc, #196]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d36:	4b2f      	ldr	r3, [pc, #188]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d42:	4b2c      	ldr	r3, [pc, #176]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	4a2b      	ldr	r2, [pc, #172]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d4e:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d5a:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	4a25      	ldr	r2, [pc, #148]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d60:	f043 0302 	orr.w	r3, r3, #2
 8004d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d66:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <MX_GPIO_Init+0xf8>)
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004d72:	2200      	movs	r2, #0
 8004d74:	2120      	movs	r1, #32
 8004d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d7a:	f000 fce1 	bl	8005740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004d84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d8e:	f107 0314 	add.w	r3, r7, #20
 8004d92:	4619      	mov	r1, r3
 8004d94:	4818      	ldr	r0, [pc, #96]	; (8004df8 <MX_GPIO_Init+0xfc>)
 8004d96:	f000 fb11 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da6:	2303      	movs	r3, #3
 8004da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004daa:	2307      	movs	r3, #7
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dae:	f107 0314 	add.w	r3, r7, #20
 8004db2:	4619      	mov	r1, r3
 8004db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004db8:	f000 fb00 	bl	80053bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dd6:	f000 faf1 	bl	80053bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2100      	movs	r1, #0
 8004dde:	2028      	movs	r0, #40	; 0x28
 8004de0:	f000 fac2 	bl	8005368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004de4:	2028      	movs	r0, #40	; 0x28
 8004de6:	f000 fadb 	bl	80053a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004dea:	bf00      	nop
 8004dec:	3728      	adds	r7, #40	; 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	48000800 	.word	0x48000800

08004dfc <LED_On_handler>:

/* USER CODE BEGIN 4 */

static void LED_On_handler(void * parameters)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED is ON");
 8004e04:	4811      	ldr	r0, [pc, #68]	; (8004e4c <LED_On_handler+0x50>)
 8004e06:	f7ff fe0b 	bl	8004a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	2120      	movs	r1, #32
 8004e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e12:	f000 fc95 	bl	8005740 <HAL_GPIO_WritePin>
		status = xTaskNotifyWait(0,0,NULL,1000);
 8004e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2100      	movs	r1, #0
 8004e22:	2000      	movs	r0, #0
 8004e24:	f7fc f900 	bl	8001028 <xTaskGenericNotifyWait>
 8004e28:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d1e9      	bne.n	8004e04 <LED_On_handler+0x8>
		{
			portENTER_CRITICAL();
 8004e30:	f7fc fe48 	bl	8001ac4 <vPortEnterCritical>
			NextTaskHandle = LEDOFFHandle;
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <LED_On_handler+0x54>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <LED_On_handler+0x58>)
 8004e3a:	6013      	str	r3, [r2, #0]
			portEXIT_CRITICAL();
 8004e3c:	f7fc fe72 	bl	8001b24 <vPortExitCritical>
			vTaskDelete(LEDONHandle);
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <LED_On_handler+0x5c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb fc3b 	bl	80006c0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("LED is ON");
 8004e4a:	e7db      	b.n	8004e04 <LED_On_handler+0x8>
 8004e4c:	08006ba8 	.word	0x08006ba8
 8004e50:	200057f0 	.word	0x200057f0
 8004e54:	200057f4 	.word	0x200057f4
 8004e58:	200057ec 	.word	0x200057ec

08004e5c <LED_Off_handler>:
		}
	}
}

static void LED_Off_handler(void * parameters)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED is OF");
 8004e64:	4815      	ldr	r0, [pc, #84]	; (8004ebc <LED_Off_handler+0x60>)
 8004e66:	f7ff fddb 	bl	8004a20 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e72:	f000 fc65 	bl	8005740 <HAL_GPIO_WritePin>
		status = xTaskNotifyWait(0,0,NULL,1000);
 8004e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	2000      	movs	r0, #0
 8004e84:	f7fc f8d0 	bl	8001028 <xTaskGenericNotifyWait>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ec0 <LED_Off_handler+0x64>)
 8004e8c:	6013      	str	r3, [r2, #0]

		if(status == pdTRUE)
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <LED_Off_handler+0x64>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d1e6      	bne.n	8004e64 <LED_Off_handler+0x8>
		{
			portENTER_CRITICAL();
 8004e96:	f7fc fe15 	bl	8001ac4 <vPortEnterCritical>
			NextTaskHandle = NULL;
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <LED_Off_handler+0x68>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
			portEXIT_CRITICAL();
 8004ea0:	f7fc fe40 	bl	8001b24 <vPortExitCritical>
			vTaskDelete(LEDOFFHandle);
 8004ea4:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <LED_Off_handler+0x6c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb fc09 	bl	80006c0 <vTaskDelete>
			vTaskDelete(ButtonHandle);
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <LED_Off_handler+0x70>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb fc04 	bl	80006c0 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("LED is OF");
 8004eb8:	e7d4      	b.n	8004e64 <LED_Off_handler+0x8>
 8004eba:	bf00      	nop
 8004ebc:	08006bb4 	.word	0x08006bb4
 8004ec0:	200057f8 	.word	0x200057f8
 8004ec4:	200057f4 	.word	0x200057f4
 8004ec8:	200057f0 	.word	0x200057f0
 8004ecc:	200057e8 	.word	0x200057e8

08004ed0 <Button_handler>:
		}
	}
}

static void Button_handler(void * parameters)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]

	uint8_t button_read;
	uint8_t prv_val = 1;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		button_read = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 8004edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ee0:	480c      	ldr	r0, [pc, #48]	; (8004f14 <Button_handler+0x44>)
 8004ee2:	f000 fc15 	bl	8005710 <HAL_GPIO_ReadPin>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73bb      	strb	r3, [r7, #14]

		if(!button_read)
 8004eea:	7bbb      	ldrb	r3, [r7, #14]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <Button_handler+0x38>
		{
			if(!prv_val)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d108      	bne.n	8004f08 <Button_handler+0x38>
			{
				xTaskNotify(NextTaskHandle,0,eNoAction);
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <Button_handler+0x48>)
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2300      	movs	r3, #0
 8004f00:	2200      	movs	r2, #0
 8004f02:	2100      	movs	r1, #0
 8004f04:	f7fc f918 	bl	8001138 <xTaskGenericNotify>
			}
		}
		prv_val = button_read;
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(10);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f7fb fc85 	bl	800081c <vTaskDelay>
		button_read = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 8004f12:	e7e3      	b.n	8004edc <Button_handler+0xc>
 8004f14:	48000800 	.word	0x48000800
 8004f18:	200057f4 	.word	0x200057f4

08004f1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f2e:	f000 f943 	bl	80051b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40001000 	.word	0x40001000

08004f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f44:	b672      	cpsid	i
}
 8004f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f48:	e7fe      	b.n	8004f48 <Error_Handler+0x8>
	...

08004f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <HAL_MspInit+0x44>)
 8004f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <HAL_MspInit+0x44>)
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004f5e:	4b0c      	ldr	r3, [pc, #48]	; (8004f90 <HAL_MspInit+0x44>)
 8004f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_MspInit+0x44>)
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <HAL_MspInit+0x44>)
 8004f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f74:	6593      	str	r3, [r2, #88]	; 0x58
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_MspInit+0x44>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8004f82:	f7fc fd21 	bl	80019c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	; 0x38
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004fa2:	4b34      	ldr	r3, [pc, #208]	; (8005074 <HAL_InitTick+0xe0>)
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa6:	4a33      	ldr	r2, [pc, #204]	; (8005074 <HAL_InitTick+0xe0>)
 8004fa8:	f043 0310 	orr.w	r3, r3, #16
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
 8004fae:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_InitTick+0xe0>)
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fba:	f107 0210 	add.w	r2, r7, #16
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 f9e5 	bl	8006394 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004fd4:	f001 f9c8 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 8004fd8:	6378      	str	r0, [r7, #52]	; 0x34
 8004fda:	e004      	b.n	8004fe6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004fdc:	f001 f9c4 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	4a23      	ldr	r2, [pc, #140]	; (8005078 <HAL_InitTick+0xe4>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0c9b      	lsrs	r3, r3, #18
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_InitTick+0xe8>)
 8004ff6:	4a22      	ldr	r2, [pc, #136]	; (8005080 <HAL_InitTick+0xec>)
 8004ff8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_InitTick+0xe8>)
 8004ffc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005000:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005002:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_InitTick+0xe8>)
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005008:	4b1c      	ldr	r3, [pc, #112]	; (800507c <HAL_InitTick+0xe8>)
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800500e:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_InitTick+0xe8>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <HAL_InitTick+0xe8>)
 8005016:	2200      	movs	r2, #0
 8005018:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800501a:	4818      	ldr	r0, [pc, #96]	; (800507c <HAL_InitTick+0xe8>)
 800501c:	f001 fa4c 	bl	80064b8 <HAL_TIM_Base_Init>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11b      	bne.n	8005066 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800502e:	4813      	ldr	r0, [pc, #76]	; (800507c <HAL_InitTick+0xe8>)
 8005030:	f001 faa4 	bl	800657c <HAL_TIM_Base_Start_IT>
 8005034:	4603      	mov	r3, r0
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800503a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800503e:	2b00      	cmp	r3, #0
 8005040:	d111      	bne.n	8005066 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005042:	2036      	movs	r0, #54	; 0x36
 8005044:	f000 f9ac 	bl	80053a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d808      	bhi.n	8005060 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800504e:	2200      	movs	r2, #0
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	2036      	movs	r0, #54	; 0x36
 8005054:	f000 f988 	bl	8005368 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005058:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <HAL_InitTick+0xf0>)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e002      	b.n	8005066 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800506a:	4618      	mov	r0, r3
 800506c:	3738      	adds	r7, #56	; 0x38
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	431bde83 	.word	0x431bde83
 800507c:	200057fc 	.word	0x200057fc
 8005080:	40001000 	.word	0x40001000
 8005084:	20000014 	.word	0x20000014

08005088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005088:	b480      	push	{r7}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800508c:	e7fe      	b.n	800508c <NMI_Handler+0x4>

0800508e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800508e:	b480      	push	{r7}
 8005090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005092:	e7fe      	b.n	8005092 <HardFault_Handler+0x4>

08005094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005098:	e7fe      	b.n	8005098 <MemManage_Handler+0x4>

0800509a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800509e:	e7fe      	b.n	800509e <BusFault_Handler+0x4>

080050a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050a4:	e7fe      	b.n	80050a4 <UsageFault_Handler+0x4>

080050a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80050ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80050be:	f000 fb57 	bl	8005770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  traceISR_ENTER();
 80050c2:	f7ff fa5b 	bl	800457c <SEGGER_SYSVIEW_RecordEnterISR>
  xTaskNotifyFromISR(NextTaskHandle,0,0,NULL);
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <EXTI15_10_IRQHandler+0x34>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	2300      	movs	r3, #0
 80050d4:	2200      	movs	r2, #0
 80050d6:	2100      	movs	r1, #0
 80050d8:	f7fc f952 	bl	8001380 <xTaskGenericNotifyFromISR>
  traceISR_EXIT();
 80050dc:	f7ff fa90 	bl	8004600 <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200057f4 	.word	0x200057f4

080050ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050f0:	4802      	ldr	r0, [pc, #8]	; (80050fc <TIM6_DAC_IRQHandler+0x10>)
 80050f2:	f001 fab3 	bl	800665c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	200057fc 	.word	0x200057fc

08005100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <SystemInit+0x20>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <SystemInit+0x20>)
 800510c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800515c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005128:	f7ff ffea 	bl	8005100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800512c:	480c      	ldr	r0, [pc, #48]	; (8005160 <LoopForever+0x6>)
  ldr r1, =_edata
 800512e:	490d      	ldr	r1, [pc, #52]	; (8005164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005130:	4a0d      	ldr	r2, [pc, #52]	; (8005168 <LoopForever+0xe>)
  movs r3, #0
 8005132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005134:	e002      	b.n	800513c <LoopCopyDataInit>

08005136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800513a:	3304      	adds	r3, #4

0800513c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800513c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800513e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005140:	d3f9      	bcc.n	8005136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005142:	4a0a      	ldr	r2, [pc, #40]	; (800516c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005144:	4c0a      	ldr	r4, [pc, #40]	; (8005170 <LoopForever+0x16>)
  movs r3, #0
 8005146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005148:	e001      	b.n	800514e <LoopFillZerobss>

0800514a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800514a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800514c:	3204      	adds	r2, #4

0800514e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800514e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005150:	d3fb      	bcc.n	800514a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005152:	f001 fc7d 	bl	8006a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005156:	f7ff fd01 	bl	8004b5c <main>

0800515a <LoopForever>:

LoopForever:
    b LoopForever
 800515a:	e7fe      	b.n	800515a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800515c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005164:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8005168:	08006c4c 	.word	0x08006c4c
  ldr r2, =_sbss
 800516c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8005170:	2000584c 	.word	0x2000584c

08005174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005174:	e7fe      	b.n	8005174 <ADC1_2_IRQHandler>
	...

08005178 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <HAL_Init+0x3c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <HAL_Init+0x3c>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800518e:	2003      	movs	r0, #3
 8005190:	f000 f8df 	bl	8005352 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005194:	200f      	movs	r0, #15
 8005196:	f7ff fefd 	bl	8004f94 <HAL_InitTick>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	71fb      	strb	r3, [r7, #7]
 80051a4:	e001      	b.n	80051aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051a6:	f7ff fed1 	bl	8004f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051aa:	79fb      	ldrb	r3, [r7, #7]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40022000 	.word	0x40022000

080051b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051bc:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <HAL_IncTick+0x20>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <HAL_IncTick+0x24>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4413      	add	r3, r2
 80051c8:	4a04      	ldr	r2, [pc, #16]	; (80051dc <HAL_IncTick+0x24>)
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000018 	.word	0x20000018
 80051dc:	20005848 	.word	0x20005848

080051e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return uwTick;
 80051e4:	4b03      	ldr	r3, [pc, #12]	; (80051f4 <HAL_GetTick+0x14>)
 80051e6:	681b      	ldr	r3, [r3, #0]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20005848 	.word	0x20005848

080051f8 <__NVIC_SetPriorityGrouping>:
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <__NVIC_SetPriorityGrouping+0x44>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005214:	4013      	ands	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800522a:	4a04      	ldr	r2, [pc, #16]	; (800523c <__NVIC_SetPriorityGrouping+0x44>)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	60d3      	str	r3, [r2, #12]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <__NVIC_GetPriorityGrouping>:
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <__NVIC_GetPriorityGrouping+0x18>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	0a1b      	lsrs	r3, r3, #8
 800524a:	f003 0307 	and.w	r3, r3, #7
}
 800524e:	4618      	mov	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <__NVIC_EnableIRQ>:
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526a:	2b00      	cmp	r3, #0
 800526c:	db0b      	blt.n	8005286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	f003 021f 	and.w	r2, r3, #31
 8005274:	4907      	ldr	r1, [pc, #28]	; (8005294 <__NVIC_EnableIRQ+0x38>)
 8005276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2001      	movs	r0, #1
 800527e:	fa00 f202 	lsl.w	r2, r0, r2
 8005282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000e100 	.word	0xe000e100

08005298 <__NVIC_SetPriority>:
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	6039      	str	r1, [r7, #0]
 80052a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	db0a      	blt.n	80052c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	490c      	ldr	r1, [pc, #48]	; (80052e4 <__NVIC_SetPriority+0x4c>)
 80052b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b6:	0112      	lsls	r2, r2, #4
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	440b      	add	r3, r1
 80052bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80052c0:	e00a      	b.n	80052d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4908      	ldr	r1, [pc, #32]	; (80052e8 <__NVIC_SetPriority+0x50>)
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	3b04      	subs	r3, #4
 80052d0:	0112      	lsls	r2, r2, #4
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	440b      	add	r3, r1
 80052d6:	761a      	strb	r2, [r3, #24]
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	e000e100 	.word	0xe000e100
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f1c3 0307 	rsb	r3, r3, #7
 8005306:	2b04      	cmp	r3, #4
 8005308:	bf28      	it	cs
 800530a:	2304      	movcs	r3, #4
 800530c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	3304      	adds	r3, #4
 8005312:	2b06      	cmp	r3, #6
 8005314:	d902      	bls.n	800531c <NVIC_EncodePriority+0x30>
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3b03      	subs	r3, #3
 800531a:	e000      	b.n	800531e <NVIC_EncodePriority+0x32>
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005320:	f04f 32ff 	mov.w	r2, #4294967295
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43da      	mvns	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	401a      	ands	r2, r3
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005334:	f04f 31ff 	mov.w	r1, #4294967295
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	43d9      	mvns	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005344:	4313      	orrs	r3, r2
         );
}
 8005346:	4618      	mov	r0, r3
 8005348:	3724      	adds	r7, #36	; 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff ff4c 	bl	80051f8 <__NVIC_SetPriorityGrouping>
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800537a:	f7ff ff61 	bl	8005240 <__NVIC_GetPriorityGrouping>
 800537e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	6978      	ldr	r0, [r7, #20]
 8005386:	f7ff ffb1 	bl	80052ec <NVIC_EncodePriority>
 800538a:	4602      	mov	r2, r0
 800538c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005390:	4611      	mov	r1, r2
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ff80 	bl	8005298 <__NVIC_SetPriority>
}
 8005398:	bf00      	nop
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff ff54 	bl	800525c <__NVIC_EnableIRQ>
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ca:	e17f      	b.n	80056cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2101      	movs	r1, #1
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8171 	beq.w	80056c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d005      	beq.n	80053fc <HAL_GPIO_Init+0x40>
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d130      	bne.n	800545e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2203      	movs	r2, #3
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4013      	ands	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005432:	2201      	movs	r2, #1
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0201 	and.w	r2, r3, #1
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b03      	cmp	r3, #3
 8005468:	d118      	bne.n	800549c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005470:	2201      	movs	r2, #1
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	08db      	lsrs	r3, r3, #3
 8005486:	f003 0201 	and.w	r2, r3, #1
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	fa02 f303 	lsl.w	r3, r2, r3
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d017      	beq.n	80054d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	2203      	movs	r2, #3
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d123      	bne.n	800552c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	08da      	lsrs	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3208      	adds	r2, #8
 80054ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	220f      	movs	r2, #15
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	08da      	lsrs	r2, r3, #3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3208      	adds	r2, #8
 8005526:	6939      	ldr	r1, [r7, #16]
 8005528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	2203      	movs	r2, #3
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0203 	and.w	r2, r3, #3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80ac 	beq.w	80056c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800556e:	4b5f      	ldr	r3, [pc, #380]	; (80056ec <HAL_GPIO_Init+0x330>)
 8005570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005572:	4a5e      	ldr	r2, [pc, #376]	; (80056ec <HAL_GPIO_Init+0x330>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6613      	str	r3, [r2, #96]	; 0x60
 800557a:	4b5c      	ldr	r3, [pc, #368]	; (80056ec <HAL_GPIO_Init+0x330>)
 800557c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005586:	4a5a      	ldr	r2, [pc, #360]	; (80056f0 <HAL_GPIO_Init+0x334>)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	089b      	lsrs	r3, r3, #2
 800558c:	3302      	adds	r3, #2
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	220f      	movs	r2, #15
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43db      	mvns	r3, r3
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055b0:	d025      	beq.n	80055fe <HAL_GPIO_Init+0x242>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a4f      	ldr	r2, [pc, #316]	; (80056f4 <HAL_GPIO_Init+0x338>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01f      	beq.n	80055fa <HAL_GPIO_Init+0x23e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a4e      	ldr	r2, [pc, #312]	; (80056f8 <HAL_GPIO_Init+0x33c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d019      	beq.n	80055f6 <HAL_GPIO_Init+0x23a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a4d      	ldr	r2, [pc, #308]	; (80056fc <HAL_GPIO_Init+0x340>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_GPIO_Init+0x236>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a4c      	ldr	r2, [pc, #304]	; (8005700 <HAL_GPIO_Init+0x344>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00d      	beq.n	80055ee <HAL_GPIO_Init+0x232>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a4b      	ldr	r2, [pc, #300]	; (8005704 <HAL_GPIO_Init+0x348>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <HAL_GPIO_Init+0x22e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a4a      	ldr	r2, [pc, #296]	; (8005708 <HAL_GPIO_Init+0x34c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_GPIO_Init+0x22a>
 80055e2:	2306      	movs	r3, #6
 80055e4:	e00c      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055e6:	2307      	movs	r3, #7
 80055e8:	e00a      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055ea:	2305      	movs	r3, #5
 80055ec:	e008      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055ee:	2304      	movs	r3, #4
 80055f0:	e006      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055f2:	2303      	movs	r3, #3
 80055f4:	e004      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e002      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <HAL_GPIO_Init+0x244>
 80055fe:	2300      	movs	r3, #0
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	f002 0203 	and.w	r2, r2, #3
 8005606:	0092      	lsls	r2, r2, #2
 8005608:	4093      	lsls	r3, r2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005610:	4937      	ldr	r1, [pc, #220]	; (80056f0 <HAL_GPIO_Init+0x334>)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	089b      	lsrs	r3, r3, #2
 8005616:	3302      	adds	r3, #2
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800561e:	4b3b      	ldr	r3, [pc, #236]	; (800570c <HAL_GPIO_Init+0x350>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	43db      	mvns	r3, r3
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4013      	ands	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005642:	4a32      	ldr	r2, [pc, #200]	; (800570c <HAL_GPIO_Init+0x350>)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005648:	4b30      	ldr	r3, [pc, #192]	; (800570c <HAL_GPIO_Init+0x350>)
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	43db      	mvns	r3, r3
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4013      	ands	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800566c:	4a27      	ldr	r2, [pc, #156]	; (800570c <HAL_GPIO_Init+0x350>)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <HAL_GPIO_Init+0x350>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	43db      	mvns	r3, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4013      	ands	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005696:	4a1d      	ldr	r2, [pc, #116]	; (800570c <HAL_GPIO_Init+0x350>)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800569c:	4b1b      	ldr	r3, [pc, #108]	; (800570c <HAL_GPIO_Init+0x350>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4013      	ands	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056c0:	4a12      	ldr	r2, [pc, #72]	; (800570c <HAL_GPIO_Init+0x350>)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	3301      	adds	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	fa22 f303 	lsr.w	r3, r2, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f47f ae78 	bne.w	80053cc <HAL_GPIO_Init+0x10>
  }
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40010000 	.word	0x40010000
 80056f4:	48000400 	.word	0x48000400
 80056f8:	48000800 	.word	0x48000800
 80056fc:	48000c00 	.word	0x48000c00
 8005700:	48001000 	.word	0x48001000
 8005704:	48001400 	.word	0x48001400
 8005708:	48001800 	.word	0x48001800
 800570c:	40010400 	.word	0x40010400

08005710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	887b      	ldrh	r3, [r7, #2]
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
 800572c:	e001      	b.n	8005732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	807b      	strh	r3, [r7, #2]
 800574c:	4613      	mov	r3, r2
 800574e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005750:	787b      	ldrb	r3, [r7, #1]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800575c:	e002      	b.n	8005764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800577a:	4b08      	ldr	r3, [pc, #32]	; (800579c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005786:	4a05      	ldr	r2, [pc, #20]	; (800579c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005788:	88fb      	ldrh	r3, [r7, #6]
 800578a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f806 	bl	80057a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40010400 	.word	0x40010400

080057a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	4603      	mov	r3, r0
 80057a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	40007000 	.word	0x40007000

080057d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e2:	d130      	bne.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80057e4:	4b23      	ldr	r3, [pc, #140]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f0:	d038      	beq.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005800:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2232      	movs	r2, #50	; 0x32
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800580e:	fba2 2303 	umull	r2, r3, r2, r3
 8005812:	0c9b      	lsrs	r3, r3, #18
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005818:	e002      	b.n	8005820 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b01      	subs	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005820:	4b14      	ldr	r3, [pc, #80]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582c:	d102      	bne.n	8005834 <HAL_PWREx_ControlVoltageScaling+0x60>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1f2      	bne.n	800581a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d110      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e00f      	b.n	8005866 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005846:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800584e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005852:	d007      	beq.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800585c:	4a05      	ldr	r2, [pc, #20]	; (8005874 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800585e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005862:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40007000 	.word	0x40007000
 8005878:	20000010 	.word	0x20000010
 800587c:	431bde83 	.word	0x431bde83

08005880 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b088      	sub	sp, #32
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e3ca      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005892:	4b97      	ldr	r3, [pc, #604]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 030c 	and.w	r3, r3, #12
 800589a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800589c:	4b94      	ldr	r3, [pc, #592]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80e4 	beq.w	8005a7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_RCC_OscConfig+0x4a>
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	f040 808b 	bne.w	80059d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 8087 	bne.w	80059d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_RCC_OscConfig+0x62>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e3a2      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1a      	ldr	r2, [r3, #32]
 80058e6:	4b82      	ldr	r3, [pc, #520]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d004      	beq.n	80058fc <HAL_RCC_OscConfig+0x7c>
 80058f2:	4b7f      	ldr	r3, [pc, #508]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058fa:	e005      	b.n	8005908 <HAL_RCC_OscConfig+0x88>
 80058fc:	4b7c      	ldr	r3, [pc, #496]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80058fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005908:	4293      	cmp	r3, r2
 800590a:	d223      	bcs.n	8005954 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fd71 	bl	80063f8 <RCC_SetFlashLatencyFromMSIRange>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e383      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005920:	4b73      	ldr	r3, [pc, #460]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a72      	ldr	r2, [pc, #456]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005926:	f043 0308 	orr.w	r3, r3, #8
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	496d      	ldr	r1, [pc, #436]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 800593a:	4313      	orrs	r3, r2
 800593c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800593e:	4b6c      	ldr	r3, [pc, #432]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	4968      	ldr	r1, [pc, #416]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 800594e:	4313      	orrs	r3, r2
 8005950:	604b      	str	r3, [r1, #4]
 8005952:	e025      	b.n	80059a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005954:	4b66      	ldr	r3, [pc, #408]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a65      	ldr	r2, [pc, #404]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 800595a:	f043 0308 	orr.w	r3, r3, #8
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	4b63      	ldr	r3, [pc, #396]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	4960      	ldr	r1, [pc, #384]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 800596e:	4313      	orrs	r3, r2
 8005970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005972:	4b5f      	ldr	r3, [pc, #380]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	495b      	ldr	r1, [pc, #364]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005982:	4313      	orrs	r3, r2
 8005984:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fd31 	bl	80063f8 <RCC_SetFlashLatencyFromMSIRange>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e343      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059a0:	f000 fc4a 	bl	8006238 <HAL_RCC_GetSysClockFreq>
 80059a4:	4602      	mov	r2, r0
 80059a6:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	4950      	ldr	r1, [pc, #320]	; (8005af4 <HAL_RCC_OscConfig+0x274>)
 80059b2:	5ccb      	ldrb	r3, [r1, r3]
 80059b4:	f003 031f 	and.w	r3, r3, #31
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
 80059bc:	4a4e      	ldr	r2, [pc, #312]	; (8005af8 <HAL_RCC_OscConfig+0x278>)
 80059be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059c0:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <HAL_RCC_OscConfig+0x27c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fae5 	bl	8004f94 <HAL_InitTick>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d052      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	e327      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d032      	beq.n	8005a46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059e0:	4b43      	ldr	r3, [pc, #268]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a42      	ldr	r2, [pc, #264]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ec:	f7ff fbf8 	bl	80051e0 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059f2:	e008      	b.n	8005a06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059f4:	f7ff fbf4 	bl	80051e0 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e310      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a06:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0f0      	beq.n	80059f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a12:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a36      	ldr	r2, [pc, #216]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a18:	f043 0308 	orr.w	r3, r3, #8
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4931      	ldr	r1, [pc, #196]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a30:	4b2f      	ldr	r3, [pc, #188]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	492c      	ldr	r1, [pc, #176]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]
 8005a44:	e01a      	b.n	8005a7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a46:	4b2a      	ldr	r3, [pc, #168]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a29      	ldr	r2, [pc, #164]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a52:	f7ff fbc5 	bl	80051e0 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a5a:	f7ff fbc1 	bl	80051e0 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e2dd      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a6c:	4b20      	ldr	r3, [pc, #128]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0302 	and.w	r3, r3, #2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x1da>
 8005a78:	e000      	b.n	8005a7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d074      	beq.n	8005b72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d005      	beq.n	8005a9a <HAL_RCC_OscConfig+0x21a>
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b0c      	cmp	r3, #12
 8005a92:	d10e      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d10b      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a9a:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d064      	beq.n	8005b70 <HAL_RCC_OscConfig+0x2f0>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d160      	bne.n	8005b70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e2ba      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aba:	d106      	bne.n	8005aca <HAL_RCC_OscConfig+0x24a>
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	e026      	b.n	8005b18 <HAL_RCC_OscConfig+0x298>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad2:	d115      	bne.n	8005b00 <HAL_RCC_OscConfig+0x280>
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a02      	ldr	r2, [pc, #8]	; (8005af0 <HAL_RCC_OscConfig+0x270>)
 8005ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e014      	b.n	8005b18 <HAL_RCC_OscConfig+0x298>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
 8005af4:	08006bfc 	.word	0x08006bfc
 8005af8:	20000010 	.word	0x20000010
 8005afc:	20000014 	.word	0x20000014
 8005b00:	4ba0      	ldr	r3, [pc, #640]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a9f      	ldr	r2, [pc, #636]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b9d      	ldr	r3, [pc, #628]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a9c      	ldr	r2, [pc, #624]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7ff fb5e 	bl	80051e0 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b28:	f7ff fb5a 	bl	80051e0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e276      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b3a:	4b92      	ldr	r3, [pc, #584]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x2a8>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7ff fb4a 	bl	80051e0 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b50:	f7ff fb46 	bl	80051e0 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e262      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b62:	4b88      	ldr	r3, [pc, #544]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x2d0>
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d060      	beq.n	8005c40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d005      	beq.n	8005b90 <HAL_RCC_OscConfig+0x310>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	2b0c      	cmp	r3, #12
 8005b88:	d119      	bne.n	8005bbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d116      	bne.n	8005bbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b90:	4b7c      	ldr	r3, [pc, #496]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x328>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e23f      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba8:	4b76      	ldr	r3, [pc, #472]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	061b      	lsls	r3, r3, #24
 8005bb6:	4973      	ldr	r1, [pc, #460]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bbc:	e040      	b.n	8005c40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d023      	beq.n	8005c0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc6:	4b6f      	ldr	r3, [pc, #444]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a6e      	ldr	r2, [pc, #440]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd2:	f7ff fb05 	bl	80051e0 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bda:	f7ff fb01 	bl	80051e0 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e21d      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bec:	4b65      	ldr	r3, [pc, #404]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf8:	4b62      	ldr	r3, [pc, #392]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	061b      	lsls	r3, r3, #24
 8005c06:	495f      	ldr	r1, [pc, #380]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	604b      	str	r3, [r1, #4]
 8005c0c:	e018      	b.n	8005c40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c0e:	4b5d      	ldr	r3, [pc, #372]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a5c      	ldr	r2, [pc, #368]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7ff fae1 	bl	80051e0 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c22:	f7ff fadd 	bl	80051e0 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e1f9      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c34:	4b53      	ldr	r3, [pc, #332]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f0      	bne.n	8005c22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d03c      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01c      	beq.n	8005c8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c54:	4b4b      	ldr	r3, [pc, #300]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5a:	4a4a      	ldr	r2, [pc, #296]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7ff fabc 	bl	80051e0 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c6c:	f7ff fab8 	bl	80051e0 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e1d4      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c7e:	4b41      	ldr	r3, [pc, #260]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0ef      	beq.n	8005c6c <HAL_RCC_OscConfig+0x3ec>
 8005c8c:	e01b      	b.n	8005cc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c8e:	4b3d      	ldr	r3, [pc, #244]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c94:	4a3b      	ldr	r2, [pc, #236]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9e:	f7ff fa9f 	bl	80051e0 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca6:	f7ff fa9b 	bl	80051e0 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e1b7      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cb8:	4b32      	ldr	r3, [pc, #200]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ef      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80a6 	beq.w	8005e20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10d      	bne.n	8005d00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ce4:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	4a26      	ldr	r2, [pc, #152]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cee:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf0:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d00:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <HAL_RCC_OscConfig+0x508>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d118      	bne.n	8005d3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <HAL_RCC_OscConfig+0x508>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1d      	ldr	r2, [pc, #116]	; (8005d88 <HAL_RCC_OscConfig+0x508>)
 8005d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d18:	f7ff fa62 	bl	80051e0 <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1e:	e008      	b.n	8005d32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d20:	f7ff fa5e 	bl	80051e0 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e17a      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <HAL_RCC_OscConfig+0x508>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0f0      	beq.n	8005d20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d108      	bne.n	8005d58 <HAL_RCC_OscConfig+0x4d8>
 8005d46:	4b0f      	ldr	r3, [pc, #60]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d56:	e029      	b.n	8005dac <HAL_RCC_OscConfig+0x52c>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d115      	bne.n	8005d8c <HAL_RCC_OscConfig+0x50c>
 8005d60:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005d68:	f043 0304 	orr.w	r3, r3, #4
 8005d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	4a03      	ldr	r2, [pc, #12]	; (8005d84 <HAL_RCC_OscConfig+0x504>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d80:	e014      	b.n	8005dac <HAL_RCC_OscConfig+0x52c>
 8005d82:	bf00      	nop
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	4b9c      	ldr	r3, [pc, #624]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d92:	4a9b      	ldr	r2, [pc, #620]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d9c:	4b98      	ldr	r3, [pc, #608]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da2:	4a97      	ldr	r2, [pc, #604]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d016      	beq.n	8005de2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7ff fa14 	bl	80051e0 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7ff fa10 	bl	80051e0 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e12a      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd2:	4b8b      	ldr	r3, [pc, #556]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ed      	beq.n	8005dbc <HAL_RCC_OscConfig+0x53c>
 8005de0:	e015      	b.n	8005e0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de2:	f7ff f9fd 	bl	80051e0 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7ff f9f9 	bl	80051e0 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e113      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e00:	4b7f      	ldr	r3, [pc, #508]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1ed      	bne.n	8005dea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e0e:	7ffb      	ldrb	r3, [r7, #31]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d105      	bne.n	8005e20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e14:	4b7a      	ldr	r3, [pc, #488]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e18:	4a79      	ldr	r2, [pc, #484]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80fe 	beq.w	8006026 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	f040 80d0 	bne.w	8005fd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e34:	4b72      	ldr	r3, [pc, #456]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f003 0203 	and.w	r2, r3, #3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d130      	bne.n	8005eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	3b01      	subs	r3, #1
 8005e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d127      	bne.n	8005eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d11f      	bne.n	8005eaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e74:	2a07      	cmp	r2, #7
 8005e76:	bf14      	ite	ne
 8005e78:	2201      	movne	r2, #1
 8005e7a:	2200      	moveq	r2, #0
 8005e7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d113      	bne.n	8005eaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d109      	bne.n	8005eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d06e      	beq.n	8005f88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d069      	beq.n	8005f84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005eb0:	4b53      	ldr	r3, [pc, #332]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ebc:	4b50      	ldr	r3, [pc, #320]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0ad      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a4b      	ldr	r2, [pc, #300]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ed8:	f7ff f982 	bl	80051e0 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7ff f97e 	bl	80051e0 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e09a      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef2:	4b43      	ldr	r3, [pc, #268]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005efe:	4b40      	ldr	r3, [pc, #256]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	4b40      	ldr	r3, [pc, #256]	; (8006004 <HAL_RCC_OscConfig+0x784>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f0e:	3a01      	subs	r2, #1
 8005f10:	0112      	lsls	r2, r2, #4
 8005f12:	4311      	orrs	r1, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f18:	0212      	lsls	r2, r2, #8
 8005f1a:	4311      	orrs	r1, r2
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f20:	0852      	lsrs	r2, r2, #1
 8005f22:	3a01      	subs	r2, #1
 8005f24:	0552      	lsls	r2, r2, #21
 8005f26:	4311      	orrs	r1, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f2c:	0852      	lsrs	r2, r2, #1
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	0652      	lsls	r2, r2, #25
 8005f32:	4311      	orrs	r1, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f38:	0912      	lsrs	r2, r2, #4
 8005f3a:	0452      	lsls	r2, r2, #17
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	4930      	ldr	r1, [pc, #192]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f44:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2d      	ldr	r2, [pc, #180]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f50:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f5c:	f7ff f940 	bl	80051e0 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f64:	f7ff f93c 	bl	80051e0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e058      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f76:	4b22      	ldr	r3, [pc, #136]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f82:	e050      	b.n	8006026 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e04f      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d148      	bne.n	8006026 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f94:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a19      	ldr	r2, [pc, #100]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fa0:	4b17      	ldr	r3, [pc, #92]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005faa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fac:	f7ff f918 	bl	80051e0 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7ff f914 	bl	80051e0 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e030      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x734>
 8005fd2:	e028      	b.n	8006026 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d023      	beq.n	8006022 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a08      	ldr	r2, [pc, #32]	; (8006000 <HAL_RCC_OscConfig+0x780>)
 8005fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7ff f8fb 	bl	80051e0 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fec:	e00c      	b.n	8006008 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fee:	f7ff f8f7 	bl	80051e0 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d905      	bls.n	8006008 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e013      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
 8006000:	40021000 	.word	0x40021000
 8006004:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <HAL_RCC_OscConfig+0x7b0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ec      	bne.n	8005fee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <HAL_RCC_OscConfig+0x7b0>)
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	4905      	ldr	r1, [pc, #20]	; (8006030 <HAL_RCC_OscConfig+0x7b0>)
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCC_OscConfig+0x7b4>)
 800601c:	4013      	ands	r3, r2
 800601e:	60cb      	str	r3, [r1, #12]
 8006020:	e001      	b.n	8006026 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40021000 	.word	0x40021000
 8006034:	feeefffc 	.word	0xfeeefffc

08006038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0e7      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800604c:	4b75      	ldr	r3, [pc, #468]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d910      	bls.n	800607c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b72      	ldr	r3, [pc, #456]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 0207 	bic.w	r2, r3, #7
 8006062:	4970      	ldr	r1, [pc, #448]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800606a:	4b6e      	ldr	r3, [pc, #440]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0cf      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d010      	beq.n	80060aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	4b66      	ldr	r3, [pc, #408]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006094:	429a      	cmp	r2, r3
 8006096:	d908      	bls.n	80060aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006098:	4b63      	ldr	r3, [pc, #396]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4960      	ldr	r1, [pc, #384]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d04c      	beq.n	8006150 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d107      	bne.n	80060ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060be:	4b5a      	ldr	r3, [pc, #360]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d121      	bne.n	800610e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e0a6      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d107      	bne.n	80060e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060d6:	4b54      	ldr	r3, [pc, #336]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d115      	bne.n	800610e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e09a      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d107      	bne.n	80060fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80060ee:	4b4e      	ldr	r3, [pc, #312]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e08e      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fe:	4b4a      	ldr	r3, [pc, #296]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e086      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800610e:	4b46      	ldr	r3, [pc, #280]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f023 0203 	bic.w	r2, r3, #3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4943      	ldr	r1, [pc, #268]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 800611c:	4313      	orrs	r3, r2
 800611e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006120:	f7ff f85e 	bl	80051e0 <HAL_GetTick>
 8006124:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006126:	e00a      	b.n	800613e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006128:	f7ff f85a 	bl	80051e0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f241 3288 	movw	r2, #5000	; 0x1388
 8006136:	4293      	cmp	r3, r2
 8006138:	d901      	bls.n	800613e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e06e      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613e:	4b3a      	ldr	r3, [pc, #232]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 020c 	and.w	r2, r3, #12
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	429a      	cmp	r2, r3
 800614e:	d1eb      	bne.n	8006128 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	4b31      	ldr	r3, [pc, #196]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006168:	429a      	cmp	r2, r3
 800616a:	d208      	bcs.n	800617e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800616c:	4b2e      	ldr	r3, [pc, #184]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	492b      	ldr	r1, [pc, #172]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 800617a:	4313      	orrs	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d210      	bcs.n	80061ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 0207 	bic.w	r2, r3, #7
 8006194:	4923      	ldr	r1, [pc, #140]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619c:	4b21      	ldr	r3, [pc, #132]	; (8006224 <HAL_RCC_ClockConfig+0x1ec>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d001      	beq.n	80061ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e036      	b.n	800621c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	4918      	ldr	r1, [pc, #96]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0308 	and.w	r3, r3, #8
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	4910      	ldr	r1, [pc, #64]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061ec:	f000 f824 	bl	8006238 <HAL_RCC_GetSysClockFreq>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <HAL_RCC_ClockConfig+0x1f0>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	490b      	ldr	r1, [pc, #44]	; (800622c <HAL_RCC_ClockConfig+0x1f4>)
 80061fe:	5ccb      	ldrb	r3, [r1, r3]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <HAL_RCC_ClockConfig+0x1f8>)
 800620a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <HAL_RCC_ClockConfig+0x1fc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe febf 	bl	8004f94 <HAL_InitTick>
 8006216:	4603      	mov	r3, r0
 8006218:	72fb      	strb	r3, [r7, #11]

  return status;
 800621a:	7afb      	ldrb	r3, [r7, #11]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40022000 	.word	0x40022000
 8006228:	40021000 	.word	0x40021000
 800622c:	08006bfc 	.word	0x08006bfc
 8006230:	20000010 	.word	0x20000010
 8006234:	20000014 	.word	0x20000014

08006238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
 8006242:	2300      	movs	r3, #0
 8006244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006246:	4b3e      	ldr	r3, [pc, #248]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 030c 	and.w	r3, r3, #12
 800624e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006250:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x34>
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d121      	bne.n	80062aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d11e      	bne.n	80062aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800626c:	4b34      	ldr	r3, [pc, #208]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d107      	bne.n	8006288 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006278:	4b31      	ldr	r3, [pc, #196]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 800627a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	e005      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006294:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10d      	bne.n	80062c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062a8:	e00a      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d102      	bne.n	80062b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062b0:	4b25      	ldr	r3, [pc, #148]	; (8006348 <HAL_RCC_GetSysClockFreq+0x110>)
 80062b2:	61bb      	str	r3, [r7, #24]
 80062b4:	e004      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d101      	bne.n	80062c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062bc:	4b23      	ldr	r3, [pc, #140]	; (800634c <HAL_RCC_GetSysClockFreq+0x114>)
 80062be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b0c      	cmp	r3, #12
 80062c4:	d134      	bne.n	8006330 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062c6:	4b1e      	ldr	r3, [pc, #120]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d003      	beq.n	80062de <HAL_RCC_GetSysClockFreq+0xa6>
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d003      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0xac>
 80062dc:	e005      	b.n	80062ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80062de:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <HAL_RCC_GetSysClockFreq+0x110>)
 80062e0:	617b      	str	r3, [r7, #20]
      break;
 80062e2:	e005      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80062e4:	4b19      	ldr	r3, [pc, #100]	; (800634c <HAL_RCC_GetSysClockFreq+0x114>)
 80062e6:	617b      	str	r3, [r7, #20]
      break;
 80062e8:	e002      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	617b      	str	r3, [r7, #20]
      break;
 80062ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062f0:	4b13      	ldr	r3, [pc, #76]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	091b      	lsrs	r3, r3, #4
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	3301      	adds	r3, #1
 80062fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	fb03 f202 	mul.w	r2, r3, r2
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	fbb2 f3f3 	udiv	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006316:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <HAL_RCC_GetSysClockFreq+0x108>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	0e5b      	lsrs	r3, r3, #25
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	3301      	adds	r3, #1
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	fbb2 f3f3 	udiv	r3, r2, r3
 800632e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006330:	69bb      	ldr	r3, [r7, #24]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3724      	adds	r7, #36	; 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40021000 	.word	0x40021000
 8006344:	08006c14 	.word	0x08006c14
 8006348:	00f42400 	.word	0x00f42400
 800634c:	007a1200 	.word	0x007a1200

08006350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_RCC_GetHCLKFreq+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010

08006368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800636c:	f7ff fff0 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	4904      	ldr	r1, [pc, #16]	; (8006390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40021000 	.word	0x40021000
 8006390:	08006c0c 	.word	0x08006c0c

08006394 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	220f      	movs	r2, #15
 80063a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80063a4:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_RCC_GetClockConfig+0x5c>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0203 	and.w	r2, r3, #3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80063b0:	4b0f      	ldr	r3, [pc, #60]	; (80063f0 <HAL_RCC_GetClockConfig+0x5c>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <HAL_RCC_GetClockConfig+0x5c>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80063c8:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCC_GetClockConfig+0x5c>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	08db      	lsrs	r3, r3, #3
 80063ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80063d6:	4b07      	ldr	r3, [pc, #28]	; (80063f4 <HAL_RCC_GetClockConfig+0x60>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0207 	and.w	r2, r3, #7
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	601a      	str	r2, [r3, #0]
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40021000 	.word	0x40021000
 80063f4:	40022000 	.word	0x40022000

080063f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006404:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006410:	f7ff f9d2 	bl	80057b8 <HAL_PWREx_GetVoltageRange>
 8006414:	6178      	str	r0, [r7, #20]
 8006416:	e014      	b.n	8006442 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006418:	4b25      	ldr	r3, [pc, #148]	; (80064b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800641a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641c:	4a24      	ldr	r2, [pc, #144]	; (80064b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800641e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006422:	6593      	str	r3, [r2, #88]	; 0x58
 8006424:	4b22      	ldr	r3, [pc, #136]	; (80064b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006430:	f7ff f9c2 	bl	80057b8 <HAL_PWREx_GetVoltageRange>
 8006434:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006436:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643a:	4a1d      	ldr	r2, [pc, #116]	; (80064b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800643c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006440:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d10b      	bne.n	8006462 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d919      	bls.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2ba0      	cmp	r3, #160	; 0xa0
 8006454:	d902      	bls.n	800645c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006456:	2302      	movs	r3, #2
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	e013      	b.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800645c:	2301      	movs	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	e010      	b.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d902      	bls.n	800646e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006468:	2303      	movs	r3, #3
 800646a:	613b      	str	r3, [r7, #16]
 800646c:	e00a      	b.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d102      	bne.n	800647a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006474:	2302      	movs	r3, #2
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	e004      	b.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b70      	cmp	r3, #112	; 0x70
 800647e:	d101      	bne.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006480:	2301      	movs	r3, #1
 8006482:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f023 0207 	bic.w	r2, r3, #7
 800648c:	4909      	ldr	r1, [pc, #36]	; (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d001      	beq.n	80064a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40021000 	.word	0x40021000
 80064b4:	40022000 	.word	0x40022000

080064b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e049      	b.n	800655e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f841 	bl	8006566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 f9da 	bl	80068b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d001      	beq.n	8006594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e04f      	b.n	8006634 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a23      	ldr	r2, [pc, #140]	; (8006640 <HAL_TIM_Base_Start_IT+0xc4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01d      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x76>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065be:	d018      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x76>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <HAL_TIM_Base_Start_IT+0xc8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x76>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <HAL_TIM_Base_Start_IT+0xcc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x76>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <HAL_TIM_Base_Start_IT+0xd0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x76>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <HAL_TIM_Base_Start_IT+0xd4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0x76>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a19      	ldr	r2, [pc, #100]	; (8006654 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d115      	bne.n	800661e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	4b17      	ldr	r3, [pc, #92]	; (8006658 <HAL_TIM_Base_Start_IT+0xdc>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b06      	cmp	r3, #6
 8006602:	d015      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0xb4>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660a:	d011      	beq.n	8006630 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	e008      	b.n	8006630 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	e000      	b.n	8006632 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006630:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40013400 	.word	0x40013400
 8006654:	40014000 	.word	0x40014000
 8006658:	00010007 	.word	0x00010007

0800665c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d020      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0202 	mvn.w	r2, #2
 8006690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f8e4 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f8d6 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f8e7 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01b      	beq.n	800670c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0204 	mvn.w	r2, #4
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f8be 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f8b0 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8c1 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d020      	beq.n	8006758 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0208 	mvn.w	r2, #8
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f898 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f88a 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f89b 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0210 	mvn.w	r2, #16
 8006774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f872 	bl	8006874 <HAL_TIM_IC_CaptureCallback>
 8006790:	e005      	b.n	800679e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f864 	bl	8006860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f875 	bl	8006888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d007      	beq.n	80067c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0201 	mvn.w	r2, #1
 80067c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fe fbaa 	bl	8004f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00c      	beq.n	80067ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f906 	bl	80069f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00c      	beq.n	8006810 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f8fe 	bl	8006a0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800682c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f834 	bl	800689c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00c      	beq.n	8006858 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0220 	mvn.w	r2, #32
 8006850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8c6 	bl	80069e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a40      	ldr	r2, [pc, #256]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ce:	d00f      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3d      	ldr	r2, [pc, #244]	; (80069c8 <TIM_Base_SetConfig+0x118>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d00b      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3c      	ldr	r2, [pc, #240]	; (80069cc <TIM_Base_SetConfig+0x11c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d007      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3b      	ldr	r2, [pc, #236]	; (80069d0 <TIM_Base_SetConfig+0x120>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3a      	ldr	r2, [pc, #232]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d108      	bne.n	8006902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2f      	ldr	r2, [pc, #188]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d01b      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <TIM_Base_SetConfig+0x118>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d017      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <TIM_Base_SetConfig+0x11c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <TIM_Base_SetConfig+0x120>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a29      	ldr	r2, [pc, #164]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a28      	ldr	r2, [pc, #160]	; (80069d8 <TIM_Base_SetConfig+0x128>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a27      	ldr	r2, [pc, #156]	; (80069dc <TIM_Base_SetConfig+0x12c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <TIM_Base_SetConfig+0x130>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <TIM_Base_SetConfig+0x114>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00f      	beq.n	80069a8 <TIM_Base_SetConfig+0xf8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a12      	ldr	r2, [pc, #72]	; (80069d4 <TIM_Base_SetConfig+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00b      	beq.n	80069a8 <TIM_Base_SetConfig+0xf8>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <TIM_Base_SetConfig+0x128>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d007      	beq.n	80069a8 <TIM_Base_SetConfig+0xf8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a10      	ldr	r2, [pc, #64]	; (80069dc <TIM_Base_SetConfig+0x12c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_Base_SetConfig+0xf8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <TIM_Base_SetConfig+0x130>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	615a      	str	r2, [r3, #20]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40013400 	.word	0x40013400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800

080069e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <memcmp>:
 8006a20:	b510      	push	{r4, lr}
 8006a22:	3901      	subs	r1, #1
 8006a24:	4402      	add	r2, r0
 8006a26:	4290      	cmp	r0, r2
 8006a28:	d101      	bne.n	8006a2e <memcmp+0xe>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e005      	b.n	8006a3a <memcmp+0x1a>
 8006a2e:	7803      	ldrb	r3, [r0, #0]
 8006a30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d001      	beq.n	8006a3c <memcmp+0x1c>
 8006a38:	1b18      	subs	r0, r3, r4
 8006a3a:	bd10      	pop	{r4, pc}
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	e7f2      	b.n	8006a26 <memcmp+0x6>

08006a40 <memset>:
 8006a40:	4402      	add	r2, r0
 8006a42:	4603      	mov	r3, r0
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d100      	bne.n	8006a4a <memset+0xa>
 8006a48:	4770      	bx	lr
 8006a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4e:	e7f9      	b.n	8006a44 <memset+0x4>

08006a50 <__libc_init_array>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	4d0d      	ldr	r5, [pc, #52]	; (8006a88 <__libc_init_array+0x38>)
 8006a54:	4c0d      	ldr	r4, [pc, #52]	; (8006a8c <__libc_init_array+0x3c>)
 8006a56:	1b64      	subs	r4, r4, r5
 8006a58:	10a4      	asrs	r4, r4, #2
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	42a6      	cmp	r6, r4
 8006a5e:	d109      	bne.n	8006a74 <__libc_init_array+0x24>
 8006a60:	4d0b      	ldr	r5, [pc, #44]	; (8006a90 <__libc_init_array+0x40>)
 8006a62:	4c0c      	ldr	r4, [pc, #48]	; (8006a94 <__libc_init_array+0x44>)
 8006a64:	f000 f826 	bl	8006ab4 <_init>
 8006a68:	1b64      	subs	r4, r4, r5
 8006a6a:	10a4      	asrs	r4, r4, #2
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	42a6      	cmp	r6, r4
 8006a70:	d105      	bne.n	8006a7e <__libc_init_array+0x2e>
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a78:	4798      	blx	r3
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	e7ee      	b.n	8006a5c <__libc_init_array+0xc>
 8006a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a82:	4798      	blx	r3
 8006a84:	3601      	adds	r6, #1
 8006a86:	e7f2      	b.n	8006a6e <__libc_init_array+0x1e>
 8006a88:	08006c44 	.word	0x08006c44
 8006a8c:	08006c44 	.word	0x08006c44
 8006a90:	08006c44 	.word	0x08006c44
 8006a94:	08006c48 	.word	0x08006c48

08006a98 <memcpy>:
 8006a98:	440a      	add	r2, r1
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006aa0:	d100      	bne.n	8006aa4 <memcpy+0xc>
 8006aa2:	4770      	bx	lr
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aae:	4291      	cmp	r1, r2
 8006ab0:	d1f9      	bne.n	8006aa6 <memcpy+0xe>
 8006ab2:	bd10      	pop	{r4, pc}

08006ab4 <_init>:
 8006ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab6:	bf00      	nop
 8006ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aba:	bc08      	pop	{r3}
 8006abc:	469e      	mov	lr, r3
 8006abe:	4770      	bx	lr

08006ac0 <_fini>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	bf00      	nop
 8006ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac6:	bc08      	pop	{r3}
 8006ac8:	469e      	mov	lr, r3
 8006aca:	4770      	bx	lr
