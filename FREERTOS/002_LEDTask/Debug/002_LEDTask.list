
002_LEDTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ea8  08005ea8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ea8  08005ea8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000581c  2000001c  08005ecc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005838  08005ecc  00025838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139ca  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d61  00000000  00000000  00033a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  000367c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f32  00000000  00000000  00037b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261f6  00000000  00000000  00038aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cf8  00000000  00000000  0005ecb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb321  00000000  00000000  000749a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005238  00000000  00000000  0016fccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a6  00000000  00000000  00174f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d10 	.word	0x08005d10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08005d10 	.word	0x08005d10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20004214 	.word	0x20004214

08000264 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f103 0208 	add.w	r2, r3, #8
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f04f 32ff 	mov.w	r2, #4294967295
 800027c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f103 0208 	add.w	r2, r3, #8
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f103 0208 	add.w	r2, r3, #8
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002be:	b480      	push	{r7}
 80002c0:	b085      	sub	sp, #20
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002d4:	d103      	bne.n	80002de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e00c      	b.n	80002f8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	3308      	adds	r3, #8
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	e002      	b.n	80002ec <vListInsert+0x2e>
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d2f6      	bcs.n	80002e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	685a      	ldr	r2, [r3, #4]
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	1c5a      	adds	r2, r3, #1
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	3714      	adds	r7, #20
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	691b      	ldr	r3, [r3, #16]
 800033c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	685b      	ldr	r3, [r3, #4]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	6892      	ldr	r2, [r2, #8]
 8000346:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	6852      	ldr	r2, [r2, #4]
 8000350:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	d103      	bne.n	8000364 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	689a      	ldr	r2, [r3, #8]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000384:	b580      	push	{r7, lr}
 8000386:	b08c      	sub	sp, #48	; 0x30
 8000388:	af04      	add	r7, sp, #16
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	603b      	str	r3, [r7, #0]
 8000390:	4613      	mov	r3, r2
 8000392:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000394:	88fb      	ldrh	r3, [r7, #6]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4618      	mov	r0, r3
 800039a:	f001 f8cf 	bl	800153c <pvPortMalloc>
 800039e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d013      	beq.n	80003ce <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80003a6:	2068      	movs	r0, #104	; 0x68
 80003a8:	f001 f8c8 	bl	800153c <pvPortMalloc>
 80003ac:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80003ae:	69fb      	ldr	r3, [r7, #28]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d008      	beq.n	80003c6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80003b4:	2268      	movs	r2, #104	; 0x68
 80003b6:	2100      	movs	r1, #0
 80003b8:	69f8      	ldr	r0, [r7, #28]
 80003ba:	f005 fc6f 	bl	8005c9c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	697a      	ldr	r2, [r7, #20]
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
 80003c4:	e005      	b.n	80003d2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80003c6:	6978      	ldr	r0, [r7, #20]
 80003c8:	f001 f972 	bl	80016b0 <vPortFree>
 80003cc:	e001      	b.n	80003d2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d013      	beq.n	8000400 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80003d8:	88fa      	ldrh	r2, [r7, #6]
 80003da:	2300      	movs	r3, #0
 80003dc:	9303      	str	r3, [sp, #12]
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	9302      	str	r3, [sp, #8]
 80003e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	68b9      	ldr	r1, [r7, #8]
 80003ee:	68f8      	ldr	r0, [r7, #12]
 80003f0:	f000 f80e 	bl	8000410 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80003f4:	69f8      	ldr	r0, [r7, #28]
 80003f6:	f000 f899 	bl	800052c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80003fa:	2301      	movs	r3, #1
 80003fc:	61bb      	str	r3, [r7, #24]
 80003fe:	e002      	b.n	8000406 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000400:	f04f 33ff 	mov.w	r3, #4294967295
 8000404:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000406:	69bb      	ldr	r3, [r7, #24]
    }
 8000408:	4618      	mov	r0, r3
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
 800041c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800041e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000420:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	461a      	mov	r2, r3
 8000428:	21a5      	movs	r1, #165	; 0xa5
 800042a:	f005 fc37 	bl	8005c9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000438:	3b01      	subs	r3, #1
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	f023 0307 	bic.w	r3, r3, #7
 8000446:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000448:	69bb      	ldr	r3, [r7, #24]
 800044a:	f003 0307 	and.w	r3, r3, #7
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00a      	beq.n	8000468 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000456:	f383 8811 	msr	BASEPRI, r3
 800045a:	f3bf 8f6f 	isb	sy
 800045e:	f3bf 8f4f 	dsb	sy
 8000462:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000464:	bf00      	nop
 8000466:	e7fe      	b.n	8000466 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d01e      	beq.n	80004ac <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
 8000472:	e012      	b.n	800049a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	4413      	add	r3, r2
 800047a:	7819      	ldrb	r1, [r3, #0]
 800047c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	4413      	add	r3, r2
 8000482:	3334      	adds	r3, #52	; 0x34
 8000484:	460a      	mov	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	4413      	add	r3, r2
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d006      	beq.n	80004a2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	3301      	adds	r3, #1
 8000498:	61fb      	str	r3, [r7, #28]
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	2b09      	cmp	r3, #9
 800049e:	d9e9      	bls.n	8000474 <prvInitialiseNewTask+0x64>
 80004a0:	e000      	b.n	80004a4 <prvInitialiseNewTask+0x94>
            {
                break;
 80004a2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80004a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004a6:	2200      	movs	r2, #0
 80004a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80004ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	d90a      	bls.n	80004c8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80004b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004b6:	f383 8811 	msr	BASEPRI, r3
 80004ba:	f3bf 8f6f 	isb	sy
 80004be:	f3bf 8f4f 	dsb	sy
 80004c2:	613b      	str	r3, [r7, #16]
    }
 80004c4:	bf00      	nop
 80004c6:	e7fe      	b.n	80004c6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80004c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d901      	bls.n	80004d2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80004ce:	2304      	movs	r3, #4
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80004d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80004d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80004dc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80004de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004e0:	3304      	adds	r3, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fede 	bl	80002a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80004e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004ea:	3318      	adds	r3, #24
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fed9 	bl	80002a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80004f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80004f6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80004f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004fa:	f1c3 0205 	rsb	r2, r3, #5
 80004fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000500:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000506:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	68f9      	ldr	r1, [r7, #12]
 800050c:	69b8      	ldr	r0, [r7, #24]
 800050e:	f000 fd3d 	bl	8000f8c <pxPortInitialiseStack>
 8000512:	4602      	mov	r2, r0
 8000514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000516:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000522:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000534:	f000 fed6 	bl	80012e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000538:	4b49      	ldr	r3, [pc, #292]	; (8000660 <prvAddNewTaskToReadyList+0x134>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	4a48      	ldr	r2, [pc, #288]	; (8000660 <prvAddNewTaskToReadyList+0x134>)
 8000540:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000542:	4b48      	ldr	r3, [pc, #288]	; (8000664 <prvAddNewTaskToReadyList+0x138>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d109      	bne.n	800055e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800054a:	4a46      	ldr	r2, [pc, #280]	; (8000664 <prvAddNewTaskToReadyList+0x138>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000550:	4b43      	ldr	r3, [pc, #268]	; (8000660 <prvAddNewTaskToReadyList+0x134>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d110      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000558:	f000 fbc2 	bl	8000ce0 <prvInitialiseTaskLists>
 800055c:	e00d      	b.n	800057a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800055e:	4b42      	ldr	r3, [pc, #264]	; (8000668 <prvAddNewTaskToReadyList+0x13c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d109      	bne.n	800057a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000566:	4b3f      	ldr	r3, [pc, #252]	; (8000664 <prvAddNewTaskToReadyList+0x138>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000570:	429a      	cmp	r2, r3
 8000572:	d802      	bhi.n	800057a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000574:	4a3b      	ldr	r2, [pc, #236]	; (8000664 <prvAddNewTaskToReadyList+0x138>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <prvAddNewTaskToReadyList+0x140>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	4a3a      	ldr	r2, [pc, #232]	; (800066c <prvAddNewTaskToReadyList+0x140>)
 8000582:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000584:	4b39      	ldr	r3, [pc, #228]	; (800066c <prvAddNewTaskToReadyList+0x140>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <prvAddNewTaskToReadyList+0x94>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fa9b 	bl	8003ad0 <SEGGER_SYSVIEW_OnTaskCreate>
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	461d      	mov	r5, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	461c      	mov	r4, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	1ae3      	subs	r3, r4, r3
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	462b      	mov	r3, r5
 80005bc:	f001 fa50 	bl	8001a60 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fb08 	bl	8003bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	2201      	movs	r2, #1
 80005ce:	409a      	lsls	r2, r3
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <prvAddNewTaskToReadyList+0x144>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	4a26      	ldr	r2, [pc, #152]	; (8000670 <prvAddNewTaskToReadyList+0x144>)
 80005d8:	6013      	str	r3, [r2, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005de:	4925      	ldr	r1, [pc, #148]	; (8000674 <prvAddNewTaskToReadyList+0x148>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	3304      	adds	r3, #4
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	3204      	adds	r2, #4
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	1d1a      	adds	r2, r3, #4
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4a15      	ldr	r2, [pc, #84]	; (8000674 <prvAddNewTaskToReadyList+0x148>)
 800061e:	441a      	add	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	615a      	str	r2, [r3, #20]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000628:	4912      	ldr	r1, [pc, #72]	; (8000674 <prvAddNewTaskToReadyList+0x148>)
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1c59      	adds	r1, r3, #1
 8000638:	480e      	ldr	r0, [pc, #56]	; (8000674 <prvAddNewTaskToReadyList+0x148>)
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4403      	add	r3, r0
 8000644:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000646:	f000 fe7d 	bl	8001344 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <prvAddNewTaskToReadyList+0x13c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <prvAddNewTaskToReadyList+0x138>)
 8000654:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bdb0      	pop	{r4, r5, r7, pc}
 800065e:	bf00      	nop
 8000660:	20000110 	.word	0x20000110
 8000664:	20000038 	.word	0x20000038
 8000668:	2000011c 	.word	0x2000011c
 800066c:	2000012c 	.word	0x2000012c
 8000670:	20000118 	.word	0x20000118
 8000674:	2000003c 	.word	0x2000003c

08000678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d01b      	beq.n	80006c2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <vTaskDelay+0x68>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00a      	beq.n	80006a8 <vTaskDelay+0x30>
        __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	60bb      	str	r3, [r7, #8]
    }
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80006a8:	f000 f87a 	bl	80007a0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	2023      	movs	r0, #35	; 0x23
 80006b0:	f002 fe18 	bl	80032e4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80006b4:	2100      	movs	r1, #0
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 fbe4 	bl	8000e84 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80006bc:	f000 f87e 	bl	80007bc <xTaskResumeAll>
 80006c0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d107      	bne.n	80006d8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <vTaskDelay+0x6c>)
 80006ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000138 	.word	0x20000138
 80006e4:	e000ed04 	.word	0xe000ed04

080006e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <vTaskStartScheduler+0x98>)
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2300      	movs	r3, #0
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fc:	4921      	ldr	r1, [pc, #132]	; (8000784 <vTaskStartScheduler+0x9c>)
 80006fe:	4822      	ldr	r0, [pc, #136]	; (8000788 <vTaskStartScheduler+0xa0>)
 8000700:	f7ff fe40 	bl	8000384 <xTaskCreate>
 8000704:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d124      	bne.n	8000756 <vTaskStartScheduler+0x6e>
        __asm volatile
 800070c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000710:	f383 8811 	msr	BASEPRI, r3
 8000714:	f3bf 8f6f 	isb	sy
 8000718:	f3bf 8f4f 	dsb	sy
 800071c:	60bb      	str	r3, [r7, #8]
    }
 800071e:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <vTaskStartScheduler+0xa4>)
 8000722:	f04f 32ff 	mov.w	r2, #4294967295
 8000726:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <vTaskStartScheduler+0xa8>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <vTaskStartScheduler+0xac>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <vTaskStartScheduler+0xb0>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <vTaskStartScheduler+0x98>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	429a      	cmp	r2, r3
 800073e:	d102      	bne.n	8000746 <vTaskStartScheduler+0x5e>
 8000740:	f003 f9aa 	bl	8003a98 <SEGGER_SYSVIEW_OnIdle>
 8000744:	e004      	b.n	8000750 <vTaskStartScheduler+0x68>
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <vTaskStartScheduler+0xb0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fa02 	bl	8003b54 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000750:	f000 fca8 	bl	80010a4 <xPortStartScheduler>
 8000754:	e00e      	b.n	8000774 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800075c:	d10a      	bne.n	8000774 <vTaskStartScheduler+0x8c>
        __asm volatile
 800075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000762:	f383 8811 	msr	BASEPRI, r3
 8000766:	f3bf 8f6f 	isb	sy
 800076a:	f3bf 8f4f 	dsb	sy
 800076e:	607b      	str	r3, [r7, #4]
    }
 8000770:	bf00      	nop
 8000772:	e7fe      	b.n	8000772 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <vTaskStartScheduler+0xb4>)
 8000776:	681b      	ldr	r3, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000134 	.word	0x20000134
 8000784:	08005d28 	.word	0x08005d28
 8000788:	08000cbd 	.word	0x08000cbd
 800078c:	20000130 	.word	0x20000130
 8000790:	2000011c 	.word	0x2000011c
 8000794:	20000114 	.word	0x20000114
 8000798:	20000038 	.word	0x20000038
 800079c:	20000000 	.word	0x20000000

080007a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <vTaskSuspendAll+0x18>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <vTaskSuspendAll+0x18>)
 80007ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	20000138 	.word	0x20000138

080007bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80007ca:	4b6d      	ldr	r3, [pc, #436]	; (8000980 <xTaskResumeAll+0x1c4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d10a      	bne.n	80007e8 <xTaskResumeAll+0x2c>
        __asm volatile
 80007d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d6:	f383 8811 	msr	BASEPRI, r3
 80007da:	f3bf 8f6f 	isb	sy
 80007de:	f3bf 8f4f 	dsb	sy
 80007e2:	607b      	str	r3, [r7, #4]
    }
 80007e4:	bf00      	nop
 80007e6:	e7fe      	b.n	80007e6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80007e8:	f000 fd7c 	bl	80012e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80007ec:	4b64      	ldr	r3, [pc, #400]	; (8000980 <xTaskResumeAll+0x1c4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3b01      	subs	r3, #1
 80007f2:	4a63      	ldr	r2, [pc, #396]	; (8000980 <xTaskResumeAll+0x1c4>)
 80007f4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007f6:	4b62      	ldr	r3, [pc, #392]	; (8000980 <xTaskResumeAll+0x1c4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 80b8 	bne.w	8000970 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000800:	4b60      	ldr	r3, [pc, #384]	; (8000984 <xTaskResumeAll+0x1c8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	f000 80b3 	beq.w	8000970 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800080a:	e08e      	b.n	800092a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800080c:	4b5e      	ldr	r3, [pc, #376]	; (8000988 <xTaskResumeAll+0x1cc>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	69fa      	ldr	r2, [r7, #28]
 8000820:	6a12      	ldr	r2, [r2, #32]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	6a1b      	ldr	r3, [r3, #32]
 8000828:	69fa      	ldr	r2, [r7, #28]
 800082a:	69d2      	ldr	r2, [r2, #28]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	685a      	ldr	r2, [r3, #4]
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3318      	adds	r3, #24
 8000836:	429a      	cmp	r2, r3
 8000838:	d103      	bne.n	8000842 <xTaskResumeAll+0x86>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	6a1a      	ldr	r2, [r3, #32]
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	68d2      	ldr	r2, [r2, #12]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	68db      	ldr	r3, [r3, #12]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	6892      	ldr	r2, [r2, #8]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	3304      	adds	r3, #4
 8000874:	429a      	cmp	r2, r3
 8000876:	d103      	bne.n	8000880 <xTaskResumeAll+0xc4>
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1e5a      	subs	r2, r3, #1
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	4618      	mov	r0, r3
 8000894:	f003 f9a0 	bl	8003bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089c:	2201      	movs	r2, #1
 800089e:	409a      	lsls	r2, r3
 80008a0:	4b3a      	ldr	r3, [pc, #232]	; (800098c <xTaskResumeAll+0x1d0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	4a39      	ldr	r2, [pc, #228]	; (800098c <xTaskResumeAll+0x1d0>)
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ae:	4938      	ldr	r1, [pc, #224]	; (8000990 <xTaskResumeAll+0x1d4>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	3304      	adds	r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	3204      	adds	r2, #4
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	1d1a      	adds	r2, r3, #4
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008e4:	4613      	mov	r3, r2
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4a28      	ldr	r2, [pc, #160]	; (8000990 <xTaskResumeAll+0x1d4>)
 80008ee:	441a      	add	r2, r3
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f8:	4925      	ldr	r1, [pc, #148]	; (8000990 <xTaskResumeAll+0x1d4>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	440b      	add	r3, r1
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1c59      	adds	r1, r3, #1
 8000908:	4821      	ldr	r0, [pc, #132]	; (8000990 <xTaskResumeAll+0x1d4>)
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4403      	add	r3, r0
 8000914:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <xTaskResumeAll+0x1d8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000920:	429a      	cmp	r2, r3
 8000922:	d302      	bcc.n	800092a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <xTaskResumeAll+0x1dc>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <xTaskResumeAll+0x1cc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f47f af6c 	bne.w	800080c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800093a:	f000 fa87 	bl	8000e4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <xTaskResumeAll+0x1e0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d010      	beq.n	800096c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800094a:	f000 f83b 	bl	80009c4 <xTaskIncrementTick>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <xTaskResumeAll+0x1dc>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	3b01      	subs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f1      	bne.n	800094a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <xTaskResumeAll+0x1e0>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <xTaskResumeAll+0x1dc>)
 800096e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000970:	f000 fce8 	bl	8001344 <vPortExitCritical>

    return xAlreadyYielded;
 8000974:	697b      	ldr	r3, [r7, #20]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000138 	.word	0x20000138
 8000984:	20000110 	.word	0x20000110
 8000988:	200000d0 	.word	0x200000d0
 800098c:	20000118 	.word	0x20000118
 8000990:	2000003c 	.word	0x2000003c
 8000994:	20000038 	.word	0x20000038
 8000998:	20000124 	.word	0x20000124
 800099c:	20000120 	.word	0x20000120

080009a0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80009a6:	f000 fd89 	bl	80014bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <xTaskGetTickCountFromISR+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80009b4:	683b      	ldr	r3, [r7, #0]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000114 	.word	0x20000114

080009c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80009ce:	4b70      	ldr	r3, [pc, #448]	; (8000b90 <xTaskIncrementTick+0x1cc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f040 80d1 	bne.w	8000b7a <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80009d8:	4b6e      	ldr	r3, [pc, #440]	; (8000b94 <xTaskIncrementTick+0x1d0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80009e0:	4a6c      	ldr	r2, [pc, #432]	; (8000b94 <xTaskIncrementTick+0x1d0>)
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d120      	bne.n	8000a2e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80009ec:	4b6a      	ldr	r3, [pc, #424]	; (8000b98 <xTaskIncrementTick+0x1d4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00a      	beq.n	8000a0c <xTaskIncrementTick+0x48>
        __asm volatile
 80009f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fa:	f383 8811 	msr	BASEPRI, r3
 80009fe:	f3bf 8f6f 	isb	sy
 8000a02:	f3bf 8f4f 	dsb	sy
 8000a06:	607b      	str	r3, [r7, #4]
    }
 8000a08:	bf00      	nop
 8000a0a:	e7fe      	b.n	8000a0a <xTaskIncrementTick+0x46>
 8000a0c:	4b62      	ldr	r3, [pc, #392]	; (8000b98 <xTaskIncrementTick+0x1d4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	4b62      	ldr	r3, [pc, #392]	; (8000b9c <xTaskIncrementTick+0x1d8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a60      	ldr	r2, [pc, #384]	; (8000b98 <xTaskIncrementTick+0x1d4>)
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	4a60      	ldr	r2, [pc, #384]	; (8000b9c <xTaskIncrementTick+0x1d8>)
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b5f      	ldr	r3, [pc, #380]	; (8000ba0 <xTaskIncrementTick+0x1dc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a5e      	ldr	r2, [pc, #376]	; (8000ba0 <xTaskIncrementTick+0x1dc>)
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	f000 fa0f 	bl	8000e4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000a2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ba4 <xTaskIncrementTick+0x1e0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a3a      	ldr	r2, [r7, #32]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	f0c0 80a5 	bcc.w	8000b84 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a3a:	4b57      	ldr	r3, [pc, #348]	; (8000b98 <xTaskIncrementTick+0x1d4>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d104      	bne.n	8000a4e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a44:	4b57      	ldr	r3, [pc, #348]	; (8000ba4 <xTaskIncrementTick+0x1e0>)
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	601a      	str	r2, [r3, #0]
                    break;
 8000a4c:	e09a      	b.n	8000b84 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a4e:	4b52      	ldr	r3, [pc, #328]	; (8000b98 <xTaskIncrementTick+0x1d4>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000a5e:	6a3a      	ldr	r2, [r7, #32]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d203      	bcs.n	8000a6e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000a66:	4a4f      	ldr	r2, [pc, #316]	; (8000ba4 <xTaskIncrementTick+0x1e0>)
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000a6c:	e08a      	b.n	8000b84 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	68d2      	ldr	r2, [r2, #12]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	6892      	ldr	r2, [r2, #8]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	3304      	adds	r3, #4
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d103      	bne.n	8000a9c <xTaskIncrementTick+0xd8>
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1e5a      	subs	r2, r3, #1
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01e      	beq.n	8000af2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	69ba      	ldr	r2, [r7, #24]
 8000ac0:	6a12      	ldr	r2, [r2, #32]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6a1b      	ldr	r3, [r3, #32]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	69d2      	ldr	r2, [r2, #28]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	685a      	ldr	r2, [r3, #4]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	3318      	adds	r3, #24
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d103      	bne.n	8000ae2 <xTaskIncrementTick+0x11e>
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	6a1a      	ldr	r2, [r3, #32]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	1e5a      	subs	r2, r3, #1
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 f86f 	bl	8003bd8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afe:	2201      	movs	r2, #1
 8000b00:	409a      	lsls	r2, r3
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <xTaskIncrementTick+0x1e4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <xTaskIncrementTick+0x1e4>)
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	4926      	ldr	r1, [pc, #152]	; (8000bac <xTaskIncrementTick+0x1e8>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	689a      	ldr	r2, [r3, #8]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	3204      	adds	r2, #4
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	1d1a      	adds	r2, r3, #4
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <xTaskIncrementTick+0x1e8>)
 8000b50:	441a      	add	r2, r3
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b5a:	4914      	ldr	r1, [pc, #80]	; (8000bac <xTaskIncrementTick+0x1e8>)
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	440b      	add	r3, r1
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	1c59      	adds	r1, r3, #1
 8000b6a:	4810      	ldr	r0, [pc, #64]	; (8000bac <xTaskIncrementTick+0x1e8>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4403      	add	r3, r0
 8000b76:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b78:	e75f      	b.n	8000a3a <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <xTaskIncrementTick+0x1ec>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <xTaskIncrementTick+0x1ec>)
 8000b82:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000138 	.word	0x20000138
 8000b94:	20000114 	.word	0x20000114
 8000b98:	200000c8 	.word	0x200000c8
 8000b9c:	200000cc 	.word	0x200000cc
 8000ba0:	20000128 	.word	0x20000128
 8000ba4:	20000130 	.word	0x20000130
 8000ba8:	20000118 	.word	0x20000118
 8000bac:	2000003c 	.word	0x2000003c
 8000bb0:	20000120 	.word	0x20000120

08000bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000bba:	4b38      	ldr	r3, [pc, #224]	; (8000c9c <vTaskSwitchContext+0xe8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <vTaskSwitchContext+0xec>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000bc8:	e064      	b.n	8000c94 <vTaskSwitchContext+0xe0>
        xYieldPending = pdFALSE;
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <vTaskSwitchContext+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <vTaskSwitchContext+0xf0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <vTaskSwitchContext+0xf0>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <vTaskSwitchContext+0xf4>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d909      	bls.n	8000bf6 <vTaskSwitchContext+0x42>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <vTaskSwitchContext+0xf0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <vTaskSwitchContext+0xf4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1ad1      	subs	r1, r2, r3
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <vTaskSwitchContext+0xf8>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bf2:	440a      	add	r2, r1
 8000bf4:	65da      	str	r2, [r3, #92]	; 0x5c
            ulTaskSwitchedInTime = ulTotalRunTime;
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <vTaskSwitchContext+0xf0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a2b      	ldr	r2, [pc, #172]	; (8000ca8 <vTaskSwitchContext+0xf4>)
 8000bfc:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <vTaskSwitchContext+0xfc>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000c0c:	7afb      	ldrb	r3, [r7, #11]
 8000c0e:	f1c3 031f 	rsb	r3, r3, #31
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	4927      	ldr	r1, [pc, #156]	; (8000cb4 <vTaskSwitchContext+0x100>)
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <vTaskSwitchContext+0x8a>
        __asm volatile
 8000c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2c:	f383 8811 	msr	BASEPRI, r3
 8000c30:	f3bf 8f6f 	isb	sy
 8000c34:	f3bf 8f4f 	dsb	sy
 8000c38:	607b      	str	r3, [r7, #4]
    }
 8000c3a:	bf00      	nop
 8000c3c:	e7fe      	b.n	8000c3c <vTaskSwitchContext+0x88>
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4a1a      	ldr	r2, [pc, #104]	; (8000cb4 <vTaskSwitchContext+0x100>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	685a      	ldr	r2, [r3, #4]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d104      	bne.n	8000c6e <vTaskSwitchContext+0xba>
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <vTaskSwitchContext+0xf8>)
 8000c76:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <vTaskSwitchContext+0xf8>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <vTaskSwitchContext+0x104>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d102      	bne.n	8000c8a <vTaskSwitchContext+0xd6>
 8000c84:	f002 ff08 	bl	8003a98 <SEGGER_SYSVIEW_OnIdle>
}
 8000c88:	e004      	b.n	8000c94 <vTaskSwitchContext+0xe0>
        traceTASK_SWITCHED_IN();
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <vTaskSwitchContext+0xf8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 ff60 	bl	8003b54 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000138 	.word	0x20000138
 8000ca0:	20000124 	.word	0x20000124
 8000ca4:	20000140 	.word	0x20000140
 8000ca8:	2000013c 	.word	0x2000013c
 8000cac:	20000038 	.word	0x20000038
 8000cb0:	20000118 	.word	0x20000118
 8000cb4:	2000003c 	.word	0x2000003c
 8000cb8:	20000134 	.word	0x20000134

08000cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000cc4:	f000 f84c 	bl	8000d60 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <prvIdleTask+0x20>)
 8000cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	f3bf 8f4f 	dsb	sy
 8000cd4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000cd8:	e7f4      	b.n	8000cc4 <prvIdleTask+0x8>
 8000cda:	bf00      	nop
 8000cdc:	e000ed04 	.word	0xe000ed04

08000ce0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e00c      	b.n	8000d06 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <prvInitialiseTaskLists+0x60>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fab2 	bl	8000264 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3301      	adds	r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d9ef      	bls.n	8000cec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <prvInitialiseTaskLists+0x64>)
 8000d0e:	f7ff faa9 	bl	8000264 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <prvInitialiseTaskLists+0x68>)
 8000d14:	f7ff faa6 	bl	8000264 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <prvInitialiseTaskLists+0x6c>)
 8000d1a:	f7ff faa3 	bl	8000264 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <prvInitialiseTaskLists+0x70>)
 8000d20:	f7ff faa0 	bl	8000264 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <prvInitialiseTaskLists+0x74>)
 8000d26:	f7ff fa9d 	bl	8000264 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <prvInitialiseTaskLists+0x78>)
 8000d2c:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <prvInitialiseTaskLists+0x64>)
 8000d2e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <prvInitialiseTaskLists+0x7c>)
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <prvInitialiseTaskLists+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000003c 	.word	0x2000003c
 8000d44:	200000a0 	.word	0x200000a0
 8000d48:	200000b4 	.word	0x200000b4
 8000d4c:	200000d0 	.word	0x200000d0
 8000d50:	200000e4 	.word	0x200000e4
 8000d54:	200000fc 	.word	0x200000fc
 8000d58:	200000c8 	.word	0x200000c8
 8000d5c:	200000cc 	.word	0x200000cc

08000d60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d66:	e019      	b.n	8000d9c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000d68:	f000 fabc 	bl	80012e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <prvCheckTasksWaitingTermination+0x50>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3304      	adds	r3, #4
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fad9 	bl	8000330 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <prvCheckTasksWaitingTermination+0x54>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <prvCheckTasksWaitingTermination+0x54>)
 8000d86:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <prvCheckTasksWaitingTermination+0x58>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <prvCheckTasksWaitingTermination+0x58>)
 8000d90:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000d92:	f000 fad7 	bl	8001344 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f848 	bl	8000e2c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <prvCheckTasksWaitingTermination+0x58>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1e1      	bne.n	8000d68 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000e4 	.word	0x200000e4
 8000db4:	20000110 	.word	0x20000110
 8000db8:	200000f8 	.word	0x200000f8

08000dbc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8000dc8:	e005      	b.n	8000dd6 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
            ulCount++;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2ba5      	cmp	r3, #165	; 0xa5
 8000ddc:	d0f5      	beq.n	8000dca <prvTaskCheckFreeStackSpace+0xe>
        }

        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]

        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	b29b      	uxth	r3, r3
    }
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d102      	bne.n	8000e08 <uxTaskGetStackHighWaterMark+0x14>
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <uxTaskGetStackHighWaterMark+0x34>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	e000      	b.n	8000e0a <uxTaskGetStackHighWaterMark+0x16>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8000e12:	6938      	ldr	r0, [r7, #16]
 8000e14:	f7ff ffd2 	bl	8000dbc <prvTaskCheckFreeStackSpace>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000038 	.word	0x20000038

08000e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fc39 	bl	80016b0 <vPortFree>
            vPortFree( pxTCB );
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 fc36 	bl	80016b0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <prvResetNextTaskUnblockTime+0x30>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d104      	bne.n	8000e64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <prvResetNextTaskUnblockTime+0x34>)
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000e62:	e005      	b.n	8000e70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <prvResetNextTaskUnblockTime+0x30>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <prvResetNextTaskUnblockTime+0x34>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000c8 	.word	0x200000c8
 8000e80:	20000130 	.word	0x20000130

08000e84 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000e8e:	4b38      	ldr	r3, [pc, #224]	; (8000f70 <prvAddCurrentTaskToDelayedList+0xec>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = pdFALSE;
 8000e94:	4b37      	ldr	r3, [pc, #220]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000e9e:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa43 	bl	8000330 <uxListRemove>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d10b      	bne.n	8000ec8 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000eb0:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000ec6:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ece:	d124      	bne.n	8000f1a <prvAddCurrentTaskToDelayedList+0x96>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d021      	beq.n	8000f1a <prvAddCurrentTaskToDelayedList+0x96>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000ed6:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <prvAddCurrentTaskToDelayedList+0xf8>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	6892      	ldr	r2, [r2, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	3204      	adds	r2, #4
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <prvAddCurrentTaskToDelayedList+0xf8>)
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <prvAddCurrentTaskToDelayedList+0xf8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <prvAddCurrentTaskToDelayedList+0xf8>)
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000f18:	e026      	b.n	8000f68 <prvAddCurrentTaskToDelayedList+0xe4>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d209      	bcs.n	8000f46 <prvAddCurrentTaskToDelayedList+0xc2>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <prvAddCurrentTaskToDelayedList+0xfc>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f7ff f9bd 	bl	80002be <vListInsert>
}
 8000f44:	e010      	b.n	8000f68 <prvAddCurrentTaskToDelayedList+0xe4>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <prvAddCurrentTaskToDelayedList+0x100>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3304      	adds	r3, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4610      	mov	r0, r2
 8000f54:	f7ff f9b3 	bl	80002be <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <prvAddCurrentTaskToDelayedList+0x104>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d202      	bcs.n	8000f68 <prvAddCurrentTaskToDelayedList+0xe4>
                    xNextTaskUnblockTime = xTimeToWake;
 8000f62:	4a09      	ldr	r2, [pc, #36]	; (8000f88 <prvAddCurrentTaskToDelayedList+0x104>)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000114 	.word	0x20000114
 8000f74:	20000038 	.word	0x20000038
 8000f78:	20000118 	.word	0x20000118
 8000f7c:	200000fc 	.word	0x200000fc
 8000f80:	200000cc 	.word	0x200000cc
 8000f84:	200000c8 	.word	0x200000c8
 8000f88:	20000130 	.word	0x20000130

08000f8c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000fa4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3b04      	subs	r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f023 0201 	bic.w	r2, r3, #1
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b04      	subs	r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <pxPortInitialiseStack+0x64>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3b14      	subs	r3, #20
 8000fc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3b04      	subs	r3, #4
 8000fd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f06f 0202 	mvn.w	r2, #2
 8000fda:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	3b20      	subs	r3, #32
 8000fe0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08000ff5 	.word	0x08000ff5

08000ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <prvTaskExitError+0x54>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d00a      	beq.n	800101e <prvTaskExitError+0x2a>
        __asm volatile
 8001008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800100c:	f383 8811 	msr	BASEPRI, r3
 8001010:	f3bf 8f6f 	isb	sy
 8001014:	f3bf 8f4f 	dsb	sy
 8001018:	60fb      	str	r3, [r7, #12]
    }
 800101a:	bf00      	nop
 800101c:	e7fe      	b.n	800101c <prvTaskExitError+0x28>
        __asm volatile
 800101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001022:	f383 8811 	msr	BASEPRI, r3
 8001026:	f3bf 8f6f 	isb	sy
 800102a:	f3bf 8f4f 	dsb	sy
 800102e:	60bb      	str	r3, [r7, #8]
    }
 8001030:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001032:	bf00      	nop
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0fc      	beq.n	8001034 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000004 	.word	0x20000004
 800104c:	00000000 	.word	0x00000000

08001050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <pxCurrentTCBConst2>)
 8001052:	6819      	ldr	r1, [r3, #0]
 8001054:	6808      	ldr	r0, [r1, #0]
 8001056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800105a:	f380 8809 	msr	PSP, r0
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	f380 8811 	msr	BASEPRI, r0
 800106a:	4770      	bx	lr
 800106c:	f3af 8000 	nop.w

08001070 <pxCurrentTCBConst2>:
 8001070:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop

08001078 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <prvPortStartFirstTask+0x24>)
 800107a:	6800      	ldr	r0, [r0, #0]
 800107c:	6800      	ldr	r0, [r0, #0]
 800107e:	f380 8808 	msr	MSP, r0
 8001082:	f04f 0000 	mov.w	r0, #0
 8001086:	f380 8814 	msr	CONTROL, r0
 800108a:	b662      	cpsie	i
 800108c:	b661      	cpsie	f
 800108e:	f3bf 8f4f 	dsb	sy
 8001092:	f3bf 8f6f 	isb	sy
 8001096:	df00      	svc	0
 8001098:	bf00      	nop
 800109a:	0000      	.short	0x0000
 800109c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop

080010a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <xPortStartScheduler+0x120>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <xPortStartScheduler+0x124>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d10a      	bne.n	80010ca <xPortStartScheduler+0x26>
        __asm volatile
 80010b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b8:	f383 8811 	msr	BASEPRI, r3
 80010bc:	f3bf 8f6f 	isb	sy
 80010c0:	f3bf 8f4f 	dsb	sy
 80010c4:	613b      	str	r3, [r7, #16]
    }
 80010c6:	bf00      	nop
 80010c8:	e7fe      	b.n	80010c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <xPortStartScheduler+0x120>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <xPortStartScheduler+0x128>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10a      	bne.n	80010ea <xPortStartScheduler+0x46>
        __asm volatile
 80010d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d8:	f383 8811 	msr	BASEPRI, r3
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	60fb      	str	r3, [r7, #12]
    }
 80010e6:	bf00      	nop
 80010e8:	e7fe      	b.n	80010e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80010ea:	4b39      	ldr	r3, [pc, #228]	; (80011d0 <xPortStartScheduler+0x12c>)
 80010ec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	22ff      	movs	r2, #255	; 0xff
 80010fa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <xPortStartScheduler+0x130>)
 8001110:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <xPortStartScheduler+0x134>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001118:	e009      	b.n	800112e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <xPortStartScheduler+0x134>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <xPortStartScheduler+0x134>)
 8001122:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001136:	2b80      	cmp	r3, #128	; 0x80
 8001138:	d0ef      	beq.n	800111a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <xPortStartScheduler+0x134>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	d00a      	beq.n	800115c <xPortStartScheduler+0xb8>
        __asm volatile
 8001146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114a:	f383 8811 	msr	BASEPRI, r3
 800114e:	f3bf 8f6f 	isb	sy
 8001152:	f3bf 8f4f 	dsb	sy
 8001156:	60bb      	str	r3, [r7, #8]
    }
 8001158:	bf00      	nop
 800115a:	e7fe      	b.n	800115a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <xPortStartScheduler+0x134>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	4a1d      	ldr	r2, [pc, #116]	; (80011d8 <xPortStartScheduler+0x134>)
 8001164:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <xPortStartScheduler+0x134>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800116e:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <xPortStartScheduler+0x134>)
 8001170:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <xPortStartScheduler+0x138>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <xPortStartScheduler+0x138>)
 8001180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001184:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <xPortStartScheduler+0x138>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <xPortStartScheduler+0x138>)
 800118c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001190:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001192:	f000 f963 	bl	800145c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <xPortStartScheduler+0x13c>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800119c:	f000 f982 	bl	80014a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <xPortStartScheduler+0x140>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <xPortStartScheduler+0x140>)
 80011a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80011aa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80011ac:	f7ff ff64 	bl	8001078 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80011b0:	f7ff fd00 	bl	8000bb4 <vTaskSwitchContext>
    prvTaskExitError();
 80011b4:	f7ff ff1e 	bl	8000ff4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	410fc271 	.word	0x410fc271
 80011cc:	410fc270 	.word	0x410fc270
 80011d0:	e000e400 	.word	0xe000e400
 80011d4:	20000144 	.word	0x20000144
 80011d8:	20000148 	.word	0x20000148
 80011dc:	e000ed20 	.word	0xe000ed20
 80011e0:	20000004 	.word	0x20000004
 80011e4:	e000ef34 	.word	0xe000ef34

080011e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <vInitPrioGroupValue+0xe4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <vInitPrioGroupValue+0xe8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d10a      	bne.n	800120e <vInitPrioGroupValue+0x26>
        __asm volatile
 80011f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011fc:	f383 8811 	msr	BASEPRI, r3
 8001200:	f3bf 8f6f 	isb	sy
 8001204:	f3bf 8f4f 	dsb	sy
 8001208:	613b      	str	r3, [r7, #16]
    }
 800120a:	bf00      	nop
 800120c:	e7fe      	b.n	800120c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <vInitPrioGroupValue+0xe4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a30      	ldr	r2, [pc, #192]	; (80012d4 <vInitPrioGroupValue+0xec>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d10a      	bne.n	800122e <vInitPrioGroupValue+0x46>
        __asm volatile
 8001218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800121c:	f383 8811 	msr	BASEPRI, r3
 8001220:	f3bf 8f6f 	isb	sy
 8001224:	f3bf 8f4f 	dsb	sy
 8001228:	60fb      	str	r3, [r7, #12]
    }
 800122a:	bf00      	nop
 800122c:	e7fe      	b.n	800122c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <vInitPrioGroupValue+0xf0>)
 8001230:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	22ff      	movs	r2, #255	; 0xff
 800123e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <vInitPrioGroupValue+0xf4>)
 8001254:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800125c:	e009      	b.n	8001272 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 8001266:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	2b80      	cmp	r3, #128	; 0x80
 800127c:	d0ef      	beq.n	800125e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00a      	beq.n	80012a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	60bb      	str	r3, [r7, #8]
    }
 800129c:	bf00      	nop
 800129e:	e7fe      	b.n	800129e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 80012a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <vInitPrioGroupValue+0xf8>)
 80012b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	410fc271 	.word	0x410fc271
 80012d4:	410fc270 	.word	0x410fc270
 80012d8:	e000e400 	.word	0xe000e400
 80012dc:	20000144 	.word	0x20000144
 80012e0:	20000148 	.word	0x20000148

080012e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
        __asm volatile
 80012ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ee:	f383 8811 	msr	BASEPRI, r3
 80012f2:	f3bf 8f6f 	isb	sy
 80012f6:	f3bf 8f4f 	dsb	sy
 80012fa:	607b      	str	r3, [r7, #4]
    }
 80012fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <vPortEnterCritical+0x58>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <vPortEnterCritical+0x58>)
 8001306:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <vPortEnterCritical+0x58>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10f      	bne.n	8001330 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <vPortEnterCritical+0x5c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <vPortEnterCritical+0x4c>
        __asm volatile
 800131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	603b      	str	r3, [r7, #0]
    }
 800132c:	bf00      	nop
 800132e:	e7fe      	b.n	800132e <vPortEnterCritical+0x4a>
    }
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000004 	.word	0x20000004
 8001340:	e000ed04 	.word	0xe000ed04

08001344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <vPortExitCritical+0x50>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10a      	bne.n	8001368 <vPortExitCritical+0x24>
        __asm volatile
 8001352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001356:	f383 8811 	msr	BASEPRI, r3
 800135a:	f3bf 8f6f 	isb	sy
 800135e:	f3bf 8f4f 	dsb	sy
 8001362:	607b      	str	r3, [r7, #4]
    }
 8001364:	bf00      	nop
 8001366:	e7fe      	b.n	8001366 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <vPortExitCritical+0x50>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <vPortExitCritical+0x50>)
 8001370:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <vPortExitCritical+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <vPortExitCritical+0x42>
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001384:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000004 	.word	0x20000004
	...

080013a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80013a0:	f3ef 8009 	mrs	r0, PSP
 80013a4:	f3bf 8f6f 	isb	sy
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <pxCurrentTCBConst>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	f01e 0f10 	tst.w	lr, #16
 80013b0:	bf08      	it	eq
 80013b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80013b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013ba:	6010      	str	r0, [r2, #0]
 80013bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80013c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80013c4:	f380 8811 	msr	BASEPRI, r0
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	f3bf 8f6f 	isb	sy
 80013d0:	f7ff fbf0 	bl	8000bb4 <vTaskSwitchContext>
 80013d4:	f04f 0000 	mov.w	r0, #0
 80013d8:	f380 8811 	msr	BASEPRI, r0
 80013dc:	bc09      	pop	{r0, r3}
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	6808      	ldr	r0, [r1, #0]
 80013e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e6:	f01e 0f10 	tst.w	lr, #16
 80013ea:	bf08      	it	eq
 80013ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80013f0:	f380 8809 	msr	PSP, r0
 80013f4:	f3bf 8f6f 	isb	sy
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w

08001400 <pxCurrentTCBConst>:
 8001400:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop

08001408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
        __asm volatile
 800140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001412:	f383 8811 	msr	BASEPRI, r3
 8001416:	f3bf 8f6f 	isb	sy
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	607b      	str	r3, [r7, #4]
    }
 8001420:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001422:	f002 fabf 	bl	80039a4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001426:	f7ff facd 	bl	80009c4 <xTaskIncrementTick>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d006      	beq.n	800143e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001430:	f002 fb16 	bl	8003a60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <SysTick_Handler+0x50>)
 8001436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e001      	b.n	8001442 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800143e:	f002 faf3 	bl	8003a28 <SEGGER_SYSVIEW_RecordExitISR>
 8001442:	2300      	movs	r3, #0
 8001444:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f383 8811 	msr	BASEPRI, r3
    }
 800144c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000ed04 	.word	0xe000ed04

0800145c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <vPortSetupTimerInterrupt+0x34>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <vPortSetupTimerInterrupt+0x38>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <vPortSetupTimerInterrupt+0x3c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <vPortSetupTimerInterrupt+0x40>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	099b      	lsrs	r3, r3, #6
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <vPortSetupTimerInterrupt+0x44>)
 800147a:	3b01      	subs	r3, #1
 800147c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <vPortSetupTimerInterrupt+0x34>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010
 8001494:	e000e018 	.word	0xe000e018
 8001498:	20000010 	.word	0x20000010
 800149c:	10624dd3 	.word	0x10624dd3
 80014a0:	e000e014 	.word	0xe000e014

080014a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80014a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80014b4 <vPortEnableVFP+0x10>
 80014a8:	6801      	ldr	r1, [r0, #0]
 80014aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80014ae:	6001      	str	r1, [r0, #0]
 80014b0:	4770      	bx	lr
 80014b2:	0000      	.short	0x0000
 80014b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop

080014bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80014c2:	f3ef 8305 	mrs	r3, IPSR
 80014c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	d914      	bls.n	80014f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <vPortValidateInterruptPriority+0x70>)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <vPortValidateInterruptPriority+0x74>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20a      	bcs.n	80014f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80014e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e6:	f383 8811 	msr	BASEPRI, r3
 80014ea:	f3bf 8f6f 	isb	sy
 80014ee:	f3bf 8f4f 	dsb	sy
 80014f2:	607b      	str	r3, [r7, #4]
    }
 80014f4:	bf00      	nop
 80014f6:	e7fe      	b.n	80014f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <vPortValidateInterruptPriority+0x78>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <vPortValidateInterruptPriority+0x7c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d90a      	bls.n	800151e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8001508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150c:	f383 8811 	msr	BASEPRI, r3
 8001510:	f3bf 8f6f 	isb	sy
 8001514:	f3bf 8f4f 	dsb	sy
 8001518:	603b      	str	r3, [r7, #0]
    }
 800151a:	bf00      	nop
 800151c:	e7fe      	b.n	800151c <vPortValidateInterruptPriority+0x60>
    }
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000e3f0 	.word	0xe000e3f0
 8001530:	20000144 	.word	0x20000144
 8001534:	e000ed0c 	.word	0xe000ed0c
 8001538:	20000148 	.word	0x20000148

0800153c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001548:	f7ff f92a 	bl	80007a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800154c:	4b53      	ldr	r3, [pc, #332]	; (800169c <pvPortMalloc+0x160>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001554:	f000 f908 	bl	8001768 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d012      	beq.n	8001584 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800155e:	2208      	movs	r2, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	3308      	adds	r3, #8
 800156a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	43db      	mvns	r3, r3
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d804      	bhi.n	8001580 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4413      	add	r3, r2
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	e001      	b.n	8001584 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db70      	blt.n	800166c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d06d      	beq.n	800166c <pvPortMalloc+0x130>
 8001590:	4b43      	ldr	r3, [pc, #268]	; (80016a0 <pvPortMalloc+0x164>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d868      	bhi.n	800166c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800159a:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <pvPortMalloc+0x168>)
 800159c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800159e:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <pvPortMalloc+0x168>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015a4:	e004      	b.n	80015b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d903      	bls.n	80015c2 <pvPortMalloc+0x86>
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f1      	bne.n	80015a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <pvPortMalloc+0x160>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d04f      	beq.n	800166c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2208      	movs	r2, #8
 80015d2:	4413      	add	r3, r2
 80015d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	2308      	movs	r3, #8
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d91f      	bls.n	800162e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00a      	beq.n	8001616 <pvPortMalloc+0xda>
        __asm volatile
 8001600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001604:	f383 8811 	msr	BASEPRI, r3
 8001608:	f3bf 8f6f 	isb	sy
 800160c:	f3bf 8f4f 	dsb	sy
 8001610:	613b      	str	r3, [r7, #16]
    }
 8001612:	bf00      	nop
 8001614:	e7fe      	b.n	8001614 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	1ad2      	subs	r2, r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001628:	6978      	ldr	r0, [r7, #20]
 800162a:	f000 f8f9 	bl	8001820 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <pvPortMalloc+0x164>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	4a19      	ldr	r2, [pc, #100]	; (80016a0 <pvPortMalloc+0x164>)
 800163a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <pvPortMalloc+0x164>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <pvPortMalloc+0x16c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d203      	bcs.n	8001650 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <pvPortMalloc+0x164>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <pvPortMalloc+0x16c>)
 800164e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <pvPortMalloc+0x170>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	4a10      	ldr	r2, [pc, #64]	; (80016ac <pvPortMalloc+0x170>)
 800166a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800166c:	f7ff f8a6 	bl	80007bc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00a      	beq.n	8001690 <pvPortMalloc+0x154>
        __asm volatile
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	60fb      	str	r3, [r7, #12]
    }
 800168c:	bf00      	nop
 800168e:	e7fe      	b.n	800168e <pvPortMalloc+0x152>
    return pvReturn;
 8001690:	69fb      	ldr	r3, [r7, #28]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20004154 	.word	0x20004154
 80016a0:	20004158 	.word	0x20004158
 80016a4:	2000414c 	.word	0x2000414c
 80016a8:	2000415c 	.word	0x2000415c
 80016ac:	20004160 	.word	0x20004160

080016b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d049      	beq.n	8001756 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80016c2:	2308      	movs	r3, #8
 80016c4:	425b      	negs	r3, r3
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4413      	add	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <vPortFree+0x3e>
        __asm volatile
 80016d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016dc:	f383 8811 	msr	BASEPRI, r3
 80016e0:	f3bf 8f6f 	isb	sy
 80016e4:	f3bf 8f4f 	dsb	sy
 80016e8:	60fb      	str	r3, [r7, #12]
    }
 80016ea:	bf00      	nop
 80016ec:	e7fe      	b.n	80016ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <vPortFree+0x5c>
        __asm volatile
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	60bb      	str	r3, [r7, #8]
    }
 8001708:	bf00      	nop
 800170a:	e7fe      	b.n	800170a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	0fdb      	lsrs	r3, r3, #31
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01c      	beq.n	8001756 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d118      	bne.n	8001756 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8001730:	f7ff f836 	bl	80007a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <vPortFree+0xb0>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4413      	add	r3, r2
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <vPortFree+0xb0>)
 8001740:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001742:	6938      	ldr	r0, [r7, #16]
 8001744:	f000 f86c 	bl	8001820 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <vPortFree+0xb4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <vPortFree+0xb4>)
 8001750:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8001752:	f7ff f833 	bl	80007bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20004158 	.word	0x20004158
 8001764:	20004164 	.word	0x20004164

08001768 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800176e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001772:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001774:	4b25      	ldr	r3, [pc, #148]	; (800180c <prvHeapInit+0xa4>)
 8001776:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3307      	adds	r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 0307 	bic.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4a1d      	ldr	r2, [pc, #116]	; (800180c <prvHeapInit+0xa4>)
 8001798:	4413      	add	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <prvHeapInit+0xa8>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <prvHeapInit+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80017b4:	2208      	movs	r2, #8
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f023 0307 	bic.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <prvHeapInit+0xac>)
 80017c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <prvHeapInit+0xac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <prvHeapInit+0xac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	1ad2      	subs	r2, r2, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <prvHeapInit+0xac>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a08      	ldr	r2, [pc, #32]	; (8001818 <prvHeapInit+0xb0>)
 80017f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <prvHeapInit+0xb4>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	2000014c 	.word	0x2000014c
 8001810:	2000414c 	.word	0x2000414c
 8001814:	20004154 	.word	0x20004154
 8001818:	2000415c 	.word	0x2000415c
 800181c:	20004158 	.word	0x20004158

08001820 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <prvInsertBlockIntoFreeList+0xac>)
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e002      	b.n	8001834 <prvInsertBlockIntoFreeList+0x14>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d8f7      	bhi.n	800182e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	4413      	add	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d108      	bne.n	8001862 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	441a      	add	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	441a      	add	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d118      	bne.n	80018a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <prvInsertBlockIntoFreeList+0xb0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d00d      	beq.n	800189e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	441a      	add	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	e008      	b.n	80018b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <prvInsertBlockIntoFreeList+0xb0>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e003      	b.n	80018b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d002      	beq.n	80018be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	2000414c 	.word	0x2000414c
 80018d0:	20004154 	.word	0x20004154

080018d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80018d8:	4803      	ldr	r0, [pc, #12]	; (80018e8 <_cbSendSystemDesc+0x14>)
 80018da:	f002 f80d 	bl	80038f8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <_cbSendSystemDesc+0x18>)
 80018e0:	f002 f80a 	bl	80038f8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	08005d30 	.word	0x08005d30
 80018ec:	08005d70 	.word	0x08005d70

080018f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SEGGER_SYSVIEW_Conf+0x20>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <SEGGER_SYSVIEW_Conf+0x20>)
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SEGGER_SYSVIEW_Conf+0x24>)
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <SEGGER_SYSVIEW_Conf+0x28>)
 8001900:	f001 fc7e 	bl	8003200 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001904:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001908:	f001 fcbe 	bl	8003288 <SEGGER_SYSVIEW_SetRAMBase>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000010 	.word	0x20000010
 8001914:	080018d5 	.word	0x080018d5
 8001918:	08005e24 	.word	0x08005e24

0800191c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800191c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191e:	b085      	sub	sp, #20
 8001920:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	e048      	b.n	80019ba <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <_cbSendTaskList+0xb4>)
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa5b 	bl	8000df4 <uxTaskGetStackHighWaterMark>
 800193e:	4601      	mov	r1, r0
 8001940:	4823      	ldr	r0, [pc, #140]	; (80019d0 <_cbSendTaskList+0xb4>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4403      	add	r3, r0
 800194e:	3310      	adds	r3, #16
 8001950:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001952:	491f      	ldr	r1, [pc, #124]	; (80019d0 <_cbSendTaskList+0xb4>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	491b      	ldr	r1, [pc, #108]	; (80019d0 <_cbSendTaskList+0xb4>)
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	3304      	adds	r3, #4
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	4c16      	ldr	r4, [pc, #88]	; (80019d0 <_cbSendTaskList+0xb4>)
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4423      	add	r3, r4
 8001982:	3308      	adds	r3, #8
 8001984:	681c      	ldr	r4, [r3, #0]
 8001986:	4d12      	ldr	r5, [pc, #72]	; (80019d0 <_cbSendTaskList+0xb4>)
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	442b      	add	r3, r5
 8001994:	330c      	adds	r3, #12
 8001996:	681d      	ldr	r5, [r3, #0]
 8001998:	4e0d      	ldr	r6, [pc, #52]	; (80019d0 <_cbSendTaskList+0xb4>)
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4433      	add	r3, r6
 80019a6:	3310      	adds	r3, #16
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	462b      	mov	r3, r5
 80019ae:	4622      	mov	r2, r4
 80019b0:	f000 f8be 	bl	8001b30 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <_cbSendTaskList+0xb8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3b1      	bcc.n	8001928 <_cbSendTaskList+0xc>
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20004168 	.word	0x20004168
 80019d4:	20004208 	.word	0x20004208

080019d8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80019d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80019e0:	f7fe ffde 	bl	80009a0 <xTaskGetTickCountFromISR>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	469a      	mov	sl, r3
 80019ea:	4693      	mov	fp, r2
 80019ec:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80019f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	f04f 0a00 	mov.w	sl, #0
 80019fc:	f04f 0b00 	mov.w	fp, #0
 8001a00:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a04:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a08:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	465b      	mov	r3, fp
 8001a10:	1a14      	subs	r4, r2, r0
 8001a12:	eb63 0501 	sbc.w	r5, r3, r1
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	00ab      	lsls	r3, r5, #2
 8001a20:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001a24:	00a2      	lsls	r2, r4, #2
 8001a26:	4614      	mov	r4, r2
 8001a28:	461d      	mov	r5, r3
 8001a2a:	eb14 0800 	adds.w	r8, r4, r0
 8001a2e:	eb45 0901 	adc.w	r9, r5, r1
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
 8001a4a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001a60 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af02      	add	r7, sp, #8
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001a6e:	2205      	movs	r2, #5
 8001a70:	492b      	ldr	r1, [pc, #172]	; (8001b20 <SYSVIEW_AddTask+0xc0>)
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f004 f902 	bl	8005c7c <memcmp>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d04b      	beq.n	8001b16 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001a7e:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	d903      	bls.n	8001a8e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <SYSVIEW_AddTask+0xc8>)
 8001a88:	f002 f9e2 	bl	8003e50 <SEGGER_SYSVIEW_Warn>
    return;
 8001a8c:	e044      	b.n	8001b18 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4926      	ldr	r1, [pc, #152]	; (8001b2c <SYSVIEW_AddTask+0xcc>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4921      	ldr	r1, [pc, #132]	; (8001b2c <SYSVIEW_AddTask+0xcc>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	491b      	ldr	r1, [pc, #108]	; (8001b2c <SYSVIEW_AddTask+0xcc>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3308      	adds	r3, #8
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4916      	ldr	r1, [pc, #88]	; (8001b2c <SYSVIEW_AddTask+0xcc>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	330c      	adds	r3, #12
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4910      	ldr	r1, [pc, #64]	; (8001b2c <SYSVIEW_AddTask+0xcc>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	3310      	adds	r3, #16
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <SYSVIEW_AddTask+0xc4>)
 8001b02:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f80e 	bl	8001b30 <SYSVIEW_SendTaskInfo>
 8001b14:	e000      	b.n	8001b18 <SYSVIEW_AddTask+0xb8>
    return;
 8001b16:	bf00      	nop

}
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	08005d80 	.word	0x08005d80
 8001b24:	20004208 	.word	0x20004208
 8001b28:	08005d88 	.word	0x08005d88
 8001b2c:	20004168 	.word	0x20004168

08001b30 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	2214      	movs	r2, #20
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f004 f8a8 	bl	8005c9c <memset>
  TaskInfo.TaskID     = TaskID;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 fdcf 	bl	8003708 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8001c0a:	f002 f97d 	bl	8003f08 <SEGGER_SYSVIEW_IsStarted>
 8001c0e:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8001c16:	f001 fbfb 	bl	8003410 <SEGGER_SYSVIEW_Start>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <_cbOnUARTRx+0x3c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d806      	bhi.n	8001c44 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <_cbOnUARTRx+0x3c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_cbOnUARTRx+0x3c>)
 8001c40:	701a      	strb	r2, [r3, #0]
    goto Done;
 8001c42:	e009      	b.n	8001c58 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8001c44:	f7ff ffde 	bl	8001c04 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <_cbOnUARTRx+0x3c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	2201      	movs	r2, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f000 fb8e 	bl	8002374 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8001c58:	bf00      	nop
}
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000008 	.word	0x20000008

08001c64 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <_cbOnUARTTx+0x5c>)
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d80f      	bhi.n	8001c94 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <_cbOnUARTTx+0x5c>)
 8001c76:	785b      	ldrb	r3, [r3, #1]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <_cbOnUARTTx+0x60>)
 8001c7c:	5c9a      	ldrb	r2, [r3, r2]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <_cbOnUARTTx+0x5c>)
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	3301      	adds	r3, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <_cbOnUARTTx+0x5c>)
 8001c8c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
    goto Done;
 8001c92:	e00f      	b.n	8001cb4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <_cbOnUARTTx+0x5c>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fa0d 	bl	80020bc <SEGGER_RTT_ReadUpBufferNoLock>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da02      	bge.n	8001cb2 <_cbOnUARTTx+0x4e>
    r = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	e000      	b.n	8001cb4 <_cbOnUARTTx+0x50>
  }
Done:
 8001cb2:	bf00      	nop
  return r;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	08005e2c 	.word	0x08005e2c

08001cc8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <SEGGER_UART_init+0x1c>)
 8001cd2:	4905      	ldr	r1, [pc, #20]	; (8001ce8 <SEGGER_UART_init+0x20>)
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f865 	bl	8001da4 <HIF_UART_Init>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08001c25 	.word	0x08001c25
 8001ce8:	08001c65 	.word	0x08001c65

08001cec <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART2_ISR;                              // Examine status register
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <USART2_IRQHandler+0x80>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d011      	beq.n	8001d26 <USART2_IRQHandler+0x3a>
    v = USART2_RDR;                                      // Read data
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <USART2_IRQHandler+0x84>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 030b 	and.w	r3, r3, #11
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001d14:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <USART2_IRQHandler+0x88>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <USART2_IRQHandler+0x88>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	4610      	mov	r0, r2
 8001d24:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01a      	beq.n	8001d66 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <USART2_IRQHandler+0x8c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d015      	beq.n	8001d64 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <USART2_IRQHandler+0x8c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	1dfa      	adds	r2, r7, #7
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4798      	blx	r3
 8001d42:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <USART2_IRQHandler+0x6c>
      USART2_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <USART2_IRQHandler+0x90>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <USART2_IRQHandler+0x90>)
 8001d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e006      	b.n	8001d66 <USART2_IRQHandler+0x7a>
    } else {
      USART2_ISR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <USART2_IRQHandler+0x80>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
      USART2_TDR = v;  // Start transmission by writing to data register
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <USART2_IRQHandler+0x94>)
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e000      	b.n	8001d66 <USART2_IRQHandler+0x7a>
      return;
 8001d64:	bf00      	nop
    }
  }
}
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	4000441c 	.word	0x4000441c
 8001d70:	40004424 	.word	0x40004424
 8001d74:	2000420c 	.word	0x2000420c
 8001d78:	20004210 	.word	0x20004210
 8001d7c:	40004400 	.word	0x40004400
 8001d80:	40004428 	.word	0x40004428

08001d84 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  USART2_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40004400 	.word	0x40004400

08001da4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR1 |= (1 <<  17);        // Enable USART2 clock
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HIF_UART_Init+0xac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HIF_UART_Init+0xac>)
 8001db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dba:	6013      	str	r3, [r2, #0]
  RCC_AHB2ENR |= (1 <<  0);        // Enable IO port A clock
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <HIF_UART_Init+0xb0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a24      	ldr	r2, [pc, #144]	; (8001e54 <HIF_UART_Init+0xb0>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

  GPIOA_AFRL |= (7<<28);
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HIF_UART_Init+0xb4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HIF_UART_Init+0xb4>)
 8001dce:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8001dd2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  GPIOA_MODER |= (10<<4);
 8001dd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001dde:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001de2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART2_CR1 = 0
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HIF_UART_Init+0xb8>)
 8001de6:	f248 022d 	movw	r2, #32813	; 0x802d
 8001dea:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART2_CR2 = 0
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HIF_UART_Init+0xbc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART2_CR3 = 0
 8001df2:	4b1c      	ldr	r3, [pc, #112]	; (8001e64 <HIF_UART_Init+0xc0>)
 8001df4:	2280      	movs	r2, #128	; 0x80
 8001df6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8001dfe:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HIF_UART_Init+0xc4>)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e16:	d302      	bcc.n	8001e1e <HIF_UART_Init+0x7a>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8001e18:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001e1c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HIF_UART_Init+0x8a>
    USART2_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HIF_UART_Init+0xc8>)
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HIF_UART_Init+0xcc>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8001e34:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HIF_UART_Init+0xd0>)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8001e3a:	2106      	movs	r1, #6
 8001e3c:	2026      	movs	r0, #38	; 0x26
 8001e3e:	f7ff feb7 	bl	8001bb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8001e42:	2026      	movs	r0, #38	; 0x26
 8001e44:	f7ff fe96 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021058 	.word	0x40021058
 8001e54:	4002104c 	.word	0x4002104c
 8001e58:	48000020 	.word	0x48000020
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40004404 	.word	0x40004404
 8001e64:	40004408 	.word	0x40004408
 8001e68:	02625a00 	.word	0x02625a00
 8001e6c:	4000440c 	.word	0x4000440c
 8001e70:	2000420c 	.word	0x2000420c
 8001e74:	20004210 	.word	0x20004210

08001e78 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <_DoInit+0xa0>)
 8001e80:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8001e82:	22a8      	movs	r2, #168	; 0xa8
 8001e84:	2100      	movs	r1, #0
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f003 ff08 	bl	8005c9c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2203      	movs	r2, #3
 8001e90:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2203      	movs	r2, #3
 8001e96:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <_DoInit+0xa4>)
 8001e9c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <_DoInit+0xa8>)
 8001ea2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eaa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <_DoInit+0xa4>)
 8001ec2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <_DoInit+0xac>)
 8001ec8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2210      	movs	r2, #16
 8001ece:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001ee2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e00c      	b.n	8001f06 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1c3 030f 	rsb	r3, r3, #15
 8001ef2:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <_DoInit+0xb0>)
 8001ef4:	5cd1      	ldrb	r1, [r2, r3]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	460a      	mov	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d9ef      	bls.n	8001eec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001f0c:	f3bf 8f5f 	dmb	sy
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20004214 	.word	0x20004214
 8001f1c:	08005dd8 	.word	0x08005dd8
 8001f20:	200042bc 	.word	0x200042bc
 8001f24:	200046bc 	.word	0x200046bc
 8001f28:	08005e30 	.word	0x08005e30

08001f2c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d905      	bls.n	8001f5c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e007      	b.n	8001f6c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	1acb      	subs	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	4293      	cmp	r3, r2
 8001f78:	bf28      	it	cs
 8001f7a:	4613      	movcs	r3, r2
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4293      	cmp	r3, r2
 8001f84:	bf28      	it	cs
 8001f86:	4613      	movcs	r3, r2
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	4413      	add	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	6978      	ldr	r0, [r7, #20]
 8001f9a:	f003 feab 	bl	8005cf4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8001f9e:	6a3a      	ldr	r2, [r7, #32]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	4413      	add	r3, r2
 8001fa4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	4413      	add	r3, r2
 8001fac:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	4413      	add	r3, r2
 8001fbc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d101      	bne.n	8001fcc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8001fcc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1b2      	bne.n	8001f42 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8001fdc:	6a3b      	ldr	r3, [r7, #32]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b088      	sub	sp, #32
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d911      	bls.n	800202e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	4413      	add	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	6938      	ldr	r0, [r7, #16]
 800201a:	f003 fe6b 	bl	8005cf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800201e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	441a      	add	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800202c:	e01f      	b.n	800206e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	6938      	ldr	r0, [r7, #16]
 8002042:	f003 fe57 	bl	8005cf4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4619      	mov	r1, r3
 800205e:	6938      	ldr	r0, [r7, #16]
 8002060:	f003 fe48 	bl	8005cf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8002064:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	60da      	str	r2, [r3, #12]
}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8002076:	b480      	push	{r7}
 8002078:	b087      	sub	sp, #28
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	429a      	cmp	r2, r3
 8002090:	d808      	bhi.n	80020a4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad2      	subs	r2, r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4413      	add	r3, r2
 800209e:	3b01      	subs	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e004      	b.n	80020ae <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  }
  return r;
 80020ae:	697b      	ldr	r3, [r7, #20]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80020c8:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b53      	cmp	r3, #83	; 0x53
 80020d4:	d001      	beq.n	80020da <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80020d6:	f7ff fecf 	bl	8001e78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4a37      	ldr	r2, [pc, #220]	; (80021c4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80020e8:	4413      	add	r3, r2
 80020ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d92b      	bls.n	8002160 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4293      	cmp	r3, r2
 8002118:	bf28      	it	cs
 800211a:	4613      	movcs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	4413      	add	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	6939      	ldr	r1, [r7, #16]
 800212c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800212e:	f003 fde1 	bl	8005cf4 <memcpy>
    NumBytesRead += NumBytesRem;
 8002132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4413      	add	r3, r2
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4413      	add	r3, r2
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800214a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4413      	add	r3, r2
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002158:	429a      	cmp	r2, r3
 800215a:	d101      	bne.n	8002160 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4293      	cmp	r3, r2
 800216e:	bf28      	it	cs
 8002170:	4613      	movcs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	4413      	add	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	6939      	ldr	r1, [r7, #16]
 8002188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800218a:	f003 fdb3 	bl	8005cf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800218e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4413      	add	r3, r2
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4413      	add	r3, r2
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80021a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4413      	add	r3, r2
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80021ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3730      	adds	r7, #48	; 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20004214 	.word	0x20004214

080021c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b53      	cmp	r3, #83	; 0x53
 80021e0:	d001      	beq.n	80021e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80021e2:	f7ff fe49 	bl	8001e78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	3360      	adds	r3, #96	; 0x60
 80021f2:	4a37      	ldr	r2, [pc, #220]	; (80022d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800220c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	429a      	cmp	r2, r3
 8002212:	d92b      	bls.n	800226c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4293      	cmp	r3, r2
 8002224:	bf28      	it	cs
 8002226:	4613      	movcs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	4413      	add	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	6939      	ldr	r1, [r7, #16]
 8002238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800223a:	f003 fd5b 	bl	8005cf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800223e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4413      	add	r3, r2
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4413      	add	r3, r2
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	4413      	add	r3, r2
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002264:	429a      	cmp	r2, r3
 8002266:	d101      	bne.n	800226c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002268:	2300      	movs	r3, #0
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4293      	cmp	r3, r2
 800227a:	bf28      	it	cs
 800227c:	4613      	movcs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d019      	beq.n	80022ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	4413      	add	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	6939      	ldr	r1, [r7, #16]
 8002294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002296:	f003 fd2d 	bl	8005cf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800229a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4413      	add	r3, r2
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4413      	add	r3, r2
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80022b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4413      	add	r3, r2
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3730      	adds	r7, #48	; 0x30
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20004214 	.word	0x20004214

080022d4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3360      	adds	r3, #96	; 0x60
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d029      	beq.n	8002352 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d82e      	bhi.n	8002360 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8002306:	2b01      	cmp	r3, #1
 8002308:	d013      	beq.n	8002332 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800230a:	e029      	b.n	8002360 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f7ff feb2 	bl	8002076 <_GetAvailWriteSpace>
 8002312:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d202      	bcs.n	8002322 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8002320:	e021      	b.n	8002366 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff fe5b 	bl	8001fe6 <_WriteNoCheck>
    break;
 8002330:	e019      	b.n	8002366 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff fe9f 	bl	8002076 <_GetAvailWriteSpace>
 8002338:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4293      	cmp	r3, r2
 8002340:	bf28      	it	cs
 8002342:	4613      	movcs	r3, r2
 8002344:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	69b9      	ldr	r1, [r7, #24]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff fe4b 	bl	8001fe6 <_WriteNoCheck>
    break;
 8002350:	e009      	b.n	8002366 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	69b9      	ldr	r1, [r7, #24]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff fde8 	bl	8001f2c <_WriteBlocking>
 800235c:	61f8      	str	r0, [r7, #28]
    break;
 800235e:	e002      	b.n	8002366 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    break;
 8002364:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8002366:	69fb      	ldr	r3, [r7, #28]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20004214 	.word	0x20004214

08002374 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <SEGGER_RTT_WriteDownBuffer+0x48>)
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b53      	cmp	r3, #83	; 0x53
 800238c:	d001      	beq.n	8002392 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800238e:	f7ff fd73 	bl	8001e78 <_DoInit>
  SEGGER_RTT_LOCK();
 8002392:	f3ef 8311 	mrs	r3, BASEPRI
 8002396:	f04f 0120 	mov.w	r1, #32
 800239a:	f381 8811 	msr	BASEPRI, r1
 800239e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ff95 	bl	80022d4 <SEGGER_RTT_WriteDownBufferNoLock>
 80023aa:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80023b2:	697b      	ldr	r3, [r7, #20]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20004214 	.word	0x20004214

080023c0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b53      	cmp	r3, #83	; 0x53
 80023da:	d001      	beq.n	80023e0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80023dc:	f7ff fd4c 	bl	8001e78 <_DoInit>
  SEGGER_RTT_LOCK();
 80023e0:	f3ef 8311 	mrs	r3, BASEPRI
 80023e4:	f04f 0120 	mov.w	r1, #32
 80023e8:	f381 8811 	msr	BASEPRI, r1
 80023ec:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80023ee:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80023f0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3304      	adds	r3, #4
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbeb      	blt.n	80023f6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800241e:	e000      	b.n	8002422 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002420:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	429a      	cmp	r2, r3
 800242a:	da3f      	bge.n	80024ac <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4613      	mov	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002440:	6939      	ldr	r1, [r7, #16]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	3304      	adds	r3, #4
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002456:	6939      	ldr	r1, [r7, #16]
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	3320      	adds	r3, #32
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800246a:	6939      	ldr	r1, [r7, #16]
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	3328      	adds	r3, #40	; 0x28
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800247e:	6939      	ldr	r1, [r7, #16]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3324      	adds	r3, #36	; 0x24
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8002492:	6939      	ldr	r1, [r7, #16]
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	332c      	adds	r3, #44	; 0x2c
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80024a6:	f3bf 8f5f 	dmb	sy
 80024aa:	e002      	b.n	80024b2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295
 80024b0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80024b8:	69fb      	ldr	r3, [r7, #28]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20004214 	.word	0x20004214

080024c8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80024d6:	4b21      	ldr	r3, [pc, #132]	; (800255c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b53      	cmp	r3, #83	; 0x53
 80024e2:	d001      	beq.n	80024e8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80024e4:	f7ff fcc8 	bl	8001e78 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80024ea:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d82c      	bhi.n	800254c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80024f2:	f3ef 8311 	mrs	r3, BASEPRI
 80024f6:	f04f 0120 	mov.w	r1, #32
 80024fa:	f381 8811 	msr	BASEPRI, r1
 80024fe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	3360      	adds	r3, #96	; 0x60
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800253a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800253c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	e002      	b.n	8002552 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002554:	4618      	mov	r0, r3
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20004214 	.word	0x20004214

08002560 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002560:	b480      	push	{r7}
 8002562:	b087      	sub	sp, #28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	60fa      	str	r2, [r7, #12]
 8002576:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d90a      	bls.n	8002594 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002582:	e007      	b.n	8002594 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	1c53      	adds	r3, r2, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1c59      	adds	r1, r3, #1
 800258e:	60f9      	str	r1, [r7, #12]
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <_EncodeStr+0x46>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ee      	bne.n	8002584 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80025b2:	68fb      	ldr	r3, [r7, #12]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3307      	adds	r3, #7
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80025de:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <_HandleIncomingPacket+0xd8>)
 80025e0:	7e1b      	ldrb	r3, [r3, #24]
 80025e2:	4618      	mov	r0, r3
 80025e4:	1cfb      	adds	r3, r7, #3
 80025e6:	2201      	movs	r2, #1
 80025e8:	4619      	mov	r1, r3
 80025ea:	f7ff fded 	bl	80021c8 <SEGGER_RTT_ReadNoLock>
 80025ee:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d057      	beq.n	80026a6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d031      	beq.n	8002660 <_HandleIncomingPacket+0x88>
 80025fc:	2b80      	cmp	r3, #128	; 0x80
 80025fe:	dc40      	bgt.n	8002682 <_HandleIncomingPacket+0xaa>
 8002600:	2b07      	cmp	r3, #7
 8002602:	dc15      	bgt.n	8002630 <_HandleIncomingPacket+0x58>
 8002604:	2b00      	cmp	r3, #0
 8002606:	dd3c      	ble.n	8002682 <_HandleIncomingPacket+0xaa>
 8002608:	3b01      	subs	r3, #1
 800260a:	2b06      	cmp	r3, #6
 800260c:	d839      	bhi.n	8002682 <_HandleIncomingPacket+0xaa>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <_HandleIncomingPacket+0x3c>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002637 	.word	0x08002637
 8002618:	0800263d 	.word	0x0800263d
 800261c:	08002643 	.word	0x08002643
 8002620:	08002649 	.word	0x08002649
 8002624:	0800264f 	.word	0x0800264f
 8002628:	08002655 	.word	0x08002655
 800262c:	0800265b 	.word	0x0800265b
 8002630:	2b7f      	cmp	r3, #127	; 0x7f
 8002632:	d033      	beq.n	800269c <_HandleIncomingPacket+0xc4>
 8002634:	e025      	b.n	8002682 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002636:	f000 feeb 	bl	8003410 <SEGGER_SYSVIEW_Start>
      break;
 800263a:	e034      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800263c:	f000 ffa4 	bl	8003588 <SEGGER_SYSVIEW_Stop>
      break;
 8002640:	e031      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002642:	f001 f97d 	bl	8003940 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002646:	e02e      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002648:	f001 f942 	bl	80038d0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800264c:	e02b      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800264e:	f000 ffc1 	bl	80035d4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002652:	e028      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002654:	f001 fbaa 	bl	8003dac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002658:	e025      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800265a:	f001 fb89 	bl	8003d70 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800265e:	e022      	b.n	80026a6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002660:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <_HandleIncomingPacket+0xd8>)
 8002662:	7e1b      	ldrb	r3, [r3, #24]
 8002664:	4618      	mov	r0, r3
 8002666:	1cfb      	adds	r3, r7, #3
 8002668:	2201      	movs	r2, #1
 800266a:	4619      	mov	r1, r3
 800266c:	f7ff fdac 	bl	80021c8 <SEGGER_RTT_ReadNoLock>
 8002670:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	4618      	mov	r0, r3
 800267c:	f001 faee 	bl	8003c5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002680:	e00e      	b.n	80026a0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	b25b      	sxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	da0c      	bge.n	80026a4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <_HandleIncomingPacket+0xd8>)
 800268c:	7e1b      	ldrb	r3, [r3, #24]
 800268e:	4618      	mov	r0, r3
 8002690:	1cfb      	adds	r3, r7, #3
 8002692:	2201      	movs	r2, #1
 8002694:	4619      	mov	r1, r3
 8002696:	f7ff fd97 	bl	80021c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800269a:	e003      	b.n	80026a4 <_HandleIncomingPacket+0xcc>
      break;
 800269c:	bf00      	nop
 800269e:	e002      	b.n	80026a6 <_HandleIncomingPacket+0xce>
      break;
 80026a0:	bf00      	nop
 80026a2:	e000      	b.n	80026a6 <_HandleIncomingPacket+0xce>
      break;
 80026a4:	bf00      	nop
    }
  }
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200056d4 	.word	0x200056d4

080026b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80026ba:	2301      	movs	r3, #1
 80026bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ce:	e00b      	b.n	80026e8 <_TrySendOverflowPacket+0x34>
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	1c59      	adds	r1, r3, #1
 80026d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80026da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	09db      	lsrs	r3, r3, #7
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	2b7f      	cmp	r3, #127	; 0x7f
 80026ec:	d8f0      	bhi.n	80026d0 <_TrySendOverflowPacket+0x1c>
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <_TrySendOverflowPacket+0xe4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	e00b      	b.n	8002730 <_TrySendOverflowPacket+0x7c>
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	6279      	str	r1, [r7, #36]	; 0x24
 8002722:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	09db      	lsrs	r3, r3, #7
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2b7f      	cmp	r3, #127	; 0x7f
 8002734:	d8f0      	bhi.n	8002718 <_TrySendOverflowPacket+0x64>
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	627a      	str	r2, [r7, #36]	; 0x24
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	4618      	mov	r0, r3
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	461a      	mov	r2, r3
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	4619      	mov	r1, r3
 8002758:	f7fd fd3a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800275c:	4603      	mov	r3, r0
 800275e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002760:	f7ff fb10 	bl	8001d84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	3b01      	subs	r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	e004      	b.n	8002788 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	3301      	adds	r3, #1
 8002784:	4a03      	ldr	r2, [pc, #12]	; (8002794 <_TrySendOverflowPacket+0xe0>)
 8002786:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002788:	693b      	ldr	r3, [r7, #16]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3730      	adds	r7, #48	; 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200056d4 	.word	0x200056d4
 8002798:	e0001004 	.word	0xe0001004

0800279c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80027a8:	4b96      	ldr	r3, [pc, #600]	; (8002a04 <_SendPacket+0x268>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d010      	beq.n	80027d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80027b0:	4b94      	ldr	r3, [pc, #592]	; (8002a04 <_SendPacket+0x268>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8130 	beq.w	8002a1a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80027ba:	4b92      	ldr	r3, [pc, #584]	; (8002a04 <_SendPacket+0x268>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d109      	bne.n	80027d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80027c2:	f7ff ff77 	bl	80026b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80027c6:	4b8f      	ldr	r3, [pc, #572]	; (8002a04 <_SendPacket+0x268>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f040 8127 	bne.w	8002a1e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80027d0:	e001      	b.n	80027d6 <_SendPacket+0x3a>
    goto Send;
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <_SendPacket+0x3c>
Send:
 80027d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b1f      	cmp	r3, #31
 80027dc:	d809      	bhi.n	80027f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <_SendPacket+0x268>)
 80027e0:	69da      	ldr	r2, [r3, #28]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8118 	bne.w	8002a22 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b17      	cmp	r3, #23
 80027f6:	d807      	bhi.n	8002808 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e0c4      	b.n	8002992 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b7f      	cmp	r3, #127	; 0x7f
 8002814:	d912      	bls.n	800283c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	09da      	lsrs	r2, r3, #7
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3b01      	subs	r3, #1
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	3a01      	subs	r2, #1
 800282e:	60fa      	str	r2, [r7, #12]
 8002830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e006      	b.n	800284a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3b01      	subs	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b7e      	cmp	r3, #126	; 0x7e
 800284e:	d807      	bhi.n	8002860 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3b01      	subs	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e098      	b.n	8002992 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002866:	d212      	bcs.n	800288e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	09da      	lsrs	r2, r3, #7
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3b01      	subs	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	3a01      	subs	r2, #1
 8002880:	60fa      	str	r2, [r7, #12]
 8002882:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002886:	b2da      	uxtb	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e081      	b.n	8002992 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002894:	d21d      	bcs.n	80028d2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0b9a      	lsrs	r2, r3, #14
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3b01      	subs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	09db      	lsrs	r3, r3, #7
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	3a01      	subs	r2, #1
 80028b0:	60fa      	str	r2, [r7, #12]
 80028b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	3a01      	subs	r2, #1
 80028c4:	60fa      	str	r2, [r7, #12]
 80028c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e05f      	b.n	8002992 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d8:	d228      	bcs.n	800292c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0d5a      	lsrs	r2, r3, #21
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0b9b      	lsrs	r3, r3, #14
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	3a01      	subs	r2, #1
 80028f4:	60fa      	str	r2, [r7, #12]
 80028f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	09db      	lsrs	r3, r3, #7
 8002904:	b2db      	uxtb	r3, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	3a01      	subs	r2, #1
 800290a:	60fa      	str	r2, [r7, #12]
 800290c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	3a01      	subs	r2, #1
 800291e:	60fa      	str	r2, [r7, #12]
 8002920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e032      	b.n	8002992 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	0f1a      	lsrs	r2, r3, #28
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3b01      	subs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0d5b      	lsrs	r3, r3, #21
 8002940:	b2db      	uxtb	r3, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	3a01      	subs	r2, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0b9b      	lsrs	r3, r3, #14
 8002956:	b2db      	uxtb	r3, r3
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	3a01      	subs	r2, #1
 800295c:	60fa      	str	r2, [r7, #12]
 800295e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	09db      	lsrs	r3, r3, #7
 800296c:	b2db      	uxtb	r3, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	3a01      	subs	r2, #1
 8002972:	60fa      	str	r2, [r7, #12]
 8002974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	3a01      	subs	r2, #1
 8002986:	60fa      	str	r2, [r7, #12]
 8002988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <_SendPacket+0x26c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <_SendPacket+0x268>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	e00b      	b.n	80029c4 <_SendPacket+0x228>
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	6279      	str	r1, [r7, #36]	; 0x24
 80029b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	09db      	lsrs	r3, r3, #7
 80029c2:	623b      	str	r3, [r7, #32]
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	2b7f      	cmp	r3, #127	; 0x7f
 80029c8:	d8f0      	bhi.n	80029ac <_SendPacket+0x210>
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	627a      	str	r2, [r7, #36]	; 0x24
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80029da:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <_SendPacket+0x268>)
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	4618      	mov	r0, r3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	f7fd fbf1 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80029ee:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80029f0:	f7ff f9c8 	bl	8001d84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80029fa:	4a02      	ldr	r2, [pc, #8]	; (8002a04 <_SendPacket+0x268>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	60d3      	str	r3, [r2, #12]
 8002a00:	e010      	b.n	8002a24 <_SendPacket+0x288>
 8002a02:	bf00      	nop
 8002a04:	200056d4 	.word	0x200056d4
 8002a08:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <_SendPacket+0x2d8>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <_SendPacket+0x2d8>)
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e004      	b.n	8002a24 <_SendPacket+0x288>
    goto SendDone;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <_SendPacket+0x288>
      goto SendDone;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <_SendPacket+0x288>
      goto SendDone;
 8002a22:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <_SendPacket+0x2d8>)
 8002a26:	7e1b      	ldrb	r3, [r3, #24]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <_SendPacket+0x2dc>)
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	440b      	add	r3, r1
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	336c      	adds	r3, #108	; 0x6c
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <_SendPacket+0x2d8>)
 8002a3c:	7e1b      	ldrb	r3, [r3, #24]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	490d      	ldr	r1, [pc, #52]	; (8002a78 <_SendPacket+0x2dc>)
 8002a42:	4603      	mov	r3, r0
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4403      	add	r3, r0
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3370      	adds	r3, #112	; 0x70
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d00b      	beq.n	8002a6c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a54:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <_SendPacket+0x2d8>)
 8002a56:	789b      	ldrb	r3, [r3, #2]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <_SendPacket+0x2d8>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002a62:	f7ff fdb9 	bl	80025d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002a66:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <_SendPacket+0x2d8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002a6c:	bf00      	nop
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	200056d4 	.word	0x200056d4
 8002a78:	20004214 	.word	0x20004214

08002a7c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d80a      	bhi.n	8002aac <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6051      	str	r1, [r2, #4]
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b80      	cmp	r3, #128	; 0x80
 8002ab2:	d15a      	bne.n	8002b6a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	e00b      	b.n	8002aee <_StoreChar+0x72>
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	1c59      	adds	r1, r3, #1
 8002ade:	6279      	str	r1, [r7, #36]	; 0x24
 8002ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	09db      	lsrs	r3, r3, #7
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b7f      	cmp	r3, #127	; 0x7f
 8002af2:	d8f0      	bhi.n	8002ad6 <_StoreChar+0x5a>
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	627a      	str	r2, [r7, #36]	; 0x24
 8002afa:	6a3a      	ldr	r2, [r7, #32]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e00b      	b.n	8002b26 <_StoreChar+0xaa>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	1c59      	adds	r1, r3, #1
 8002b16:	61f9      	str	r1, [r7, #28]
 8002b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	09db      	lsrs	r3, r3, #7
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b7f      	cmp	r3, #127	; 0x7f
 8002b2a:	d8f0      	bhi.n	8002b0e <_StoreChar+0x92>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	61fa      	str	r2, [r7, #28]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	221a      	movs	r2, #26
 8002b42:	6939      	ldr	r1, [r7, #16]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fe29 	bl	800279c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fd36 	bl	80025c0 <_PreparePacket>
 8002b54:	4602      	mov	r2, r0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	611a      	str	r2, [r3, #16]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8002b86:	2301      	movs	r3, #1
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002b8e:	e007      	b.n	8002ba0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8002b90:	6a3a      	ldr	r2, [r7, #32]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	623b      	str	r3, [r7, #32]
    Width++;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8002ba0:	6a3a      	ldr	r2, [r7, #32]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d2f3      	bcs.n	8002b90 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d901      	bls.n	8002bb4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11f      	bne.n	8002bfe <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01c      	beq.n	8002bfe <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d005      	beq.n	8002bda <_PrintUnsigned+0x66>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <_PrintUnsigned+0x66>
        c = '0';
 8002bd4:	2330      	movs	r3, #48	; 0x30
 8002bd6:	76fb      	strb	r3, [r7, #27]
 8002bd8:	e001      	b.n	8002bde <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8002bda:	2320      	movs	r3, #32
 8002bdc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002bde:	e007      	b.n	8002bf0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	3b01      	subs	r3, #1
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8002be6:	7efb      	ldrb	r3, [r7, #27]
 8002be8:	4619      	mov	r1, r3
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff ff46 	bl	8002a7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <_PrintUnsigned+0x8a>
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3f0      	bcc.n	8002be0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d903      	bls.n	8002c0c <_PrintUnsigned+0x98>
      NumDigits--;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	e009      	b.n	8002c20 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d200      	bcs.n	8002c20 <_PrintUnsigned+0xac>
        break;
 8002c1e:	e005      	b.n	8002c2c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8002c2a:	e7e8      	b.n	8002bfe <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <_PrintUnsigned+0x128>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	4413      	add	r3, r2
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff ff14 	bl	8002a7c <_StoreChar>
    Digit /= Base;
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e3      	bne.n	8002c2c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8002c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c74:	e006      	b.n	8002c84 <_PrintUnsigned+0x110>
        FieldWidth--;
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fefc 	bl	8002a7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <_PrintUnsigned+0x11e>
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3f1      	bcc.n	8002c76 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	; 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	08005e50 	.word	0x08005e50

08002ca0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bfb8      	it	lt
 8002cb4:	425b      	neglt	r3, r3
 8002cb6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002cbc:	e007      	b.n	8002cce <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002cc6:	613b      	str	r3, [r7, #16]
    Width++;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	daf3      	bge.n	8002cbe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d901      	bls.n	8002ce2 <_PrintInt+0x42>
    Width = NumDigits;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <_PrintInt+0x5e>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db04      	blt.n	8002cf8 <_PrintInt+0x58>
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <_PrintInt+0x5e>
    FieldWidth--;
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <_PrintInt+0x6e>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <_PrintInt+0x9c>
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d1e:	e006      	b.n	8002d2e <_PrintInt+0x8e>
        FieldWidth--;
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8002d26:	2120      	movs	r1, #32
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f7ff fea7 	bl	8002a7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <_PrintInt+0x9c>
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3f1      	bcc.n	8002d20 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	da07      	bge.n	8002d52 <_PrintInt+0xb2>
    v = -v;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	425b      	negs	r3, r3
 8002d46:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8002d48:	212d      	movs	r1, #45	; 0x2d
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fe96 	bl	8002a7c <_StoreChar>
 8002d50:	e008      	b.n	8002d64 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8002d5c:	212b      	movs	r1, #43	; 0x2b
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff fe8c 	bl	8002a7c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d019      	beq.n	8002da2 <_PrintInt+0x102>
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d114      	bne.n	8002da2 <_PrintInt+0x102>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d111      	bne.n	8002da2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d84:	e006      	b.n	8002d94 <_PrintInt+0xf4>
        FieldWidth--;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8002d8c:	2130      	movs	r1, #48	; 0x30
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fe74 	bl	8002a7c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <_PrintInt+0x102>
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3f1      	bcc.n	8002d86 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	9301      	str	r3, [sp, #4]
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fedf 	bl	8002b74 <_PrintUnsigned>
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b098      	sub	sp, #96	; 0x60
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002dcc:	f3ef 8311 	mrs	r3, BASEPRI
 8002dd0:	f04f 0120 	mov.w	r1, #32
 8002dd4:	f381 8811 	msr	BASEPRI, r1
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dda:	48b7      	ldr	r0, [pc, #732]	; (80030b8 <_VPrintTarget+0x2f8>)
 8002ddc:	f7ff fbf0 	bl	80025c0 <_PreparePacket>
 8002de0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8002de2:	4bb5      	ldr	r3, [pc, #724]	; (80030b8 <_VPrintTarget+0x2f8>)
 8002de4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3301      	adds	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8002e06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 81a8 	beq.w	8003160 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8002e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e14:	2b25      	cmp	r3, #37	; 0x25
 8002e16:	f040 8195 	bne.w	8003144 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8002e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002e2e:	3b23      	subs	r3, #35	; 0x23
 8002e30:	2b0d      	cmp	r3, #13
 8002e32:	d83f      	bhi.n	8002eb4 <_VPrintTarget+0xf4>
 8002e34:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <_VPrintTarget+0x7c>)
 8002e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3a:	bf00      	nop
 8002e3c:	08002ea5 	.word	0x08002ea5
 8002e40:	08002eb5 	.word	0x08002eb5
 8002e44:	08002eb5 	.word	0x08002eb5
 8002e48:	08002eb5 	.word	0x08002eb5
 8002e4c:	08002eb5 	.word	0x08002eb5
 8002e50:	08002eb5 	.word	0x08002eb5
 8002e54:	08002eb5 	.word	0x08002eb5
 8002e58:	08002eb5 	.word	0x08002eb5
 8002e5c:	08002e95 	.word	0x08002e95
 8002e60:	08002eb5 	.word	0x08002eb5
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002eb5 	.word	0x08002eb5
 8002e6c:	08002eb5 	.word	0x08002eb5
 8002e70:	08002e85 	.word	0x08002e85
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8002e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e01a      	b.n	8002eba <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8002e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e012      	b.n	8002eba <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8002e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e00a      	b.n	8002eba <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8002ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e002      	b.n	8002eba <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb8:	bf00      	nop
        }
      } while (v);
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1b0      	bne.n	8002e22 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8002ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8002ed2:	d912      	bls.n	8002efa <_VPrintTarget+0x13a>
 8002ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ed8:	2b39      	cmp	r3, #57	; 0x39
 8002eda:	d80e      	bhi.n	8002efa <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8002ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	461a      	mov	r2, r3
 8002eee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3b30      	subs	r3, #48	; 0x30
 8002ef6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8002ef8:	e7e4      	b.n	8002ec4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8002f06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f0c:	d11d      	bne.n	8002f4a <_VPrintTarget+0x18a>
        sFormat++;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8002f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f20:	2b2f      	cmp	r3, #47	; 0x2f
 8002f22:	d912      	bls.n	8002f4a <_VPrintTarget+0x18a>
 8002f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f28:	2b39      	cmp	r3, #57	; 0x39
 8002f2a:	d80e      	bhi.n	8002f4a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8002f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f42:	4413      	add	r3, r2
 8002f44:	3b30      	subs	r3, #48	; 0x30
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8002f48:	e7e4      	b.n	8002f14 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8002f52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f56:	2b6c      	cmp	r3, #108	; 0x6c
 8002f58:	d003      	beq.n	8002f62 <_VPrintTarget+0x1a2>
 8002f5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f5e:	2b68      	cmp	r3, #104	; 0x68
 8002f60:	d107      	bne.n	8002f72 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8002f70:	e7ef      	b.n	8002f52 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8002f72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f76:	2b25      	cmp	r3, #37	; 0x25
 8002f78:	f000 80d8 	beq.w	800312c <_VPrintTarget+0x36c>
 8002f7c:	2b25      	cmp	r3, #37	; 0x25
 8002f7e:	f2c0 80dc 	blt.w	800313a <_VPrintTarget+0x37a>
 8002f82:	2b78      	cmp	r3, #120	; 0x78
 8002f84:	f300 80d9 	bgt.w	800313a <_VPrintTarget+0x37a>
 8002f88:	2b58      	cmp	r3, #88	; 0x58
 8002f8a:	f2c0 80d6 	blt.w	800313a <_VPrintTarget+0x37a>
 8002f8e:	3b58      	subs	r3, #88	; 0x58
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	f200 80d2 	bhi.w	800313a <_VPrintTarget+0x37a>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <_VPrintTarget+0x1dc>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08003093 	.word	0x08003093
 8002fa0:	0800313b 	.word	0x0800313b
 8002fa4:	0800313b 	.word	0x0800313b
 8002fa8:	0800313b 	.word	0x0800313b
 8002fac:	0800313b 	.word	0x0800313b
 8002fb0:	0800313b 	.word	0x0800313b
 8002fb4:	0800313b 	.word	0x0800313b
 8002fb8:	0800313b 	.word	0x0800313b
 8002fbc:	0800313b 	.word	0x0800313b
 8002fc0:	0800313b 	.word	0x0800313b
 8002fc4:	0800313b 	.word	0x0800313b
 8002fc8:	08003021 	.word	0x08003021
 8002fcc:	08003047 	.word	0x08003047
 8002fd0:	0800313b 	.word	0x0800313b
 8002fd4:	0800313b 	.word	0x0800313b
 8002fd8:	0800313b 	.word	0x0800313b
 8002fdc:	0800313b 	.word	0x0800313b
 8002fe0:	0800313b 	.word	0x0800313b
 8002fe4:	0800313b 	.word	0x0800313b
 8002fe8:	0800313b 	.word	0x0800313b
 8002fec:	0800313b 	.word	0x0800313b
 8002ff0:	0800313b 	.word	0x0800313b
 8002ff4:	0800313b 	.word	0x0800313b
 8002ff8:	0800313b 	.word	0x0800313b
 8002ffc:	08003107 	.word	0x08003107
 8003000:	0800313b 	.word	0x0800313b
 8003004:	0800313b 	.word	0x0800313b
 8003008:	080030bd 	.word	0x080030bd
 800300c:	0800313b 	.word	0x0800313b
 8003010:	0800306d 	.word	0x0800306d
 8003014:	0800313b 	.word	0x0800313b
 8003018:	0800313b 	.word	0x0800313b
 800301c:	08003093 	.word	0x08003093
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800302e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8003034:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fd1c 	bl	8002a7c <_StoreChar>
        break;
 8003044:	e07a      	b.n	800313c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1d19      	adds	r1, r3, #4
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6011      	str	r1, [r2, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003054:	f107 0010 	add.w	r0, r7, #16
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003062:	220a      	movs	r2, #10
 8003064:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003066:	f7ff fe1b 	bl	8002ca0 <_PrintInt>
        break;
 800306a:	e067      	b.n	800313c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1d19      	adds	r1, r3, #4
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6011      	str	r1, [r2, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800307a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800307c:	f107 0010 	add.w	r0, r7, #16
 8003080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	220a      	movs	r2, #10
 800308c:	f7ff fd72 	bl	8002b74 <_PrintUnsigned>
        break;
 8003090:	e054      	b.n	800313c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	1d19      	adds	r1, r3, #4
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6011      	str	r1, [r2, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80030a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030a2:	f107 0010 	add.w	r0, r7, #16
 80030a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	2210      	movs	r2, #16
 80030b2:	f7ff fd5f 	bl	8002b74 <_PrintUnsigned>
        break;
 80030b6:	e041      	b.n	800313c <_VPrintTarget+0x37c>
 80030b8:	20005704 	.word	0x20005704
      case 's':
        s = va_arg(*pParamList, const char*);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1d19      	adds	r1, r3, #4
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6011      	str	r1, [r2, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 80030ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <_VPrintTarget+0x314>
          s = "(null)";
 80030d0:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <_VPrintTarget+0x43c>)
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 80030d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80030dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030de:	3301      	adds	r3, #1
 80030e0:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80030e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80030ea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80030ee:	f107 0310 	add.w	r3, r7, #16
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fcc1 	bl	8002a7c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2b7f      	cmp	r3, #127	; 0x7f
 80030fe:	d9e9      	bls.n	80030d4 <_VPrintTarget+0x314>
        break;
 8003100:	e01c      	b.n	800313c <_VPrintTarget+0x37c>
            break;
 8003102:	bf00      	nop
        break;
 8003104:	e01a      	b.n	800313c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	1d19      	adds	r1, r3, #4
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6011      	str	r1, [r2, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003114:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003116:	f107 0010 	add.w	r0, r7, #16
 800311a:	2300      	movs	r3, #0
 800311c:	9301      	str	r3, [sp, #4]
 800311e:	2308      	movs	r3, #8
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	2308      	movs	r3, #8
 8003124:	2210      	movs	r2, #16
 8003126:	f7ff fd25 	bl	8002b74 <_PrintUnsigned>
        break;
 800312a:	e007      	b.n	800313c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	2125      	movs	r1, #37	; 0x25
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fca2 	bl	8002a7c <_StoreChar>
        break;
 8003138:	e000      	b.n	800313c <_VPrintTarget+0x37c>
      default:
        break;
 800313a:	bf00      	nop
      }
      sFormat++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3301      	adds	r3, #1
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e007      	b.n	8003154 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8003144:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fc94 	bl	8002a7c <_StoreChar>
    }
  } while (*sFormat);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f47f ae4d 	bne.w	8002df8 <_VPrintTarget+0x38>
 800315e:	e000      	b.n	8003162 <_VPrintTarget+0x3a2>
      break;
 8003160:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d041      	beq.n	80031ec <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
 8003178:	e00b      	b.n	8003192 <_VPrintTarget+0x3d2>
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	b2da      	uxtb	r2, r3
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	09db      	lsrs	r3, r3, #7
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	2b7f      	cmp	r3, #127	; 0x7f
 8003196:	d8f0      	bhi.n	800317a <_VPrintTarget+0x3ba>
 8003198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800319e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
 80031ac:	2300      	movs	r3, #0
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
 80031b0:	e00b      	b.n	80031ca <_VPrintTarget+0x40a>
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b8:	1c59      	adds	r1, r3, #1
 80031ba:	6379      	str	r1, [r7, #52]	; 0x34
 80031bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	09db      	lsrs	r3, r3, #7
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	2b7f      	cmp	r3, #127	; 0x7f
 80031ce:	d8f0      	bhi.n	80031b2 <_VPrintTarget+0x3f2>
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	637a      	str	r2, [r7, #52]	; 0x34
 80031d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031de:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	221a      	movs	r2, #26
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fad8 	bl	800279c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80031f2:	bf00      	nop
 80031f4:	3758      	adds	r7, #88	; 0x58
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	08005de4 	.word	0x08005de4

08003200 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800320e:	2300      	movs	r3, #0
 8003210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003214:	4917      	ldr	r1, [pc, #92]	; (8003274 <SEGGER_SYSVIEW_Init+0x74>)
 8003216:	4818      	ldr	r0, [pc, #96]	; (8003278 <SEGGER_SYSVIEW_Init+0x78>)
 8003218:	f7ff f8d2 	bl	80023c0 <SEGGER_RTT_AllocUpBuffer>
 800321c:	4603      	mov	r3, r0
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003222:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003226:	785a      	ldrb	r2, [r3, #1]
 8003228:	4b14      	ldr	r3, [pc, #80]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 800322a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 800322e:	7e1b      	ldrb	r3, [r3, #24]
 8003230:	4618      	mov	r0, r3
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2308      	movs	r3, #8
 8003238:	4a11      	ldr	r2, [pc, #68]	; (8003280 <SEGGER_SYSVIEW_Init+0x80>)
 800323a:	490f      	ldr	r1, [pc, #60]	; (8003278 <SEGGER_SYSVIEW_Init+0x78>)
 800323c:	f7ff f944 	bl	80024c8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <SEGGER_SYSVIEW_Init+0x84>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a0c      	ldr	r2, [pc, #48]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 800324c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800324e:	4a0b      	ldr	r2, [pc, #44]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003260:	4a06      	ldr	r2, [pc, #24]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <SEGGER_SYSVIEW_Init+0x7c>)
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	200046cc 	.word	0x200046cc
 8003278:	08005dec 	.word	0x08005dec
 800327c:	200056d4 	.word	0x200056d4
 8003280:	200056cc 	.word	0x200056cc
 8003284:	e0001004 	.word	0xe0001004

08003288 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6113      	str	r3, [r2, #16]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	200056d4 	.word	0x200056d4

080032a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80032b0:	f3ef 8311 	mrs	r3, BASEPRI
 80032b4:	f04f 0120 	mov.w	r1, #32
 80032b8:	f381 8811 	msr	BASEPRI, r1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4808      	ldr	r0, [pc, #32]	; (80032e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80032c0:	f7ff f97e 	bl	80025c0 <_PreparePacket>
 80032c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68b8      	ldr	r0, [r7, #8]
 80032cc:	f7ff fa66 	bl	800279c <_SendPacket>
  RECORD_END();
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f383 8811 	msr	BASEPRI, r3
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20005704 	.word	0x20005704

080032e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80032ee:	f3ef 8311 	mrs	r3, BASEPRI
 80032f2:	f04f 0120 	mov.w	r1, #32
 80032f6:	f381 8811 	msr	BASEPRI, r1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	4816      	ldr	r0, [pc, #88]	; (8003358 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80032fe:	f7ff f95f 	bl	80025c0 <_PreparePacket>
 8003302:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e00b      	b.n	800332a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	1c59      	adds	r1, r3, #1
 800331a:	61f9      	str	r1, [r7, #28]
 800331c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	09db      	lsrs	r3, r3, #7
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2b7f      	cmp	r3, #127	; 0x7f
 800332e:	d8f0      	bhi.n	8003312 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	61fa      	str	r2, [r7, #28]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	6938      	ldr	r0, [r7, #16]
 8003346:	f7ff fa29 	bl	800279c <_SendPacket>
  RECORD_END();
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f383 8811 	msr	BASEPRI, r3
}
 8003350:	bf00      	nop
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20005704 	.word	0x20005704

0800335c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	; 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003368:	f3ef 8311 	mrs	r3, BASEPRI
 800336c:	f04f 0120 	mov.w	r1, #32
 8003370:	f381 8811 	msr	BASEPRI, r1
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	4825      	ldr	r0, [pc, #148]	; (800340c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003378:	f7ff f922 	bl	80025c0 <_PreparePacket>
 800337c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
 800338a:	e00b      	b.n	80033a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	b2da      	uxtb	r2, r3
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	09db      	lsrs	r3, r3, #7
 80033a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	2b7f      	cmp	r3, #127	; 0x7f
 80033a8:	d8f0      	bhi.n	800338c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	e00b      	b.n	80033dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	6279      	str	r1, [r7, #36]	; 0x24
 80033ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	09db      	lsrs	r3, r3, #7
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	2b7f      	cmp	r3, #127	; 0x7f
 80033e0:	d8f0      	bhi.n	80033c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	627a      	str	r2, [r7, #36]	; 0x24
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6979      	ldr	r1, [r7, #20]
 80033f6:	69b8      	ldr	r0, [r7, #24]
 80033f8:	f7ff f9d0 	bl	800279c <_SendPacket>
  RECORD_END();
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f383 8811 	msr	BASEPRI, r3
}
 8003402:	bf00      	nop
 8003404:	3730      	adds	r7, #48	; 0x30
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20005704 	.word	0x20005704

08003410 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b08c      	sub	sp, #48	; 0x30
 8003414:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003416:	4b59      	ldr	r3, [pc, #356]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800341c:	f3ef 8311 	mrs	r3, BASEPRI
 8003420:	f04f 0120 	mov.w	r1, #32
 8003424:	f381 8811 	msr	BASEPRI, r1
 8003428:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800342a:	4b54      	ldr	r3, [pc, #336]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	220a      	movs	r2, #10
 8003430:	4953      	ldr	r1, [pc, #332]	; (8003580 <SEGGER_SYSVIEW_Start+0x170>)
 8003432:	4618      	mov	r0, r3
 8003434:	f7fc fecc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800343e:	f7fe fca1 	bl	8001d84 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003442:	200a      	movs	r0, #10
 8003444:	f7ff ff30 	bl	80032a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003448:	f3ef 8311 	mrs	r3, BASEPRI
 800344c:	f04f 0120 	mov.w	r1, #32
 8003450:	f381 8811 	msr	BASEPRI, r1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	484b      	ldr	r0, [pc, #300]	; (8003584 <SEGGER_SYSVIEW_Start+0x174>)
 8003458:	f7ff f8b2 	bl	80025c0 <_PreparePacket>
 800345c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003466:	4b45      	ldr	r3, [pc, #276]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
 800346c:	e00b      	b.n	8003486 <SEGGER_SYSVIEW_Start+0x76>
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	b2da      	uxtb	r2, r3
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	1c59      	adds	r1, r3, #1
 8003476:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003482:	09db      	lsrs	r3, r3, #7
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b7f      	cmp	r3, #127	; 0x7f
 800348a:	d8f0      	bhi.n	800346e <SEGGER_SYSVIEW_Start+0x5e>
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
 80034a0:	4b36      	ldr	r3, [pc, #216]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	e00b      	b.n	80034c0 <SEGGER_SYSVIEW_Start+0xb0>
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	6279      	str	r1, [r7, #36]	; 0x24
 80034b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	09db      	lsrs	r3, r3, #7
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	2b7f      	cmp	r3, #127	; 0x7f
 80034c4:	d8f0      	bhi.n	80034a8 <SEGGER_SYSVIEW_Start+0x98>
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	627a      	str	r2, [r7, #36]	; 0x24
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	61bb      	str	r3, [r7, #24]
 80034e0:	e00b      	b.n	80034fa <SEGGER_SYSVIEW_Start+0xea>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	1c59      	adds	r1, r3, #1
 80034ea:	61f9      	str	r1, [r7, #28]
 80034ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	09db      	lsrs	r3, r3, #7
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b7f      	cmp	r3, #127	; 0x7f
 80034fe:	d8f0      	bhi.n	80034e2 <SEGGER_SYSVIEW_Start+0xd2>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	61fa      	str	r2, [r7, #28]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	e00b      	b.n	8003532 <SEGGER_SYSVIEW_Start+0x122>
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	1c59      	adds	r1, r3, #1
 8003522:	6179      	str	r1, [r7, #20]
 8003524:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	09db      	lsrs	r3, r3, #7
 8003530:	613b      	str	r3, [r7, #16]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b7f      	cmp	r3, #127	; 0x7f
 8003536:	d8f0      	bhi.n	800351a <SEGGER_SYSVIEW_Start+0x10a>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	617a      	str	r2, [r7, #20]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	701a      	strb	r2, [r3, #0]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003548:	2218      	movs	r2, #24
 800354a:	6839      	ldr	r1, [r7, #0]
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff f925 	bl	800279c <_SendPacket>
      RECORD_END();
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <SEGGER_SYSVIEW_Start+0x16c>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003566:	f000 f9eb 	bl	8003940 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800356a:	f000 f9b1 	bl	80038d0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800356e:	f000 fc1d 	bl	8003dac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003572:	bf00      	nop
 8003574:	3730      	adds	r7, #48	; 0x30
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200056d4 	.word	0x200056d4
 8003580:	08005e44 	.word	0x08005e44
 8003584:	20005704 	.word	0x20005704

08003588 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800358e:	f3ef 8311 	mrs	r3, BASEPRI
 8003592:	f04f 0120 	mov.w	r1, #32
 8003596:	f381 8811 	msr	BASEPRI, r1
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <SEGGER_SYSVIEW_Stop+0x44>)
 800359e:	f7ff f80f 	bl	80025c0 <_PreparePacket>
 80035a2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80035ac:	220b      	movs	r2, #11
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	6838      	ldr	r0, [r7, #0]
 80035b2:	f7ff f8f3 	bl	800279c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <SEGGER_SYSVIEW_Stop+0x48>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f383 8811 	msr	BASEPRI, r3
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20005704 	.word	0x20005704
 80035d0:	200056d4 	.word	0x200056d4

080035d4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80035da:	f3ef 8311 	mrs	r3, BASEPRI
 80035de:	f04f 0120 	mov.w	r1, #32
 80035e2:	f381 8811 	msr	BASEPRI, r1
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	4845      	ldr	r0, [pc, #276]	; (8003700 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80035ea:	f7fe ffe9 	bl	80025c0 <_PreparePacket>
 80035ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f8:	4b42      	ldr	r3, [pc, #264]	; (8003704 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fe:	e00b      	b.n	8003618 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	b2da      	uxtb	r2, r3
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	62f9      	str	r1, [r7, #44]	; 0x2c
 800360a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	09db      	lsrs	r3, r3, #7
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
 8003618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361a:	2b7f      	cmp	r3, #127	; 0x7f
 800361c:	d8f0      	bhi.n	8003600 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	e00b      	b.n	8003652 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6279      	str	r1, [r7, #36]	; 0x24
 8003644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	09db      	lsrs	r3, r3, #7
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	2b7f      	cmp	r3, #127	; 0x7f
 8003656:	d8f0      	bhi.n	800363a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	627a      	str	r2, [r7, #36]	; 0x24
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e00b      	b.n	800368c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	61f9      	str	r1, [r7, #28]
 800367e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	09db      	lsrs	r3, r3, #7
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b7f      	cmp	r3, #127	; 0x7f
 8003690:	d8f0      	bhi.n	8003674 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	61fa      	str	r2, [r7, #28]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e00b      	b.n	80036c4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	6179      	str	r1, [r7, #20]
 80036b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	09db      	lsrs	r3, r3, #7
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b7f      	cmp	r3, #127	; 0x7f
 80036c8:	d8f0      	bhi.n	80036ac <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	617a      	str	r2, [r7, #20]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80036da:	2218      	movs	r2, #24
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	f7ff f85c 	bl	800279c <_SendPacket>
  RECORD_END();
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	4798      	blx	r3
  }
}
 80036f8:	bf00      	nop
 80036fa:	3730      	adds	r7, #48	; 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	20005704 	.word	0x20005704
 8003704:	200056d4 	.word	0x200056d4

08003708 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b092      	sub	sp, #72	; 0x48
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003710:	f3ef 8311 	mrs	r3, BASEPRI
 8003714:	f04f 0120 	mov.w	r1, #32
 8003718:	f381 8811 	msr	BASEPRI, r1
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	486a      	ldr	r0, [pc, #424]	; (80038c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003720:	f7fe ff4e 	bl	80025c0 <_PreparePacket>
 8003724:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b66      	ldr	r3, [pc, #408]	; (80038cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	643b      	str	r3, [r7, #64]	; 0x40
 800373a:	e00b      	b.n	8003754 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373e:	b2da      	uxtb	r2, r3
 8003740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	6479      	str	r1, [r7, #68]	; 0x44
 8003746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003750:	09db      	lsrs	r3, r3, #7
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
 8003754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003756:	2b7f      	cmp	r3, #127	; 0x7f
 8003758:	d8f0      	bhi.n	800373c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800375a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	647a      	str	r2, [r7, #68]	; 0x44
 8003760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003768:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
 8003774:	e00b      	b.n	800378e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	b2da      	uxtb	r2, r3
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377c:	1c59      	adds	r1, r3, #1
 800377e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003780:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	09db      	lsrs	r3, r3, #7
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	2b7f      	cmp	r3, #127	; 0x7f
 8003792:	d8f0      	bhi.n	8003776 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	63fa      	str	r2, [r7, #60]	; 0x3c
 800379a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	4619      	mov	r1, r3
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7fe fed7 	bl	8002560 <_EncodeStr>
 80037b2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80037b4:	2209      	movs	r2, #9
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	6938      	ldr	r0, [r7, #16]
 80037ba:	f7fe ffef 	bl	800279c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
 80037d2:	e00b      	b.n	80037ec <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037da:	1c59      	adds	r1, r3, #1
 80037dc:	6379      	str	r1, [r7, #52]	; 0x34
 80037de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	09db      	lsrs	r3, r3, #7
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	2b7f      	cmp	r3, #127	; 0x7f
 80037f0:	d8f0      	bhi.n	80037d4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	637a      	str	r2, [r7, #52]	; 0x34
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
 800380c:	e00b      	b.n	8003826 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	1c59      	adds	r1, r3, #1
 8003816:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	09db      	lsrs	r3, r3, #7
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	2b7f      	cmp	r3, #127	; 0x7f
 800382a:	d8f0      	bhi.n	800380e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	623b      	str	r3, [r7, #32]
 8003846:	e00b      	b.n	8003860 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	6279      	str	r1, [r7, #36]	; 0x24
 8003852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	09db      	lsrs	r3, r3, #7
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b7f      	cmp	r3, #127	; 0x7f
 8003864:	d8f0      	bhi.n	8003848 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	627a      	str	r2, [r7, #36]	; 0x24
 800386c:	6a3a      	ldr	r2, [r7, #32]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e00b      	b.n	8003898 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	61f9      	str	r1, [r7, #28]
 800388a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	09db      	lsrs	r3, r3, #7
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b7f      	cmp	r3, #127	; 0x7f
 800389c:	d8f0      	bhi.n	8003880 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	61fa      	str	r2, [r7, #28]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80038ae:	2215      	movs	r2, #21
 80038b0:	68f9      	ldr	r1, [r7, #12]
 80038b2:	6938      	ldr	r0, [r7, #16]
 80038b4:	f7fe ff72 	bl	800279c <_SendPacket>
  RECORD_END();
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f383 8811 	msr	BASEPRI, r3
}
 80038be:	bf00      	nop
 80038c0:	3748      	adds	r7, #72	; 0x48
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20005704 	.word	0x20005704
 80038cc:	200056d4 	.word	0x200056d4

080038d0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80038e6:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4798      	blx	r3
  }
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200056d4 	.word	0x200056d4

080038f8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003900:	f3ef 8311 	mrs	r3, BASEPRI
 8003904:	f04f 0120 	mov.w	r1, #32
 8003908:	f381 8811 	msr	BASEPRI, r1
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	480b      	ldr	r0, [pc, #44]	; (800393c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003910:	f7fe fe56 	bl	80025c0 <_PreparePacket>
 8003914:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	6938      	ldr	r0, [r7, #16]
 800391c:	f7fe fe20 	bl	8002560 <_EncodeStr>
 8003920:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003922:	220e      	movs	r2, #14
 8003924:	68f9      	ldr	r1, [r7, #12]
 8003926:	6938      	ldr	r0, [r7, #16]
 8003928:	f7fe ff38 	bl	800279c <_SendPacket>
  RECORD_END();
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f383 8811 	msr	BASEPRI, r3
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20005704 	.word	0x20005704

08003940 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003946:	4b15      	ldr	r3, [pc, #84]	; (800399c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01a      	beq.n	8003984 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800394e:	4b13      	ldr	r3, [pc, #76]	; (800399c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4798      	blx	r3
 8003960:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003964:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003966:	e9d7 0100 	ldrd	r0, r1, [r7]
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	000a      	movs	r2, r1
 8003974:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003976:	4613      	mov	r3, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4621      	mov	r1, r4
 800397c:	200d      	movs	r0, #13
 800397e:	f7ff fced 	bl	800335c <SEGGER_SYSVIEW_RecordU32x2>
 8003982:	e006      	b.n	8003992 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	200c      	movs	r0, #12
 800398c:	f7ff fcaa 	bl	80032e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}
 800399a:	bf00      	nop
 800399c:	200056d4 	.word	0x200056d4
 80039a0:	e0001004 	.word	0xe0001004

080039a4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039aa:	f3ef 8311 	mrs	r3, BASEPRI
 80039ae:	f04f 0120 	mov.w	r1, #32
 80039b2:	f381 8811 	msr	BASEPRI, r1
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	4819      	ldr	r0, [pc, #100]	; (8003a20 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80039ba:	f7fe fe01 	bl	80025c0 <_PreparePacket>
 80039be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80039c4:	4b17      	ldr	r3, [pc, #92]	; (8003a24 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039cc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	e00b      	b.n	80039f0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	6179      	str	r1, [r7, #20]
 80039e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	09db      	lsrs	r3, r3, #7
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b7f      	cmp	r3, #127	; 0x7f
 80039f4:	d8f0      	bhi.n	80039d8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	617a      	str	r2, [r7, #20]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003a06:	2202      	movs	r2, #2
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	68b8      	ldr	r0, [r7, #8]
 8003a0c:	f7fe fec6 	bl	800279c <_SendPacket>
  RECORD_END();
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f383 8811 	msr	BASEPRI, r3
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20005704 	.word	0x20005704
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a32:	f04f 0120 	mov.w	r1, #32
 8003a36:	f381 8811 	msr	BASEPRI, r1
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	4807      	ldr	r0, [pc, #28]	; (8003a5c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003a3e:	f7fe fdbf 	bl	80025c0 <_PreparePacket>
 8003a42:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003a44:	2203      	movs	r2, #3
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	6838      	ldr	r0, [r7, #0]
 8003a4a:	f7fe fea7 	bl	800279c <_SendPacket>
  RECORD_END();
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f383 8811 	msr	BASEPRI, r3
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20005704 	.word	0x20005704

08003a60 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a66:	f3ef 8311 	mrs	r3, BASEPRI
 8003a6a:	f04f 0120 	mov.w	r1, #32
 8003a6e:	f381 8811 	msr	BASEPRI, r1
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	4807      	ldr	r0, [pc, #28]	; (8003a94 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003a76:	f7fe fda3 	bl	80025c0 <_PreparePacket>
 8003a7a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003a7c:	2212      	movs	r2, #18
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	6838      	ldr	r0, [r7, #0]
 8003a82:	f7fe fe8b 	bl	800279c <_SendPacket>
  RECORD_END();
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f383 8811 	msr	BASEPRI, r3
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20005704 	.word	0x20005704

08003a98 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003aa2:	f04f 0120 	mov.w	r1, #32
 8003aa6:	f381 8811 	msr	BASEPRI, r1
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	4807      	ldr	r0, [pc, #28]	; (8003acc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003aae:	f7fe fd87 	bl	80025c0 <_PreparePacket>
 8003ab2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003ab4:	2211      	movs	r2, #17
 8003ab6:	6839      	ldr	r1, [r7, #0]
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	f7fe fe6f 	bl	800279c <_SendPacket>
  RECORD_END();
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f383 8811 	msr	BASEPRI, r3
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20005704 	.word	0x20005704

08003ad0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8003adc:	f04f 0120 	mov.w	r1, #32
 8003ae0:	f381 8811 	msr	BASEPRI, r1
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	4819      	ldr	r0, [pc, #100]	; (8003b4c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8003ae8:	f7fe fd6a 	bl	80025c0 <_PreparePacket>
 8003aec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003af2:	4b17      	ldr	r3, [pc, #92]	; (8003b50 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e00b      	b.n	8003b1e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	1c59      	adds	r1, r3, #1
 8003b0e:	61f9      	str	r1, [r7, #28]
 8003b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	09db      	lsrs	r3, r3, #7
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b7f      	cmp	r3, #127	; 0x7f
 8003b22:	d8f0      	bhi.n	8003b06 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	61fa      	str	r2, [r7, #28]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003b34:	2208      	movs	r2, #8
 8003b36:	68f9      	ldr	r1, [r7, #12]
 8003b38:	6938      	ldr	r0, [r7, #16]
 8003b3a:	f7fe fe2f 	bl	800279c <_SendPacket>
  RECORD_END();
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f383 8811 	msr	BASEPRI, r3
}
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20005704 	.word	0x20005704
 8003b50:	200056d4 	.word	0x200056d4

08003b54 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003b5c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b60:	f04f 0120 	mov.w	r1, #32
 8003b64:	f381 8811 	msr	BASEPRI, r1
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4819      	ldr	r0, [pc, #100]	; (8003bd0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8003b6c:	f7fe fd28 	bl	80025c0 <_PreparePacket>
 8003b70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e00b      	b.n	8003ba2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	1c59      	adds	r1, r3, #1
 8003b92:	61f9      	str	r1, [r7, #28]
 8003b94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	09db      	lsrs	r3, r3, #7
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ba6:	d8f0      	bhi.n	8003b8a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	61fa      	str	r2, [r7, #28]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003bb8:	2204      	movs	r2, #4
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	6938      	ldr	r0, [r7, #16]
 8003bbe:	f7fe fded 	bl	800279c <_SendPacket>
  RECORD_END();
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f383 8811 	msr	BASEPRI, r3
}
 8003bc8:	bf00      	nop
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20005704 	.word	0x20005704
 8003bd4:	200056d4 	.word	0x200056d4

08003bd8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003be0:	f3ef 8311 	mrs	r3, BASEPRI
 8003be4:	f04f 0120 	mov.w	r1, #32
 8003be8:	f381 8811 	msr	BASEPRI, r1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4819      	ldr	r0, [pc, #100]	; (8003c54 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8003bf0:	f7fe fce6 	bl	80025c0 <_PreparePacket>
 8003bf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003bfa:	4b17      	ldr	r3, [pc, #92]	; (8003c58 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e00b      	b.n	8003c26 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	61f9      	str	r1, [r7, #28]
 8003c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	09db      	lsrs	r3, r3, #7
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2a:	d8f0      	bhi.n	8003c0e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	61fa      	str	r2, [r7, #28]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003c3c:	2206      	movs	r2, #6
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	6938      	ldr	r0, [r7, #16]
 8003c42:	f7fe fdab 	bl	800279c <_SendPacket>
  RECORD_END();
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f383 8811 	msr	BASEPRI, r3
}
 8003c4c:	bf00      	nop
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20005704 	.word	0x20005704
 8003c58:	200056d4 	.word	0x200056d4

08003c5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08c      	sub	sp, #48	; 0x30
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d077      	beq.n	8003d5e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c78:	e008      	b.n	8003c8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	3301      	adds	r3, #1
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3f2      	bcc.n	8003c7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8003c94:	e000      	b.n	8003c98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003c96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d055      	beq.n	8003d4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca2:	f04f 0120 	mov.w	r1, #32
 8003ca6:	f381 8811 	msr	BASEPRI, r1
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	482f      	ldr	r0, [pc, #188]	; (8003d6c <SEGGER_SYSVIEW_SendModule+0x110>)
 8003cae:	f7fe fc87 	bl	80025c0 <_PreparePacket>
 8003cb2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	e00b      	b.n	8003cda <SEGGER_SYSVIEW_SendModule+0x7e>
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1c59      	adds	r1, r3, #1
 8003cca:	6279      	str	r1, [r7, #36]	; 0x24
 8003ccc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	09db      	lsrs	r3, r3, #7
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cde:	d8f0      	bhi.n	8003cc2 <SEGGER_SYSVIEW_SendModule+0x66>
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e00b      	b.n	8003d14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	1c59      	adds	r1, r3, #1
 8003d04:	61f9      	str	r1, [r7, #28]
 8003d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	09db      	lsrs	r3, r3, #7
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b7f      	cmp	r3, #127	; 0x7f
 8003d18:	d8f0      	bhi.n	8003cfc <SEGGER_SYSVIEW_SendModule+0xa0>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	61fa      	str	r2, [r7, #28]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2280      	movs	r2, #128	; 0x80
 8003d30:	4619      	mov	r1, r3
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7fe fc14 	bl	8002560 <_EncodeStr>
 8003d38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003d3a:	2216      	movs	r2, #22
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	6938      	ldr	r0, [r7, #16]
 8003d40:	f7fe fd2c 	bl	800279c <_SendPacket>
      RECORD_END();
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d006      	beq.n	8003d5e <SEGGER_SYSVIEW_SendModule+0x102>
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4798      	blx	r3
    }
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3730      	adds	r7, #48	; 0x30
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	200056fc 	.word	0x200056fc
 8003d6c:	20005704 	.word	0x20005704

08003d70 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003d76:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00f      	beq.n	8003d9e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200056fc 	.word	0x200056fc

08003dac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003db2:	f3ef 8311 	mrs	r3, BASEPRI
 8003db6:	f04f 0120 	mov.w	r1, #32
 8003dba:	f381 8811 	msr	BASEPRI, r1
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	4817      	ldr	r0, [pc, #92]	; (8003e20 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003dc2:	f7fe fbfd 	bl	80025c0 <_PreparePacket>
 8003dc6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	e00b      	b.n	8003df0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1c59      	adds	r1, r3, #1
 8003de0:	6179      	str	r1, [r7, #20]
 8003de2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	09db      	lsrs	r3, r3, #7
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b7f      	cmp	r3, #127	; 0x7f
 8003df4:	d8f0      	bhi.n	8003dd8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	617a      	str	r2, [r7, #20]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003e06:	221b      	movs	r2, #27
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	68b8      	ldr	r0, [r7, #8]
 8003e0c:	f7fe fcc6 	bl	800279c <_SendPacket>
  RECORD_END();
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f383 8811 	msr	BASEPRI, r3
}
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20005704 	.word	0x20005704
 8003e24:	20005700 	.word	0x20005700

08003e28 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8003e28:	b40f      	push	{r0, r1, r2, r3}
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8003e36:	1d3b      	adds	r3, r7, #4
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	6938      	ldr	r0, [r7, #16]
 8003e3e:	f7fe ffbf 	bl	8002dc0 <_VPrintTarget>
  va_end(ParamList);
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e4c:	b004      	add	sp, #16
 8003e4e:	4770      	bx	lr

08003e50 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e58:	f3ef 8311 	mrs	r3, BASEPRI
 8003e5c:	f04f 0120 	mov.w	r1, #32
 8003e60:	f381 8811 	msr	BASEPRI, r1
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	4827      	ldr	r0, [pc, #156]	; (8003f04 <SEGGER_SYSVIEW_Warn+0xb4>)
 8003e68:	f7fe fbaa 	bl	80025c0 <_PreparePacket>
 8003e6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e6e:	2280      	movs	r2, #128	; 0x80
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	6938      	ldr	r0, [r7, #16]
 8003e74:	f7fe fb74 	bl	8002560 <_EncodeStr>
 8003e78:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	2301      	movs	r3, #1
 8003e80:	623b      	str	r3, [r7, #32]
 8003e82:	e00b      	b.n	8003e9c <SEGGER_SYSVIEW_Warn+0x4c>
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	1c59      	adds	r1, r3, #1
 8003e8c:	6279      	str	r1, [r7, #36]	; 0x24
 8003e8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	09db      	lsrs	r3, r3, #7
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003ea0:	d8f0      	bhi.n	8003e84 <SEGGER_SYSVIEW_Warn+0x34>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
 8003eba:	e00b      	b.n	8003ed4 <SEGGER_SYSVIEW_Warn+0x84>
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	1c59      	adds	r1, r3, #1
 8003ec4:	61f9      	str	r1, [r7, #28]
 8003ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	09db      	lsrs	r3, r3, #7
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed8:	d8f0      	bhi.n	8003ebc <SEGGER_SYSVIEW_Warn+0x6c>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003eea:	221a      	movs	r2, #26
 8003eec:	68f9      	ldr	r1, [r7, #12]
 8003eee:	6938      	ldr	r0, [r7, #16]
 8003ef0:	f7fe fc54 	bl	800279c <_SendPacket>
  RECORD_END();
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f383 8811 	msr	BASEPRI, r3
}
 8003efa:	bf00      	nop
 8003efc:	3728      	adds	r7, #40	; 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20005704 	.word	0x20005704

08003f08 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f0e:	7e1b      	ldrb	r3, [r3, #24]
 8003f10:	4619      	mov	r1, r3
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003f14:	460b      	mov	r3, r1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	440b      	add	r3, r1
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	336c      	adds	r3, #108	; 0x6c
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f24:	7e1b      	ldrb	r3, [r3, #24]
 8003f26:	4618      	mov	r0, r3
 8003f28:	490d      	ldr	r1, [pc, #52]	; (8003f60 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4403      	add	r3, r0
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	3370      	adds	r3, #112	; 0x70
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d00b      	beq.n	8003f54 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f3e:	789b      	ldrb	r3, [r3, #2]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003f4a:	f7fe fb45 	bl	80025d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003f4e:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8003f54:	4b01      	ldr	r3, [pc, #4]	; (8003f5c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200056d4 	.word	0x200056d4
 8003f60:	20004214 	.word	0x20004214

08003f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f6a:	f000 fa55 	bl	8004418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f6e:	f000 f84f 	bl	8004010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f72:	f000 f89f 	bl	80040b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(115200);
 8003f76:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003f7a:	f7fd fea5 	bl	8001cc8 <SEGGER_UART_init>

  DWT_CTRL |= (1<<0);
 8003f7e:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <main+0x98>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <main+0x98>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8003f8a:	f7fd fcb1 	bl	80018f0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler,"Task-1",200,NULL,2,&LED_On_Handle);
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	2302      	movs	r3, #2
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	22c8      	movs	r2, #200	; 0xc8
 8003f9c:	4918      	ldr	r1, [pc, #96]	; (8004000 <main+0x9c>)
 8003f9e:	4819      	ldr	r0, [pc, #100]	; (8004004 <main+0xa0>)
 8003fa0:	f7fc f9f0 	bl	8000384 <xTaskCreate>
 8003fa4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d00a      	beq.n	8003fc2 <main+0x5e>
        __asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	613b      	str	r3, [r7, #16]
    }
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <main+0x5c>

  status = xTaskCreate(task2_handler,"Task-2",200,NULL,2,&LED_Off_Handle);
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	22c8      	movs	r2, #200	; 0xc8
 8003fce:	490e      	ldr	r1, [pc, #56]	; (8004008 <main+0xa4>)
 8003fd0:	480e      	ldr	r0, [pc, #56]	; (800400c <main+0xa8>)
 8003fd2:	f7fc f9d7 	bl	8000384 <xTaskCreate>
 8003fd6:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d00a      	beq.n	8003ff4 <main+0x90>
        __asm volatile
 8003fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe2:	f383 8811 	msr	BASEPRI, r3
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	60fb      	str	r3, [r7, #12]
    }
 8003ff0:	bf00      	nop
 8003ff2:	e7fe      	b.n	8003ff2 <main+0x8e>

  /*starting the freertos scheduler*/
  vTaskStartScheduler();
 8003ff4:	f7fc fb78 	bl	80006e8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <main+0x94>
 8003ffa:	bf00      	nop
 8003ffc:	e0001000 	.word	0xe0001000
 8004000:	08005df4 	.word	0x08005df4
 8004004:	080041a5 	.word	0x080041a5
 8004008:	08005dfc 	.word	0x08005dfc
 800400c:	080041cd 	.word	0x080041cd

08004010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b096      	sub	sp, #88	; 0x58
 8004014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	2244      	movs	r2, #68	; 0x44
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f001 fe3c 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004024:	463b      	mov	r3, r7
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	609a      	str	r2, [r3, #8]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004036:	f000 fcfb 	bl	8004a30 <HAL_PWREx_ControlVoltageScaling>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004040:	f000 f8ea 	bl	8004218 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004044:	2302      	movs	r3, #2
 8004046:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800404c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800404e:	2310      	movs	r3, #16
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004052:	2302      	movs	r3, #2
 8004054:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004056:	2302      	movs	r3, #2
 8004058:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800405a:	2301      	movs	r3, #1
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800405e:	230a      	movs	r3, #10
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004062:	2307      	movs	r3, #7
 8004064:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004066:	2302      	movs	r3, #2
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800406a:	2302      	movs	r3, #2
 800406c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fd32 	bl	8004adc <HAL_RCC_OscConfig>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800407e:	f000 f8cb 	bl	8004218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004082:	230f      	movs	r3, #15
 8004084:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004086:	2303      	movs	r3, #3
 8004088:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004096:	463b      	mov	r3, r7
 8004098:	2104      	movs	r1, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f8fa 	bl	8005294 <HAL_RCC_ClockConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80040a6:	f000 f8b7 	bl	8004218 <Error_Handler>
  }
}
 80040aa:	bf00      	nop
 80040ac:	3758      	adds	r7, #88	; 0x58
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08a      	sub	sp, #40	; 0x28
 80040b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ba:	f107 0314 	add.w	r3, r7, #20
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	609a      	str	r2, [r3, #8]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ca:	4b34      	ldr	r3, [pc, #208]	; (800419c <MX_GPIO_Init+0xe8>)
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	4a33      	ldr	r2, [pc, #204]	; (800419c <MX_GPIO_Init+0xe8>)
 80040d0:	f043 0304 	orr.w	r3, r3, #4
 80040d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040d6:	4b31      	ldr	r3, [pc, #196]	; (800419c <MX_GPIO_Init+0xe8>)
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040e2:	4b2e      	ldr	r3, [pc, #184]	; (800419c <MX_GPIO_Init+0xe8>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	4a2d      	ldr	r2, [pc, #180]	; (800419c <MX_GPIO_Init+0xe8>)
 80040e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ee:	4b2b      	ldr	r3, [pc, #172]	; (800419c <MX_GPIO_Init+0xe8>)
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fa:	4b28      	ldr	r3, [pc, #160]	; (800419c <MX_GPIO_Init+0xe8>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	4a27      	ldr	r2, [pc, #156]	; (800419c <MX_GPIO_Init+0xe8>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004106:	4b25      	ldr	r3, [pc, #148]	; (800419c <MX_GPIO_Init+0xe8>)
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004112:	4b22      	ldr	r3, [pc, #136]	; (800419c <MX_GPIO_Init+0xe8>)
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	4a21      	ldr	r2, [pc, #132]	; (800419c <MX_GPIO_Init+0xe8>)
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800411e:	4b1f      	ldr	r3, [pc, #124]	; (800419c <MX_GPIO_Init+0xe8>)
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800412a:	2200      	movs	r2, #0
 800412c:	2120      	movs	r1, #32
 800412e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004132:	f000 fc3d 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800413a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800413c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004146:	f107 0314 	add.w	r3, r7, #20
 800414a:	4619      	mov	r1, r3
 800414c:	4814      	ldr	r0, [pc, #80]	; (80041a0 <MX_GPIO_Init+0xec>)
 800414e:	f000 fa85 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004152:	230c      	movs	r3, #12
 8004154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004156:	2302      	movs	r3, #2
 8004158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415e:	2303      	movs	r3, #3
 8004160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004162:	2307      	movs	r3, #7
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004170:	f000 fa74 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004174:	2320      	movs	r3, #32
 8004176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004178:	2301      	movs	r3, #1
 800417a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004180:	2300      	movs	r3, #0
 8004182:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4619      	mov	r1, r3
 800418a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800418e:	f000 fa65 	bl	800465c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004192:	bf00      	nop
 8004194:	3728      	adds	r7, #40	; 0x28
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40021000 	.word	0x40021000
 80041a0:	48000800 	.word	0x48000800

080041a4 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void * parameters)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED_Toggle-1");
 80041ac:	4806      	ldr	r0, [pc, #24]	; (80041c8 <task1_handler+0x24>)
 80041ae:	f7ff fe3b 	bl	8003e28 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80041b2:	2120      	movs	r1, #32
 80041b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041b8:	f000 fc12 	bl	80049e0 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80041bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041c0:	f7fc fa5a 	bl	8000678 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("LED_Toggle-1");
 80041c4:	e7f2      	b.n	80041ac <task1_handler+0x8>
 80041c6:	bf00      	nop
 80041c8:	08005e04 	.word	0x08005e04

080041cc <task2_handler>:
	}
}

static void task2_handler(void * parameters)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("LED_Toggle-2");
 80041d4:	4806      	ldr	r0, [pc, #24]	; (80041f0 <task2_handler+0x24>)
 80041d6:	f7ff fe27 	bl	8003e28 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80041da:	2120      	movs	r1, #32
 80041dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e0:	f000 fbfe 	bl	80049e0 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80041e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041e8:	f7fc fa46 	bl	8000678 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("LED_Toggle-2");
 80041ec:	e7f2      	b.n	80041d4 <task2_handler+0x8>
 80041ee:	bf00      	nop
 80041f0:	08005e14 	.word	0x08005e14

080041f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004206:	f000 f927 	bl	8004458 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40001000 	.word	0x40001000

08004218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800421c:	b672      	cpsid	i
}
 800421e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004220:	e7fe      	b.n	8004220 <Error_Handler+0x8>
	...

08004224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <HAL_MspInit+0x44>)
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	4a0e      	ldr	r2, [pc, #56]	; (8004268 <HAL_MspInit+0x44>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6613      	str	r3, [r2, #96]	; 0x60
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <HAL_MspInit+0x44>)
 8004238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_MspInit+0x44>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <HAL_MspInit+0x44>)
 8004248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
 800424e:	4b06      	ldr	r3, [pc, #24]	; (8004268 <HAL_MspInit+0x44>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800425a:	f7fc ffc5 	bl	80011e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000

0800426c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08e      	sub	sp, #56	; 0x38
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800427a:	4b34      	ldr	r3, [pc, #208]	; (800434c <HAL_InitTick+0xe0>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	4a33      	ldr	r2, [pc, #204]	; (800434c <HAL_InitTick+0xe0>)
 8004280:	f043 0310 	orr.w	r3, r3, #16
 8004284:	6593      	str	r3, [r2, #88]	; 0x58
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_InitTick+0xe0>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004292:	f107 0210 	add.w	r2, r7, #16
 8004296:	f107 0314 	add.w	r3, r7, #20
 800429a:	4611      	mov	r1, r2
 800429c:	4618      	mov	r0, r3
 800429e:	f001 f9a7 	bl	80055f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80042ac:	f001 f98a 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80042b0:	6378      	str	r0, [r7, #52]	; 0x34
 80042b2:	e004      	b.n	80042be <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80042b4:	f001 f986 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80042b8:	4603      	mov	r3, r0
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	4a23      	ldr	r2, [pc, #140]	; (8004350 <HAL_InitTick+0xe4>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	3b01      	subs	r3, #1
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042cc:	4b21      	ldr	r3, [pc, #132]	; (8004354 <HAL_InitTick+0xe8>)
 80042ce:	4a22      	ldr	r2, [pc, #136]	; (8004358 <HAL_InitTick+0xec>)
 80042d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_InitTick+0xe8>)
 80042d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042da:	4a1e      	ldr	r2, [pc, #120]	; (8004354 <HAL_InitTick+0xe8>)
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <HAL_InitTick+0xe8>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_InitTick+0xe8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <HAL_InitTick+0xe8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80042f2:	4818      	ldr	r0, [pc, #96]	; (8004354 <HAL_InitTick+0xe8>)
 80042f4:	f001 fa0e 	bl	8005714 <HAL_TIM_Base_Init>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80042fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11b      	bne.n	800433e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004306:	4813      	ldr	r0, [pc, #76]	; (8004354 <HAL_InitTick+0xe8>)
 8004308:	f001 fa66 	bl	80057d8 <HAL_TIM_Base_Start_IT>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004316:	2b00      	cmp	r3, #0
 8004318:	d111      	bne.n	800433e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800431a:	2036      	movs	r0, #54	; 0x36
 800431c:	f000 f990 	bl	8004640 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b0f      	cmp	r3, #15
 8004324:	d808      	bhi.n	8004338 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004326:	2200      	movs	r2, #0
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	2036      	movs	r0, #54	; 0x36
 800432c:	f000 f96c 	bl	8004608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004330:	4a0a      	ldr	r2, [pc, #40]	; (800435c <HAL_InitTick+0xf0>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e002      	b.n	800433e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800433e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004342:	4618      	mov	r0, r3
 8004344:	3738      	adds	r7, #56	; 0x38
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	431bde83 	.word	0x431bde83
 8004354:	200057e8 	.word	0x200057e8
 8004358:	40001000 	.word	0x40001000
 800435c:	20000014 	.word	0x20000014

08004360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004364:	e7fe      	b.n	8004364 <NMI_Handler+0x4>

08004366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800436a:	e7fe      	b.n	800436a <HardFault_Handler+0x4>

0800436c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <MemManage_Handler+0x4>

08004372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004376:	e7fe      	b.n	8004376 <BusFault_Handler+0x4>

08004378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800437c:	e7fe      	b.n	800437c <UsageFault_Handler+0x4>

0800437e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004390:	4802      	ldr	r0, [pc, #8]	; (800439c <TIM6_DAC_IRQHandler+0x10>)
 8004392:	f001 fa91 	bl	80058b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200057e8 	.word	0x200057e8

080043a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <SystemInit+0x20>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <SystemInit+0x20>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80043c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80043c8:	f7ff ffea 	bl	80043a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043cc:	480c      	ldr	r0, [pc, #48]	; (8004400 <LoopForever+0x6>)
  ldr r1, =_edata
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80043d0:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <LoopForever+0xe>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043d4:	e002      	b.n	80043dc <LoopCopyDataInit>

080043d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043da:	3304      	adds	r3, #4

080043dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e0:	d3f9      	bcc.n	80043d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <LoopForever+0x12>)
  ldr r4, =_ebss
 80043e4:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <LoopForever+0x16>)
  movs r3, #0
 80043e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043e8:	e001      	b.n	80043ee <LoopFillZerobss>

080043ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043ec:	3204      	adds	r2, #4

080043ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f0:	d3fb      	bcc.n	80043ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043f2:	f001 fc5b 	bl	8005cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043f6:	f7ff fdb5 	bl	8003f64 <main>

080043fa <LoopForever>:

LoopForever:
    b LoopForever
 80043fa:	e7fe      	b.n	80043fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80043fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004404:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8004408:	08005eb0 	.word	0x08005eb0
  ldr r2, =_sbss
 800440c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004410:	20005838 	.word	0x20005838

08004414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004414:	e7fe      	b.n	8004414 <ADC1_2_IRQHandler>
	...

08004418 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <HAL_Init+0x3c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <HAL_Init+0x3c>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800442e:	2003      	movs	r0, #3
 8004430:	f000 f8df 	bl	80045f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004434:	200f      	movs	r0, #15
 8004436:	f7ff ff19 	bl	800426c <HAL_InitTick>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	71fb      	strb	r3, [r7, #7]
 8004444:	e001      	b.n	800444a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004446:	f7ff feed 	bl	8004224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800444a:	79fb      	ldrb	r3, [r7, #7]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40022000 	.word	0x40022000

08004458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_IncTick+0x20>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_IncTick+0x24>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4413      	add	r3, r2
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <HAL_IncTick+0x24>)
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000018 	.word	0x20000018
 800447c:	20005834 	.word	0x20005834

08004480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return uwTick;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_GetTick+0x14>)
 8004486:	681b      	ldr	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20005834 	.word	0x20005834

08004498 <__NVIC_SetPriorityGrouping>:
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <__NVIC_GetPriorityGrouping>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <__NVIC_GetPriorityGrouping+0x18>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0307 	and.w	r3, r3, #7
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_EnableIRQ>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db0b      	blt.n	8004526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4907      	ldr	r1, [pc, #28]	; (8004534 <__NVIC_EnableIRQ+0x38>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e100 	.word	0xe000e100

08004538 <__NVIC_SetPriority>:
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db0a      	blt.n	8004562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	490c      	ldr	r1, [pc, #48]	; (8004584 <__NVIC_SetPriority+0x4c>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	440b      	add	r3, r1
 800455c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004560:	e00a      	b.n	8004578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4908      	ldr	r1, [pc, #32]	; (8004588 <__NVIC_SetPriority+0x50>)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	3b04      	subs	r3, #4
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	440b      	add	r3, r1
 8004576:	761a      	strb	r2, [r3, #24]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf28      	it	cs
 80045aa:	2304      	movcs	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d902      	bls.n	80045bc <NVIC_EncodePriority+0x30>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3b03      	subs	r3, #3
 80045ba:	e000      	b.n	80045be <NVIC_EncodePriority+0x32>
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43d9      	mvns	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	4313      	orrs	r3, r2
         );
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff4c 	bl	8004498 <__NVIC_SetPriorityGrouping>
}
 8004600:	bf00      	nop
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800461a:	f7ff ff61 	bl	80044e0 <__NVIC_GetPriorityGrouping>
 800461e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	68b9      	ldr	r1, [r7, #8]
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f7ff ffb1 	bl	800458c <NVIC_EncodePriority>
 800462a:	4602      	mov	r2, r0
 800462c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff ff80 	bl	8004538 <__NVIC_SetPriority>
}
 8004638:	bf00      	nop
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ff54 	bl	80044fc <__NVIC_EnableIRQ>
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800466a:	e17f      	b.n	800496c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2101      	movs	r1, #1
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8171 	beq.w	8004966 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b01      	cmp	r3, #1
 800468e:	d005      	beq.n	800469c <HAL_GPIO_Init+0x40>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d130      	bne.n	80046fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	2203      	movs	r2, #3
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046d2:	2201      	movs	r2, #1
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4013      	ands	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 0201 	and.w	r2, r3, #1
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b03      	cmp	r3, #3
 8004708:	d118      	bne.n	800473c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004710:	2201      	movs	r2, #1
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	f003 0201 	and.w	r2, r3, #1
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b03      	cmp	r3, #3
 8004746:	d017      	beq.n	8004778 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d123      	bne.n	80047cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	08da      	lsrs	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3208      	adds	r2, #8
 800478c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	220f      	movs	r2, #15
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	08da      	lsrs	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3208      	adds	r2, #8
 80047c6:	6939      	ldr	r1, [r7, #16]
 80047c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0203 	and.w	r2, r3, #3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80ac 	beq.w	8004966 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480e:	4b5f      	ldr	r3, [pc, #380]	; (800498c <HAL_GPIO_Init+0x330>)
 8004810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004812:	4a5e      	ldr	r2, [pc, #376]	; (800498c <HAL_GPIO_Init+0x330>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	6613      	str	r3, [r2, #96]	; 0x60
 800481a:	4b5c      	ldr	r3, [pc, #368]	; (800498c <HAL_GPIO_Init+0x330>)
 800481c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
 8004824:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004826:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_GPIO_Init+0x334>)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	3302      	adds	r3, #2
 800482e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	220f      	movs	r2, #15
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43db      	mvns	r3, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004850:	d025      	beq.n	800489e <HAL_GPIO_Init+0x242>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a4f      	ldr	r2, [pc, #316]	; (8004994 <HAL_GPIO_Init+0x338>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <HAL_GPIO_Init+0x23e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <HAL_GPIO_Init+0x33c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d019      	beq.n	8004896 <HAL_GPIO_Init+0x23a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4d      	ldr	r2, [pc, #308]	; (800499c <HAL_GPIO_Init+0x340>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0x236>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4c      	ldr	r2, [pc, #304]	; (80049a0 <HAL_GPIO_Init+0x344>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00d      	beq.n	800488e <HAL_GPIO_Init+0x232>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4b      	ldr	r2, [pc, #300]	; (80049a4 <HAL_GPIO_Init+0x348>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <HAL_GPIO_Init+0x22e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4a      	ldr	r2, [pc, #296]	; (80049a8 <HAL_GPIO_Init+0x34c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_GPIO_Init+0x22a>
 8004882:	2306      	movs	r3, #6
 8004884:	e00c      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 8004886:	2307      	movs	r3, #7
 8004888:	e00a      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 800488a:	2305      	movs	r3, #5
 800488c:	e008      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 800488e:	2304      	movs	r3, #4
 8004890:	e006      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 8004892:	2303      	movs	r3, #3
 8004894:	e004      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 8004896:	2302      	movs	r3, #2
 8004898:	e002      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_GPIO_Init+0x244>
 800489e:	2300      	movs	r3, #0
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	f002 0203 	and.w	r2, r2, #3
 80048a6:	0092      	lsls	r2, r2, #2
 80048a8:	4093      	lsls	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048b0:	4937      	ldr	r1, [pc, #220]	; (8004990 <HAL_GPIO_Init+0x334>)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	089b      	lsrs	r3, r3, #2
 80048b6:	3302      	adds	r3, #2
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048be:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_GPIO_Init+0x350>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e2:	4a32      	ldr	r2, [pc, #200]	; (80049ac <HAL_GPIO_Init+0x350>)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048e8:	4b30      	ldr	r3, [pc, #192]	; (80049ac <HAL_GPIO_Init+0x350>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800490c:	4a27      	ldr	r2, [pc, #156]	; (80049ac <HAL_GPIO_Init+0x350>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <HAL_GPIO_Init+0x350>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004936:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_GPIO_Init+0x350>)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_GPIO_Init+0x350>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	43db      	mvns	r3, r3
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4013      	ands	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004960:	4a12      	ldr	r2, [pc, #72]	; (80049ac <HAL_GPIO_Init+0x350>)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	3301      	adds	r3, #1
 800496a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	f47f ae78 	bne.w	800466c <HAL_GPIO_Init+0x10>
  }
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	40010000 	.word	0x40010000
 8004994:	48000400 	.word	0x48000400
 8004998:	48000800 	.word	0x48000800
 800499c:	48000c00 	.word	0x48000c00
 80049a0:	48001000 	.word	0x48001000
 80049a4:	48001400 	.word	0x48001400
 80049a8:	48001800 	.word	0x48001800
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049cc:	e002      	b.n	80049d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049ce:	887a      	ldrh	r2, [r7, #2]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4013      	ands	r3, r2
 80049f8:	041a      	lsls	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43d9      	mvns	r1, r3
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	400b      	ands	r3, r1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40007000 	.word	0x40007000

08004a30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a3e:	d130      	bne.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a40:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4c:	d038      	beq.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a56:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2232      	movs	r2, #50	; 0x32
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0c9b      	lsrs	r3, r3, #18
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a74:	e002      	b.n	8004a7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a7c:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a88:	d102      	bne.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f2      	bne.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a90:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9c:	d110      	bne.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e00f      	b.n	8004ac2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aae:	d007      	beq.n	8004ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ab8:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004abe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40007000 	.word	0x40007000
 8004ad4:	20000010 	.word	0x20000010
 8004ad8:	431bde83 	.word	0x431bde83

08004adc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e3ca      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aee:	4b97      	ldr	r3, [pc, #604]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af8:	4b94      	ldr	r3, [pc, #592]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80e4 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_RCC_OscConfig+0x4a>
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	f040 808b 	bne.w	8004c34 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	f040 8087 	bne.w	8004c34 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b26:	4b89      	ldr	r3, [pc, #548]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_RCC_OscConfig+0x62>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e3a2      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1a      	ldr	r2, [r3, #32]
 8004b42:	4b82      	ldr	r3, [pc, #520]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d004      	beq.n	8004b58 <HAL_RCC_OscConfig+0x7c>
 8004b4e:	4b7f      	ldr	r3, [pc, #508]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b56:	e005      	b.n	8004b64 <HAL_RCC_OscConfig+0x88>
 8004b58:	4b7c      	ldr	r3, [pc, #496]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d223      	bcs.n	8004bb0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fd71 	bl	8005654 <RCC_SetFlashLatencyFromMSIRange>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e383      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b7c:	4b73      	ldr	r3, [pc, #460]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a72      	ldr	r2, [pc, #456]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b82:	f043 0308 	orr.w	r3, r3, #8
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	4b70      	ldr	r3, [pc, #448]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	496d      	ldr	r1, [pc, #436]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b9a:	4b6c      	ldr	r3, [pc, #432]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	4968      	ldr	r1, [pc, #416]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
 8004bae:	e025      	b.n	8004bfc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4960      	ldr	r1, [pc, #384]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bce:	4b5f      	ldr	r3, [pc, #380]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	495b      	ldr	r1, [pc, #364]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fd31 	bl	8005654 <RCC_SetFlashLatencyFromMSIRange>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e343      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bfc:	f000 fc4a 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 8004c00:	4602      	mov	r2, r0
 8004c02:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	4950      	ldr	r1, [pc, #320]	; (8004d50 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	5ccb      	ldrb	r3, [r1, r3]
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
 8004c18:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <HAL_RCC_OscConfig+0x278>)
 8004c1a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c1c:	4b4e      	ldr	r3, [pc, #312]	; (8004d58 <HAL_RCC_OscConfig+0x27c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fb23 	bl	800426c <HAL_InitTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d052      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	e327      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d032      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c3c:	4b43      	ldr	r3, [pc, #268]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a42      	ldr	r2, [pc, #264]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c48:	f7ff fc1a 	bl	8004480 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c50:	f7ff fc16 	bl	8004480 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e310      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c62:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a36      	ldr	r2, [pc, #216]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c74:	f043 0308 	orr.w	r3, r3, #8
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4931      	ldr	r1, [pc, #196]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c8c:	4b2f      	ldr	r3, [pc, #188]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	492c      	ldr	r1, [pc, #176]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
 8004ca0:	e01a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cae:	f7ff fbe7 	bl	8004480 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cb6:	f7ff fbe3 	bl	8004480 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e2dd      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cc8:	4b20      	ldr	r3, [pc, #128]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x1da>
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cd6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d074      	beq.n	8004dce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d005      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x21a>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	d10e      	bne.n	8004d0e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d10b      	bne.n	8004d0e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf6:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d064      	beq.n	8004dcc <HAL_RCC_OscConfig+0x2f0>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d160      	bne.n	8004dcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e2ba      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x24a>
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	e026      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d2e:	d115      	bne.n	8004d5c <HAL_RCC_OscConfig+0x280>
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a05      	ldr	r2, [pc, #20]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004d36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]
 8004d3c:	4b03      	ldr	r3, [pc, #12]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a02      	ldr	r2, [pc, #8]	; (8004d4c <HAL_RCC_OscConfig+0x270>)
 8004d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e014      	b.n	8004d74 <HAL_RCC_OscConfig+0x298>
 8004d4a:	bf00      	nop
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	08005e60 	.word	0x08005e60
 8004d54:	20000010 	.word	0x20000010
 8004d58:	20000014 	.word	0x20000014
 8004d5c:	4ba0      	ldr	r3, [pc, #640]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a9f      	ldr	r2, [pc, #636]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b9d      	ldr	r3, [pc, #628]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a9c      	ldr	r2, [pc, #624]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d013      	beq.n	8004da4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7ff fb80 	bl	8004480 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7ff fb7c 	bl	8004480 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e276      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d96:	4b92      	ldr	r3, [pc, #584]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x2a8>
 8004da2:	e014      	b.n	8004dce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7ff fb6c 	bl	8004480 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dac:	f7ff fb68 	bl	8004480 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b64      	cmp	r3, #100	; 0x64
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e262      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dbe:	4b88      	ldr	r3, [pc, #544]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x2d0>
 8004dca:	e000      	b.n	8004dce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d060      	beq.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_OscConfig+0x310>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d119      	bne.n	8004e1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d116      	bne.n	8004e1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dec:	4b7c      	ldr	r3, [pc, #496]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_OscConfig+0x328>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e23f      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e04:	4b76      	ldr	r3, [pc, #472]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	4973      	ldr	r1, [pc, #460]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e18:	e040      	b.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d023      	beq.n	8004e6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e22:	4b6f      	ldr	r3, [pc, #444]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6e      	ldr	r2, [pc, #440]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7ff fb27 	bl	8004480 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e36:	f7ff fb23 	bl	8004480 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e21d      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	4b65      	ldr	r3, [pc, #404]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b62      	ldr	r3, [pc, #392]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	495f      	ldr	r1, [pc, #380]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
 8004e68:	e018      	b.n	8004e9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6a:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e76:	f7ff fb03 	bl	8004480 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e7e:	f7ff faff 	bl	8004480 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e1f9      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e90:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d03c      	beq.n	8004f22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01c      	beq.n	8004eea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb0:	4b4b      	ldr	r3, [pc, #300]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb6:	4a4a      	ldr	r2, [pc, #296]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7ff fade 	bl	8004480 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7ff fada 	bl	8004480 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1d4      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eda:	4b41      	ldr	r3, [pc, #260]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x3ec>
 8004ee8:	e01b      	b.n	8004f22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eea:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef0:	4a3b      	ldr	r2, [pc, #236]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efa:	f7ff fac1 	bl	8004480 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f02:	f7ff fabd 	bl	8004480 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1b7      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f14:	4b32      	ldr	r3, [pc, #200]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1ef      	bne.n	8004f02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80a6 	beq.w	800507c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f30:	2300      	movs	r3, #0
 8004f32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f34:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f44:	4a26      	ldr	r2, [pc, #152]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f4c:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	60bb      	str	r3, [r7, #8]
 8004f56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5c:	4b21      	ldr	r3, [pc, #132]	; (8004fe4 <HAL_RCC_OscConfig+0x508>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d118      	bne.n	8004f9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f68:	4b1e      	ldr	r3, [pc, #120]	; (8004fe4 <HAL_RCC_OscConfig+0x508>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1d      	ldr	r2, [pc, #116]	; (8004fe4 <HAL_RCC_OscConfig+0x508>)
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f74:	f7ff fa84 	bl	8004480 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f7c:	f7ff fa80 	bl	8004480 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e17a      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <HAL_RCC_OscConfig+0x508>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d108      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4d8>
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	4a0d      	ldr	r2, [pc, #52]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb2:	e029      	b.n	8005008 <HAL_RCC_OscConfig+0x52c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d115      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x50c>
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004fc4:	f043 0304 	orr.w	r3, r3, #4
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fcc:	4b04      	ldr	r3, [pc, #16]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	4a03      	ldr	r2, [pc, #12]	; (8004fe0 <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f043 0301 	orr.w	r3, r3, #1
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fdc:	e014      	b.n	8005008 <HAL_RCC_OscConfig+0x52c>
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	4b9c      	ldr	r3, [pc, #624]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a9b      	ldr	r2, [pc, #620]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ff8:	4b98      	ldr	r3, [pc, #608]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	4a97      	ldr	r2, [pc, #604]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7ff fa36 	bl	8004480 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7ff fa32 	bl	8004480 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e12a      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502e:	4b8b      	ldr	r3, [pc, #556]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0ed      	beq.n	8005018 <HAL_RCC_OscConfig+0x53c>
 800503c:	e015      	b.n	800506a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503e:	f7ff fa1f 	bl	8004480 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7ff fa1b 	bl	8004480 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e113      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800505c:	4b7f      	ldr	r3, [pc, #508]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ed      	bne.n	8005046 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800506a:	7ffb      	ldrb	r3, [r7, #31]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d105      	bne.n	800507c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005070:	4b7a      	ldr	r3, [pc, #488]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005074:	4a79      	ldr	r2, [pc, #484]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80fe 	beq.w	8005282 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	2b02      	cmp	r3, #2
 800508c:	f040 80d0 	bne.w	8005230 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005090:	4b72      	ldr	r3, [pc, #456]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0203 	and.w	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d130      	bne.n	8005106 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	3b01      	subs	r3, #1
 80050b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d127      	bne.n	8005106 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d11f      	bne.n	8005106 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d0:	2a07      	cmp	r2, #7
 80050d2:	bf14      	ite	ne
 80050d4:	2201      	movne	r2, #1
 80050d6:	2200      	moveq	r2, #0
 80050d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050da:	4293      	cmp	r3, r2
 80050dc:	d113      	bne.n	8005106 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	3b01      	subs	r3, #1
 80050ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	3b01      	subs	r3, #1
 8005100:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d06e      	beq.n	80051e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d069      	beq.n	80051e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800510c:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005118:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0ad      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005128:	4b4c      	ldr	r3, [pc, #304]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a4b      	ldr	r2, [pc, #300]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800512e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005132:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005134:	f7ff f9a4 	bl	8004480 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7ff f9a0 	bl	8004480 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e09a      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514e:	4b43      	ldr	r3, [pc, #268]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800515a:	4b40      	ldr	r3, [pc, #256]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	4b40      	ldr	r3, [pc, #256]	; (8005260 <HAL_RCC_OscConfig+0x784>)
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800516a:	3a01      	subs	r2, #1
 800516c:	0112      	lsls	r2, r2, #4
 800516e:	4311      	orrs	r1, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005174:	0212      	lsls	r2, r2, #8
 8005176:	4311      	orrs	r1, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800517c:	0852      	lsrs	r2, r2, #1
 800517e:	3a01      	subs	r2, #1
 8005180:	0552      	lsls	r2, r2, #21
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005188:	0852      	lsrs	r2, r2, #1
 800518a:	3a01      	subs	r2, #1
 800518c:	0652      	lsls	r2, r2, #25
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005194:	0912      	lsrs	r2, r2, #4
 8005196:	0452      	lsls	r2, r2, #17
 8005198:	430a      	orrs	r2, r1
 800519a:	4930      	ldr	r1, [pc, #192]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800519c:	4313      	orrs	r3, r2
 800519e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051a0:	4b2e      	ldr	r3, [pc, #184]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a2d      	ldr	r2, [pc, #180]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4a2a      	ldr	r2, [pc, #168]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051b8:	f7ff f962 	bl	8004480 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7ff f95e 	bl	8004480 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e058      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051de:	e050      	b.n	8005282 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e04f      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e4:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d148      	bne.n	8005282 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051f0:	4b1a      	ldr	r3, [pc, #104]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_RCC_OscConfig+0x780>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005206:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005208:	f7ff f93a 	bl	8004480 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7ff f936 	bl	8004480 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e030      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x734>
 800522e:	e028      	b.n	8005282 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d023      	beq.n	800527e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <HAL_RCC_OscConfig+0x780>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a08      	ldr	r2, [pc, #32]	; (800525c <HAL_RCC_OscConfig+0x780>)
 800523c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7ff f91d 	bl	8004480 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005248:	e00c      	b.n	8005264 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524a:	f7ff f919 	bl	8004480 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d905      	bls.n	8005264 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e013      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
 800525c:	40021000 	.word	0x40021000
 8005260:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005264:	4b09      	ldr	r3, [pc, #36]	; (800528c <HAL_RCC_OscConfig+0x7b0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ec      	bne.n	800524a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_OscConfig+0x7b0>)
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	4905      	ldr	r1, [pc, #20]	; (800528c <HAL_RCC_OscConfig+0x7b0>)
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_OscConfig+0x7b4>)
 8005278:	4013      	ands	r3, r2
 800527a:	60cb      	str	r3, [r1, #12]
 800527c:	e001      	b.n	8005282 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000
 8005290:	feeefffc 	.word	0xfeeefffc

08005294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0e7      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052a8:	4b75      	ldr	r3, [pc, #468]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d910      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 0207 	bic.w	r2, r3, #7
 80052be:	4970      	ldr	r1, [pc, #448]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b6e      	ldr	r3, [pc, #440]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0cf      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d010      	beq.n	8005306 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	4b66      	ldr	r3, [pc, #408]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d908      	bls.n	8005306 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052f4:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4960      	ldr	r1, [pc, #384]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04c      	beq.n	80053ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d107      	bne.n	800532a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531a:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d121      	bne.n	800536a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0a6      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005332:	4b54      	ldr	r3, [pc, #336]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d115      	bne.n	800536a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e09a      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800534a:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e08e      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800535a:	4b4a      	ldr	r3, [pc, #296]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e086      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800536a:	4b46      	ldr	r3, [pc, #280]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4943      	ldr	r1, [pc, #268]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7ff f880 	bl	8004480 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	e00a      	b.n	800539a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005384:	f7ff f87c 	bl	8004480 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e06e      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 020c 	and.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d1eb      	bne.n	8005384 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d010      	beq.n	80053da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	4b31      	ldr	r3, [pc, #196]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d208      	bcs.n	80053da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c8:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	492b      	ldr	r1, [pc, #172]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053da:	4b29      	ldr	r3, [pc, #164]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d210      	bcs.n	800540a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 0207 	bic.w	r2, r3, #7
 80053f0:	4923      	ldr	r1, [pc, #140]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <HAL_RCC_ClockConfig+0x1ec>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d001      	beq.n	800540a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e036      	b.n	8005478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4918      	ldr	r1, [pc, #96]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005434:	4b13      	ldr	r3, [pc, #76]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4910      	ldr	r1, [pc, #64]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005448:	f000 f824 	bl	8005494 <HAL_RCC_GetSysClockFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RCC_ClockConfig+0x1f0>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	490b      	ldr	r1, [pc, #44]	; (8005488 <HAL_RCC_ClockConfig+0x1f4>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <HAL_RCC_ClockConfig+0x1f8>)
 8005466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <HAL_RCC_ClockConfig+0x1fc>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe fefd 	bl	800426c <HAL_InitTick>
 8005472:	4603      	mov	r3, r0
 8005474:	72fb      	strb	r3, [r7, #11]

  return status;
 8005476:	7afb      	ldrb	r3, [r7, #11]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40022000 	.word	0x40022000
 8005484:	40021000 	.word	0x40021000
 8005488:	08005e60 	.word	0x08005e60
 800548c:	20000010 	.word	0x20000010
 8005490:	20000014 	.word	0x20000014

08005494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005494:	b480      	push	{r7}
 8005496:	b089      	sub	sp, #36	; 0x24
 8005498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a2:	4b3e      	ldr	r3, [pc, #248]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ac:	4b3b      	ldr	r3, [pc, #236]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x34>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d121      	bne.n	8005506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d11e      	bne.n	8005506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054c8:	4b34      	ldr	r3, [pc, #208]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054d4:	4b31      	ldr	r3, [pc, #196]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 80054d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	61fb      	str	r3, [r7, #28]
 80054e2:	e005      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054e4:	4b2d      	ldr	r3, [pc, #180]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054f0:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10d      	bne.n	800551c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005504:	e00a      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d102      	bne.n	8005512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	e004      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b08      	cmp	r3, #8
 8005516:	d101      	bne.n	800551c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005518:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800551a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d134      	bne.n	800558c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d003      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0xa6>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d003      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0xac>
 8005538:	e005      	b.n	8005546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800553a:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800553c:	617b      	str	r3, [r7, #20]
      break;
 800553e:	e005      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005540:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005542:	617b      	str	r3, [r7, #20]
      break;
 8005544:	e002      	b.n	800554c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	617b      	str	r3, [r7, #20]
      break;
 800554a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800554c:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	3301      	adds	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800555a:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	fb03 f202 	mul.w	r2, r3, r2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005572:	4b0a      	ldr	r3, [pc, #40]	; (800559c <HAL_RCC_GetSysClockFreq+0x108>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	0e5b      	lsrs	r3, r3, #25
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	3301      	adds	r3, #1
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800558c:	69bb      	ldr	r3, [r7, #24]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
 80055a0:	08005e78 	.word	0x08005e78
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	007a1200 	.word	0x007a1200

080055ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000010 	.word	0x20000010

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055c8:	f7ff fff0 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4904      	ldr	r1, [pc, #16]	; (80055ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	08005e70 	.word	0x08005e70

080055f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	220f      	movs	r2, #15
 80055fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005600:	4b12      	ldr	r3, [pc, #72]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0203 	and.w	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800560c:	4b0f      	ldr	r3, [pc, #60]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_GetClockConfig+0x5c>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	08db      	lsrs	r3, r3, #3
 800562a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005632:	4b07      	ldr	r3, [pc, #28]	; (8005650 <HAL_RCC_GetClockConfig+0x60>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0207 	and.w	r2, r3, #7
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	601a      	str	r2, [r3, #0]
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	40022000 	.word	0x40022000

08005654 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005660:	4b2a      	ldr	r3, [pc, #168]	; (800570c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800566c:	f7ff f9d2 	bl	8004a14 <HAL_PWREx_GetVoltageRange>
 8005670:	6178      	str	r0, [r7, #20]
 8005672:	e014      	b.n	800569e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005674:	4b25      	ldr	r3, [pc, #148]	; (800570c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	4a24      	ldr	r2, [pc, #144]	; (800570c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	6593      	str	r3, [r2, #88]	; 0x58
 8005680:	4b22      	ldr	r3, [pc, #136]	; (800570c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800568c:	f7ff f9c2 	bl	8004a14 <HAL_PWREx_GetVoltageRange>
 8005690:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005692:	4b1e      	ldr	r3, [pc, #120]	; (800570c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	4a1d      	ldr	r2, [pc, #116]	; (800570c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a4:	d10b      	bne.n	80056be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d919      	bls.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2ba0      	cmp	r3, #160	; 0xa0
 80056b0:	d902      	bls.n	80056b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056b2:	2302      	movs	r3, #2
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	e013      	b.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056b8:	2301      	movs	r3, #1
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e010      	b.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d902      	bls.n	80056ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056c4:	2303      	movs	r3, #3
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	e00a      	b.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b80      	cmp	r3, #128	; 0x80
 80056ce:	d102      	bne.n	80056d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056d0:	2302      	movs	r3, #2
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	e004      	b.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b70      	cmp	r3, #112	; 0x70
 80056da:	d101      	bne.n	80056e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056dc:	2301      	movs	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f023 0207 	bic.w	r2, r3, #7
 80056e8:	4909      	ldr	r1, [pc, #36]	; (8005710 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d001      	beq.n	8005702 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000
 8005710:	40022000 	.word	0x40022000

08005714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e049      	b.n	80057ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f841 	bl	80057c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 f9da 	bl	8005b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e04f      	b.n	8005890 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a23      	ldr	r2, [pc, #140]	; (800589c <HAL_TIM_Base_Start_IT+0xc4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581a:	d018      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIM_Base_Start_IT+0x76>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a19      	ldr	r2, [pc, #100]	; (80058b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d115      	bne.n	800587a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005856:	4013      	ands	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b06      	cmp	r3, #6
 800585e:	d015      	beq.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005866:	d011      	beq.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e008      	b.n	800588c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e000      	b.n	800588e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	40013400 	.word	0x40013400
 80058b0:	40014000 	.word	0x40014000
 80058b4:	00010007 	.word	0x00010007

080058b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d020      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0202 	mvn.w	r2, #2
 80058ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8e4 	bl	8005ad0 <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8d6 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f8e7 	bl	8005ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d020      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01b      	beq.n	8005968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0204 	mvn.w	r2, #4
 8005938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f8be 	bl	8005ad0 <HAL_TIM_IC_CaptureCallback>
 8005954:	e005      	b.n	8005962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f8b0 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8c1 	bl	8005ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d020      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01b      	beq.n	80059b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0208 	mvn.w	r2, #8
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2204      	movs	r2, #4
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f898 	bl	8005ad0 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f88a 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f89b 	bl	8005ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01b      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0210 	mvn.w	r2, #16
 80059d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2208      	movs	r2, #8
 80059d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f872 	bl	8005ad0 <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f864 	bl	8005abc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f875 	bl	8005ae4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0201 	mvn.w	r2, #1
 8005a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fe fbe8 	bl	80041f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d007      	beq.n	8005a48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f906 	bl	8005c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f8fe 	bl	8005c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f834 	bl	8005af8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0220 	mvn.w	r2, #32
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f8c6 	bl	8005c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a40      	ldr	r2, [pc, #256]	; (8005c20 <TIM_Base_SetConfig+0x114>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d013      	beq.n	8005b4c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2a:	d00f      	beq.n	8005b4c <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3d      	ldr	r2, [pc, #244]	; (8005c24 <TIM_Base_SetConfig+0x118>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00b      	beq.n	8005b4c <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3c      	ldr	r2, [pc, #240]	; (8005c28 <TIM_Base_SetConfig+0x11c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d007      	beq.n	8005b4c <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3b      	ldr	r2, [pc, #236]	; (8005c2c <TIM_Base_SetConfig+0x120>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d003      	beq.n	8005b4c <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3a      	ldr	r2, [pc, #232]	; (8005c30 <TIM_Base_SetConfig+0x124>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d108      	bne.n	8005b5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2f      	ldr	r2, [pc, #188]	; (8005c20 <TIM_Base_SetConfig+0x114>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01f      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6c:	d01b      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <TIM_Base_SetConfig+0x118>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d017      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2b      	ldr	r2, [pc, #172]	; (8005c28 <TIM_Base_SetConfig+0x11c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2a      	ldr	r2, [pc, #168]	; (8005c2c <TIM_Base_SetConfig+0x120>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a29      	ldr	r2, [pc, #164]	; (8005c30 <TIM_Base_SetConfig+0x124>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a28      	ldr	r2, [pc, #160]	; (8005c34 <TIM_Base_SetConfig+0x128>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a27      	ldr	r2, [pc, #156]	; (8005c38 <TIM_Base_SetConfig+0x12c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_Base_SetConfig+0x9a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a26      	ldr	r2, [pc, #152]	; (8005c3c <TIM_Base_SetConfig+0x130>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d108      	bne.n	8005bb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a10      	ldr	r2, [pc, #64]	; (8005c20 <TIM_Base_SetConfig+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00f      	beq.n	8005c04 <TIM_Base_SetConfig+0xf8>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <TIM_Base_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00b      	beq.n	8005c04 <TIM_Base_SetConfig+0xf8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <TIM_Base_SetConfig+0x128>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_Base_SetConfig+0xf8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <TIM_Base_SetConfig+0x12c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_Base_SetConfig+0xf8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0f      	ldr	r2, [pc, #60]	; (8005c3c <TIM_Base_SetConfig+0x130>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d103      	bne.n	8005c0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	615a      	str	r2, [r3, #20]
}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40013400 	.word	0x40013400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40014400 	.word	0x40014400
 8005c3c:	40014800 	.word	0x40014800

08005c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <memcmp>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	3901      	subs	r1, #1
 8005c80:	4402      	add	r2, r0
 8005c82:	4290      	cmp	r0, r2
 8005c84:	d101      	bne.n	8005c8a <memcmp+0xe>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e005      	b.n	8005c96 <memcmp+0x1a>
 8005c8a:	7803      	ldrb	r3, [r0, #0]
 8005c8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	d001      	beq.n	8005c98 <memcmp+0x1c>
 8005c94:	1b18      	subs	r0, r3, r4
 8005c96:	bd10      	pop	{r4, pc}
 8005c98:	3001      	adds	r0, #1
 8005c9a:	e7f2      	b.n	8005c82 <memcmp+0x6>

08005c9c <memset>:
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <__libc_init_array>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4d0d      	ldr	r5, [pc, #52]	; (8005ce4 <__libc_init_array+0x38>)
 8005cb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ce8 <__libc_init_array+0x3c>)
 8005cb2:	1b64      	subs	r4, r4, r5
 8005cb4:	10a4      	asrs	r4, r4, #2
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	42a6      	cmp	r6, r4
 8005cba:	d109      	bne.n	8005cd0 <__libc_init_array+0x24>
 8005cbc:	4d0b      	ldr	r5, [pc, #44]	; (8005cec <__libc_init_array+0x40>)
 8005cbe:	4c0c      	ldr	r4, [pc, #48]	; (8005cf0 <__libc_init_array+0x44>)
 8005cc0:	f000 f826 	bl	8005d10 <_init>
 8005cc4:	1b64      	subs	r4, r4, r5
 8005cc6:	10a4      	asrs	r4, r4, #2
 8005cc8:	2600      	movs	r6, #0
 8005cca:	42a6      	cmp	r6, r4
 8005ccc:	d105      	bne.n	8005cda <__libc_init_array+0x2e>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd4:	4798      	blx	r3
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__libc_init_array+0xc>
 8005cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cde:	4798      	blx	r3
 8005ce0:	3601      	adds	r6, #1
 8005ce2:	e7f2      	b.n	8005cca <__libc_init_array+0x1e>
 8005ce4:	08005ea8 	.word	0x08005ea8
 8005ce8:	08005ea8 	.word	0x08005ea8
 8005cec:	08005ea8 	.word	0x08005ea8
 8005cf0:	08005eac 	.word	0x08005eac

08005cf4 <memcpy>:
 8005cf4:	440a      	add	r2, r1
 8005cf6:	4291      	cmp	r1, r2
 8005cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cfc:	d100      	bne.n	8005d00 <memcpy+0xc>
 8005cfe:	4770      	bx	lr
 8005d00:	b510      	push	{r4, lr}
 8005d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d0a:	4291      	cmp	r1, r2
 8005d0c:	d1f9      	bne.n	8005d02 <memcpy+0xe>
 8005d0e:	bd10      	pop	{r4, pc}

08005d10 <_init>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr

08005d1c <_fini>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr
